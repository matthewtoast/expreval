{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import * as seedrandom from \"seedrandom\"\nimport Decimal from 'decimal.js'\n\nexport type DictOf<T> = { [key: string]: T }\nexport type TExprScalar = number | string | boolean | null\nexport type TExprFuncAsync = (ctx: TExprContext, ...args: TExprScalar[]) => Promise<TExprScalar>\nexport type TExprFuncSync = (ctx: TExprContext, ...args: TExprScalar[]) => TExprScalar\nexport type TExprFuncDef = {\n  assignment?: true\n  lazy?: true\n} & ({\n  async: true\n  f: TExprFuncAsync\n} | {\n  async?: false\n  f: TExprFuncSync\n})\n\nexport type TBinopDef = {\n  alias: string,\n}\nexport type TUnopDef = {\n  alias: string,\n}\n\nexport type TExprResult = {\n  result: TExprScalar,\n  ctx: TExprContext\n}\n\nexport type TExprContext = {\n  rng: () => number\n  funcs: DictOf<TExprFuncDef>\n  vars: DictOf<TExprScalar>\n  binops: DictOf<TBinopDef>\n  unops: DictOf<TUnopDef>\n}\n\nexport type TExpression =\n  | TCallExpression\n  | TIdentifierExpression\n  | TBinaryExpression\n  | TLiteralExpression\n  | TTernaryExpression\n  | TUnaryExpression\n\nexport type TCallExpression = {\n  type: \"CallExpression\"\n  callee: TIdentifierExpression\n  arguments: TExpression[]\n}\n\nexport type TIdentifierExpression = {\n  type: \"Identifier\"\n  name: string\n}\n\nexport type TBinaryExpression = {\n  type: \"BinaryExpression\"\n  left: TExpression\n  operator: string\n  right: TExpression\n}\n\nexport type TLiteralExpression = {\n  type: \"Literal\"\n  value: string\n  raw: string\n}\n\nexport type TTernaryExpression = {\n  type: \"TernaryExpression\"\n  test: TExpression\n  consequent: TExpression\n  alternate: TExpression\n}\n\nexport type TUnaryExpression = {\n  type: \"UnaryExpression\"\n  argument: TExpression\n  operator: string\n}\n\nexport const CONSTS: DictOf<TExprScalar> = {\n  E: Math.E,\n  LN10: Math.LN10,\n  LN2: Math.LN2,\n  LOG10E: Math.LOG10E,\n  LOG2E: Math.LOG2E,\n  PI: Math.PI,\n  SQRT1_2: Math.SQRT1_2,\n  SQRT2: Math.SQRT2,\n}\n\nconst BINOP_MAP = {\n  \"**\": {alias: \"pow\"},\n  \"*\": {alias: \"mul\"},\n  \"/\": {alias: \"div\"},\n  \"%\": {alias: \"mod\"},\n  \"+\": {alias: \"add\"},\n  \"-\": {alias: \"sub\"},\n  \">>>\": {alias: \"bitwiseRightShiftUnsigned\"},\n  \"<<\": {alias: \"bitwiseLeftShift\"},\n  \">>\": {alias: \"bitwiseRightShift\"},\n  \"<=\": {alias: \"lte\"},\n  \">=\": {alias: \"gte\"},\n  \"<\": {alias: \"lt\"},\n  \">\": {alias: \"gt\"},\n  \"===\": {alias: \"eq\"},\n  \"!==\": {alias: \"neq\"},\n  \"==\": {alias: \"eq\"},\n  \"!=\": {alias: \"neq\"},\n  \"&\": {alias: \"bitwiseAnd\"},\n  \"^\": {alias: \"bitwiseXor\"},\n  \"|\": {alias: \"bitwiseOr\"},\n  \"&&\": {alias: \"and\"},\n  \"||\": {alias: \"or\"},\n  \":=\": {alias: \"set\"},\n  \"+=\": {alias: \"setAdd\"},\n  \"-=\": {alias: \"setSub\"},\n  \"/=\": {alias: \"setDiv\"},\n  \"*=\": {alias: \"setMul\"},\n}\n\nconst UNOP_MAP = {\n  \"+\": {alias: \"number\"},\n  \"-\": {alias: \"negate\"},\n  \"~\": {alias: \"bitwiseNot\"},\n  \"!\": {alias: \"not\"},\n}\n\nconst IgnoreWhitespace = (Rule) => Ignore(/^\\s+/, Rule)\nconst QuoteToken = Any(/^('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')/, /^(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")/)\nconst NumericToken = Any(/^((?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\\b/, /^(0[xX][0-9a-fA-F]+)\\b/)\nconst NullToken = /^(null)\\b/\nconst BooleanToken = /^(true|false)\\b/\nconst IdentifierToken = /^([a-zA-Z_$][a-zA-Z0-9_$]*)/\nconst BinaryOperatorPrecedence = [\n  \"**\",\n  Any(\"*\", \"/\", \"%\"),\n  Any(\"+\", \"-\"),\n  Any(\">>>\", \"<<\", \">>\"),\n  Any(\"<=\", \">=\", \"<\", \">\"),\n  Any(\"===\", \"!==\", \"==\", \"!=\"),\n  /^&(?!&)/,\n  \"^\",\n  /^\\|(?!\\|)/,\n  \"&&\",\n  \"||\",\n  Any(\":=\", \"+=\", \"-=\", \"*=\", \"/=\")\n]\n\nexport function createExprContext({\n  funcs,\n  vars,\n  binops,\n  unops,\n  seed = \"expreval\",\n}: {\n  funcs?: DictOf<TExprFuncDef>,\n  vars?: DictOf<TExprScalar>,\n  binops?: DictOf<string>,\n  unops?: DictOf<string>,\n  seed?: string\n}): TExprContext {\n  return {\n    rng: seedrandom.default(seed),\n    vars: { ...CONSTS, ...vars },\n    funcs: { ...STDLIB, ...funcs },\n    binops: {...BINOP_MAP, ...binops},\n    unops: {...UNOP_MAP, ...unops},\n  }\n}\n\nexport async function evaluateExpr(code: string, ctx: TExprContext = createExprContext({})): Promise<TExprResult> {\n  return {\n    result: await executeAst(parseExpr(code), ctx),\n    ctx,\n  }\n}\n\nexport default evaluateExpr\n\nexport function parseExpr(code: string): TExpression {\n  const parser = Parser(DefaultGrammar)\n  return parser(code.replace(/\\/\\/.*\\n/g, ''))\n}\n\nexport async function executeAst(ast: TExpression, ctx: TExprContext = createExprContext({})): Promise<TExprScalar> {\n  switch (ast.type) {\n    case \"Literal\":\n      return ast.value\n    case \"Identifier\":\n      if (Object.keys(ctx.vars).includes(ast.name)) {\n        return ctx.vars[ast.name]!\n      }\n      return ast.name\n    case \"CallExpression\":\n      const fdef = Object.keys(ctx.funcs).includes(ast.callee.name) ? ctx.funcs[ast.callee.name] : null\n      if (fdef) {\n        const args: TExprScalar[] = []\n        if (fdef.assignment && ast.arguments.length > 1) {\n          const left = exprToIdentifier(ast.arguments[0]!) ?? ''\n          const right = ast.arguments.slice(1)\n          args.push(left, ...await asyncMap(right, async (expr) => await executeAst(expr, ctx)))\n        } else {\n          args.push(...await asyncMap(ast.arguments, async (expr) => await executeAst(expr, ctx)))\n        }\n        if (fdef.async) {\n          return await fdef.f(ctx, ...args)\n        }\n        return fdef.f(ctx, ...args)\n      }\n      throw new Error(`Function not found: '${ast.callee.name}'`)\n    case \"BinaryExpression\":\n      const binop = Object.keys(ctx.binops).includes(ast.operator) ? ctx.binops[ast.operator] : null\n      if (binop) {\n        return executeAst(\n          {\n            type: \"CallExpression\",\n            callee: {\n              name: binop.alias,\n              type: \"Identifier\",\n            },\n            arguments: [ast.left, ast.right],\n          },\n          ctx\n        )\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`)\n    case \"TernaryExpression\":\n      const result = await executeAst(ast.test, ctx)\n      if (toBoolean(result)) {\n        return await executeAst(ast.consequent, ctx)\n      }\n      return await executeAst(ast.alternate, ctx)\n    case \"UnaryExpression\":\n      const unop = Object.keys(ctx.unops).includes(ast.operator) ? ctx.unops[ast.operator] : null\n      if (unop) {\n        return executeAst(\n          {\n            type: \"CallExpression\",\n            callee: {\n              name: unop.alias,\n              type: \"Identifier\",\n            },\n            arguments: [ast.argument],\n          },\n          ctx\n        )\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`)\n    default:\n      throw new Error(`Syntax error`)\n  }\n}\n\nexport function exprToIdentifier(v: TExpression): string|null {\n  if (v.type === 'Identifier') {\n    return v.name\n  }\n  return null\n}\n\nexport function toNumber(v: any, fallback: number = 0): number {\n  if (typeof v === \"number\") {\n    return isNaN(v) ? fallback : v\n  }\n  if (typeof v === \"string\") {\n    if (v.includes(\".\")) {\n      return parseFloat(v)\n    }\n    return parseInt(v)\n  }\n  return fallback\n}\n\nexport function toBoolean(v: TExprScalar): boolean {\n  if (!v) {\n    return false\n  }\n  if (typeof v === \"string\" && v.match(/^\\s+$/)) {\n    return false\n  }\n  if (v === \"false\") {\n    return false\n  }\n  if (v === \"0\") {\n    return false\n  }\n  return true\n}\n\nexport function toString(v: TExprScalar, radix: number = 10): string {\n  if (typeof v === \"number\") {\n    return v.toString(radix)\n  }\n  if (v === true || v === \"true\") {\n    return \"true\"\n  }\n  if (!v || v === \"false\") {\n    return \"false\"\n  }\n  return v + \"\"\n}\n\nexport function toDecimal(n: TExprScalar): Decimal {\n  if (!n) {\n    return new Decimal(0)\n  }\n  if (n === true) {\n    return new Decimal(1)\n  }\n  if (typeof n === \"number\") {\n    return new Decimal(n)\n  }\n  if (!toBoolean(n)) {\n    return new Decimal(0)\n  }\n  return new Decimal(n)\n}\n\nasync function asyncMap<V, T>(\n  array: V[],\n  callback: (el: V, idx: number, arr: V[]) => Promise<T>\n) {\n  const out: T[] = []\n  for (let index = 0; index < array.length; index++) {\n    const m = await callback(array[index]!, index, array)\n    out.push(m)\n  }\n  return out\n}\n\nfunction setVar<T extends TExprScalar>(ctx: TExprContext, name: any, value: T): T {\n  const key = toString(name)\n  if (key.match(/^__proto__|prototype|constructor$/)) {\n    return value\n  }\n  ctx.vars[key] = value\n  return value\n}\n\nfunction toVar(ctx: TExprContext, name: any): TExprScalar {\n  return ctx.vars[name + \"\"] ?? null\n}\n\nexport const STDLIB: DictOf<TExprFuncDef> = {\n  do: {\n    f(ctx, ...args) {\n      return args[args.length - 1] ?? null\n    }\n  },\n\n  set: {\n    assignment: true,\n    f(ctx, left, right) {\n      return setVar(ctx, left, right)\n    }\n  },\n  setAdd: {\n    assignment: true,\n    f(ctx, left, right) {\n      return setVar(ctx, left, toNumber(toVar(ctx, left)) + toNumber(right))\n    }\n  },\n  setSub: {\n    assignment: true,\n    f(ctx, left, right) {\n      return setVar(ctx, left, toNumber(toVar(ctx, left)) - toNumber(right))\n    }\n  },\n  setMul: {\n    assignment: true,\n    f(ctx, left, right) {\n      return setVar(ctx, left, toNumber(toVar(ctx, left)) * toNumber(right))\n    }\n  },\n  setDiv: {\n    assignment: true,\n    f(ctx, left, right) {\n      return setVar(ctx, left, toNumber(toVar(ctx, left)) / toNumber(right))\n    }\n  },\n\n  unixTimestampNow: {\n    f() {\n      return Date.now()\n    },\n  },\n  unixTimestampForDate: {\n    f(ctx, year, mon, day, hour, min, second) {\n      return new Date(\n        toNumber(year),\n        toNumber(mon),\n        toNumber(day),\n        toNumber(hour),\n        toNumber(min),\n        toNumber(second)\n      ).getTime()\n    },\n  },\n\n  all: {\n    f(ctx, ...xs) {\n      for (let i = 0; i < xs.length; i++) {\n        if (!xs[i]) {\n          return false\n        }\n      }\n      return true\n    },\n  },\n  any: {\n    f(ctx, ...xs) {\n      for (let i = 0; i < xs.length; i++) {\n        if (xs[i]) {\n          return true\n        }\n      }\n      return false\n    },\n  },\n  some: {\n    f(ctx, ...xs) {\n      return !!STDLIB[\"any\"]!.f(ctx, ...xs)\n    },\n  },\n  none: {\n    f(ctx, ...xs) {\n      return !STDLIB[\"any\"]!.f(ctx, ...xs)\n    },\n  },\n\n  or: {\n    f(ctx, a, b) {\n      return toBoolean(a) || toBoolean(b)\n    },\n  },\n  and: {\n    f(ctx, a, b) {\n      return toBoolean(a) && toBoolean(b)\n    },\n  },\n  not: {\n    f(ctx, a) {\n      return !toBoolean(a)\n    },\n  },\n\n  gt: {\n    f(ctx, a, b) {\n      return toDecimal(a).gt(toDecimal(b))\n    },\n  },\n  gte: {\n    f(ctx, a, b) {\n      return toDecimal(a).gte(toDecimal(b))\n    },\n  },\n  lt: {\n    f(ctx, a, b) {\n      return toDecimal(a).lt(toDecimal(b))\n    },\n  },\n  lte: {\n    f(ctx, a, b) {\n      return toDecimal(a).lte(toDecimal(b))\n    },\n  },\n  eq: {\n    f(ctx, a, b) {\n      return toString(a) === toString(b)\n    },\n  },\n  neq: {\n    f(ctx, a, b) {\n      return toString(a) !== toString(b)\n    },\n  },\n\n  rand: {\n    f(ctx) {\n      return ctx.rng()\n    },\n  },\n  randInRange: {\n    f(ctx, min, max) {\n      return ctx.rng() * (Number(max) - Number(min)) + Number(min)\n    },\n  },\n  randInt: {\n    f(ctx) {\n      return Math.floor(ctx.rng() * 10)\n    },\n  },\n  randIntInRange: {\n    f(ctx, min, max) {\n      min = Math.ceil(Number(min))\n      max = Math.floor(Number(max))\n      return Math.floor(ctx.rng() * (max - min + 1)) + min\n    },\n  },\n\n  number: {\n    f(ctx, a) {\n      return Number(a)\n    },\n  },\n  bitwiseOr: {\n    f(ctx, a, b) {\n      return Number(a) | Number(b)\n    },\n  },\n  bitwiseXor: {\n    f(ctx, a, b) {\n      return Number(a) ^ Number(b)\n    },\n  },\n  bitwiseAnd: {\n    f(ctx, a, b) {\n      return Number(a) & Number(b)\n    },\n  },\n  bitwiseNot: {\n    f(ctx, a) {\n      return ~Number(a)\n    },\n  },\n  bitwiseLeftShift: {\n    f(ctx, a, b) {\n      return Number(a) << Number(b)\n    },\n  },\n  bitwiseRightShift: {\n    f(ctx, a, b) {\n      return Number(a) >> Number(b)\n    },\n  },\n  bitwiseRightshiftUnsigned: {\n    f(ctx, a, b) {\n      return Number(a) >>> Number(b)\n    },\n  },\n  negate: {\n    f(ctx, a) {\n      return toDecimal(a).neg().toFixed()\n    },\n  },\n  add: {\n    f(ctx, a, b) {\n      return toDecimal(a).add(toDecimal(b)).toFixed()\n    },\n  },\n  sub: {\n    f(ctx, a, b) {\n      return toDecimal(a).sub(toDecimal(b)).toFixed()\n    },\n  },\n  div: {\n    f(ctx, a, b) {\n      return toDecimal(a).div(toDecimal(b)).toFixed()\n    },\n  },\n  mul: {\n    f(ctx, a, b) {\n      return toDecimal(a).mul(toDecimal(b)).toFixed()\n    },\n  },\n  mod: {\n    f(ctx, a, b) {\n      return toDecimal(a).mod(toDecimal(b)).toFixed()\n    },\n  },\n  pow: {\n    f(ctx, a, b) {\n      return toDecimal(a).pow(toDecimal(b)).toFixed()\n    },\n  },\n\n  abs: {\n    f(ctx, a) {\n      return Decimal.abs(toDecimal(a)).toFixed()\n    },\n  },\n  acos: {\n    f(ctx, a) {\n      return Decimal.acos(toDecimal(a)).toFixed()\n    },\n  },\n  acosh: {\n    f(ctx, a) {\n      return Decimal.acosh(toDecimal(a)).toFixed()\n    },\n  },\n  asin: {\n    f(ctx, a) {\n      return Decimal.asin(toDecimal(a)).toFixed()\n    },\n  },\n  asinh: {\n    f(ctx, a) {\n      return Decimal.asinh(toDecimal(a)).toFixed()\n    },\n  },\n  atan: {\n    f(ctx, a) {\n      return Decimal.atan(toDecimal(a)).toFixed()\n    },\n  },\n  atan2: {\n    f(ctx, a, b) {\n      return Decimal.atan2(toDecimal(a), toDecimal(b)).toFixed()\n    },\n  },\n  atanh: {\n    f(ctx, a) {\n      return Decimal.atanh(toDecimal(a)).toFixed()\n    },\n  },\n  cbrt: {\n    f(ctx, a) {\n      return Decimal.cbrt(toDecimal(a)).toFixed()\n    },\n  },\n  ceil: {\n    f(ctx, a) {\n      return Decimal.ceil(toDecimal(a)).toFixed()\n    },\n  },\n  cos: {\n    f(ctx, a) {\n      return Decimal.cos(toDecimal(a)).toFixed()\n    },\n  },\n  cosh: {\n    f(ctx, a) {\n      return Decimal.cosh(toDecimal(a)).toFixed()\n    },\n  },\n  exp: {\n    f(ctx, a) {\n      return Decimal.exp(toDecimal(a)).toFixed()\n    },\n  },\n  floor: {\n    f(ctx, a) {\n      return Decimal.floor(toDecimal(a)).toFixed()\n    },\n  },\n  hypot: {\n    f(ctx, a) {\n      return Decimal.hypot(toDecimal(a)).toFixed()\n    },\n  },\n  log: {\n    f(ctx, a) {\n      return Decimal.log(toDecimal(a)).toFixed()\n    },\n  },\n  log10: {\n    f(ctx, a) {\n      return Decimal.log10(toDecimal(a)).toFixed()\n    },\n  },\n  log2: {\n    f(ctx, a) {\n      return Decimal.log2(toDecimal(a)).toFixed()\n    },\n  },\n  max: {\n    f(ctx, a) {\n      return Decimal.max(toDecimal(a)).toFixed()\n    },\n  },\n  min: {\n    f(ctx, a) {\n      return Decimal.min(toDecimal(a)).toFixed()\n    },\n  },\n  round: {\n    f(ctx, a) {\n      return Decimal.round(toDecimal(a)).toFixed()\n    },\n  },\n  sign: {\n    f(ctx, a) {\n      return Decimal.sign(toDecimal(a)).toFixed()\n    },\n  },\n  sin: {\n    f(ctx, a) {\n      return Decimal.sin(toDecimal(a)).toFixed()\n    },\n  },\n  sinh: {\n    f(ctx, a) {\n      return Decimal.sinh(toDecimal(a)).toFixed()\n    },\n  },\n  sqrt: {\n    f(ctx, a) {\n      return Decimal.sqrt(toDecimal(a)).toFixed()\n    },\n  },\n  tan: {\n    f(ctx, a) {\n      return Decimal.tan(toDecimal(a)).toFixed()\n    },\n  },\n  tanh: {\n    f(ctx, a) {\n      return Decimal.tanh(toDecimal(a)).toFixed()\n    },\n  },\n  trunc: {\n    f(ctx, a) {\n      return Decimal.trunc(toDecimal(a)).toFixed()\n    },\n  },\n\n  fromCharCode: {\n    f(ctx, a) {\n      return String.fromCharCode(Number(a))\n    },\n  },\n  fromCodePoint: {\n    f(ctx, a) {\n      return String.fromCodePoint(Number(a))\n    },\n  },\n  parseInt: {\n    f(ctx, a, b) {\n      return parseInt(toString(a), Number(b))\n    },\n  },\n  parseFloat: {\n    f(ctx, a) {\n      return parseFloat(toString(a))\n    },\n  },\n  length: {\n    f(ctx, a) {\n      return toString(a).length\n    },\n  },\n  charAt: {\n    f(ctx, a, b) {\n      return toString(a).charAt(Number(b))\n    },\n  },\n  charCodeAt: {\n    f(ctx, a, b) {\n      return toString(a).charCodeAt(Number(b))\n    },\n  },\n  codePointAt: {\n    f(ctx, a, b) {\n      return toString(a).codePointAt(Number(b)) ?? 0\n    },\n  },\n  concat: {\n    f(ctx, ...ss) {\n      return \"\".concat(...ss.map((s) => toString(s)))\n    },\n  },\n  endsWith: {\n    f(ctx, a, b) {\n      return toString(a).endsWith(toString(b))\n    },\n  },\n  includes: {\n    f(ctx, a, b) {\n      return toString(a).includes(toString(b))\n    },\n  },\n  indexOf: {\n    f(ctx, a, b) {\n      return toString(a).indexOf(toString(b))\n    },\n  },\n  lastIndexOf: {\n    f(ctx, a, b) {\n      return toString(a).lastIndexOf(toString(b))\n    },\n  },\n  localeCompare: {\n    f(ctx, a, b) {\n      return toString(a).localeCompare(toString(b))\n    },\n  },\n  match: {\n    f(ctx, a, b) {\n      return !!toString(a).match(toString(b))\n    },\n  },\n  matchAll: {\n    f(ctx, a, b) {\n      return !!toString(a).match(toString(b))\n    },\n  },\n  padEnd: {\n    f(ctx, a, b, c) {\n      return toString(a).padEnd(Number(b), toString(c ?? \"\"))\n    },\n  },\n  padStart: {\n    f(ctx, a, b, c) {\n      return toString(a).padStart(Number(b), toString(c ?? \"\"))\n    },\n  },\n  repeat: {\n    f(ctx, a, b) {\n      return toString(a).repeat(Number(b))\n    },\n  },\n  replace: {\n    f(ctx, a, b, c) {\n      return toString(a).replace(toString(b), toString(c))\n    },\n  },\n  replaceAll: {\n    f(ctx, a, b, c) {\n      return toString(a).replaceAll(toString(b), toString(c))\n    },\n  },\n  slice: {\n    f(ctx, a, b, c) {\n      return toString(a).slice(Number(b), Number(c ?? toString(a).length))\n    },\n  },\n  startsWith: {\n    f(ctx, a, b) {\n      return toString(a).startsWith(toString(b))\n    },\n  },\n  substring: {\n    f(ctx, a, b, c) {\n      return toString(a).substring(Number(b), Number(c))\n    },\n  },\n  toLowerCase: {\n    f(ctx, a) {\n      return toString(a).toLowerCase()\n    },\n  },\n  toUpperCase: {\n    f(ctx, a) {\n      return toString(a).toUpperCase()\n    },\n  },\n  trim: {\n    f(ctx, a) {\n      return toString(a).trim()\n    },\n  },\n  trimEnd: {\n    f(ctx, a) {\n      return toString(a).trimEnd()\n    },\n  },\n  trimStart: {\n    f(ctx, a) {\n      return toString(a).trimStart()\n    },\n  },\n}\n\n// The code below is derived from code at https://github.com/dmaevsky/rd-parse. License:\n// The MIT License (MIT)\n// Copyright 2013 - present Dmitry Maevsky\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst associativity = (binop) => (binop === \"**\" ? r2l : l2r)\n\nfunction locAt(text, newPos, { pos, line, column }) {\n  while (pos < newPos) {\n    const ch = text[pos++]\n    if (ch === \"\\n\") {\n      column = 1\n      line++\n    } else {\n      column++\n    }\n  }\n  return { pos, line, column }\n}\n\nconst markSeen = ($) => {\n  if ($.pos > $.lastSeen.pos) {\n    Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen))\n  }\n}\n\nfunction RegexToken(pattern) {\n  return ($) => {\n    markSeen($)\n    const match = pattern.exec($.text.substring($.pos))\n    if (!match) {\n      return $\n    }\n    const $next = {\n      ...$,\n      pos: $.pos + match[0].length,\n    }\n    for (let i = 1; i < match.length; i++) {\n      $.stack[$next.sp++] = match[i]\n    }\n    return $next\n  }\n}\n\nfunction StringToken(pattern) {\n  return ($) => {\n    markSeen($)\n    if ($.text.startsWith(pattern, $.pos)) {\n      return {\n        ...$,\n        pos: $.pos + pattern.length,\n      }\n    }\n    return $\n  }\n}\n\nfunction Use(rule) {\n  if (typeof rule === \"function\") {\n    return rule\n  }\n  if (rule instanceof RegExp) {\n    return RegexToken(rule)\n  }\n  if (typeof rule === \"string\") {\n    return StringToken(rule)\n  }\n  throw new Error(\"Invalid rule\")\n}\n\nfunction Ignore(toIgnore, rule) {\n  rule = Use(rule)\n  if (toIgnore) {\n    toIgnore = Ignore(null, Plus(toIgnore))\n  }\n\n  return ($) => {\n    const $cur = toIgnore ? toIgnore($) : $\n    $.ignore.push(toIgnore)\n    const $next = rule($cur)\n    $.ignore.pop()\n    return $next === $cur ? $ : toIgnore ? toIgnore($next) : $next\n  }\n}\n\nconst skipIgnored = ($) => {\n  if (!$.ignore.length) {\n    return $\n  }\n  const toIgnore = $.ignore[$.ignore.length - 1]\n  return toIgnore ? toIgnore($) : $\n}\n\nfunction All(...rules) {\n  rules = rules.map(Use)\n  return ($) => {\n    let $cur = $\n    for (let i = 0; i < rules.length; i++) {\n      const $before = i > 0 ? skipIgnored($cur) : $cur\n      const $after = rules[i]($before)\n      if ($after === $before) {\n        return $\n      }\n      if ($after.pos > $before.pos || $after.sp > $before.sp) {\n        $cur = $after\n      }\n    }\n    return $cur\n  }\n}\n\nfunction Any(...rules) {\n  rules = rules.map(Use)\n  return ($) => {\n    for (let i = 0; i < rules.length; i++) {\n      const $next = rules[i]($)\n      if ($next !== $) {\n        return $next\n      }\n    }\n    return $\n  }\n}\n\nfunction Plus(rule) {\n  rule = Use(rule)\n  return ($) => {\n    while (true) {\n      const $cur = skipIgnored($)\n      const $next = rule($cur)\n      if ($next === $cur) {\n        return $\n      }\n      $ = $next\n    }\n  }\n}\n\nfunction Optional(rule) {\n  rule = Use(rule)\n  return ($) => {\n    const $next = rule($)\n    if ($next !== $) {\n      return $next\n    }\n    return { ...$ }\n  }\n}\n\nfunction Node(rule, reducer) {\n  rule = Use(rule)\n  return ($) => {\n    const $next = rule($)\n    if ($next === $) {\n      return $\n    }\n    const node = reducer($.stack.slice($.sp, $next.sp), $, $next)\n    $next.sp = $.sp\n    if (node !== null) {\n      $.stack[$next.sp++] = node\n    }\n    return $next\n  }\n}\n\nconst Star = (rule) => Optional(Plus(rule))\n\nconst Y = (proc) => ((x) => proc((y) => x(x)(y)))((x) => proc((y) => x(x)(y)))\n\nconst START = (text, pos = 0) => ({\n  text,\n  ignore: [],\n  stack: [],\n  sp: 0,\n  lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),\n  pos,\n})\n\nfunction Parser(Grammar, pos = 0, partial = false): (text: string) => TExpression {\n  return (text) => {\n    if (typeof text !== \"string\") {\n      throw new Error(\"Parsing function expects a string input\")\n    }\n    const $ = START(text, pos)\n    const $next = Grammar($)\n    if ($ === $next || (!partial && $next.pos < text.length)) {\n      throw new Error(\n        `Unexpected token at ${$.lastSeen.line}:${$.lastSeen.column}. Remainder: ${text.slice($.lastSeen.pos)}`\n      )\n    }\n    return $.stack[0] as unknown as TExpression\n  }\n}\n\nfunction l2r(parts, $) {\n  let left = parts[0]\n  for (let i = 1; i < parts.length; i += 2) {\n    const [operator, right] = [parts[i].operator, parts[i + 1]]\n    left = srcMap(\n      {\n        type: \"BinaryExpression\",\n        left,\n        operator,\n        right,\n      },\n      $,\n      { pos: right.pos + right.text.length }\n    )\n  }\n  return left\n}\n\nfunction r2l(parts, _, $next) {\n  let right = parts[parts.length - 1]\n  for (let i = parts.length - 2; i >= 0; i -= 2) {\n    const [left, operator] = [parts[i - 1], parts[i].operator]\n    right = srcMap(\n      {\n        type: \"BinaryExpression\",\n        left,\n        operator,\n        right,\n      },\n      { pos: left.pos },\n      $next\n    )\n  }\n  return right\n}\n\nconst Operator = (Rule) => Node(Rule, (_, $, $next) => ({ $, operator: $.text.substring($.pos, $next.pos) }))\n\nconst srcMap = (obj, $, $next) =>\n  Object.defineProperties(obj, {\n    pos: { writable: true, configurable: true, value: $.pos },\n    text: {\n      writable: true,\n      configurable: true,\n      value: ($.text || $next.text).slice($.pos, $next.pos),\n    },\n  })\n\nconst DefaultGrammar = IgnoreWhitespace(\n  Y((Expression) => {\n    const Identifier = Node(IdentifierToken, ([name]) => ({ type: \"Identifier\", name }))\n    const StringLiteral = Node(QuoteToken, ([raw]) => ({\n      type: \"Literal\",\n      value: raw.slice(1, -1),\n      raw,\n    }))\n    const NumericLiteral = Node(NumericToken, ([raw]) => ({ type: \"Literal\", value: +raw, raw }))\n    const NullLiteral = Node(NullToken, ([raw]) => ({ type: \"Literal\", value: null, raw }))\n    const BooleanLiteral = Node(BooleanToken, ([raw]) => ({\n      type: \"Literal\",\n      value: raw === \"true\",\n      raw,\n    }))\n    const Literal = Any(StringLiteral, NumericLiteral, NullLiteral, BooleanLiteral)\n    const ArgumentsList = All(Expression, Star(All(\",\", Expression)))\n    const Arguments = Node(All(\"(\", Optional(All(ArgumentsList, Optional(\",\"))), \")\"), (args) => ({\n      args,\n    }))\n    const ArgumentsExpression = Node(Any(Arguments), ([part], _, $next) => ({ part, $next }))\n    const CompoundExpression = Node(All(Expression, Star(All(\",\", Expression))), (leafs) =>\n      leafs.length > 1 ? { type: \"CompoundExpression\", leafs } : leafs[0]\n    )\n    const PrimaryExpression = Node(Any(Literal, Identifier, All(\"(\", CompoundExpression, \")\")), ([expr], $, $next) =>\n      srcMap(expr, $, $next)\n    )\n    const CallExpression = Node(All(PrimaryExpression, Star(ArgumentsExpression)), (parts, $, $last) => {\n      return parts.reduce((acc, { part, $next }) => {\n        return srcMap({ type: \"CallExpression\", callee: acc, arguments: part.args }, $, $next)\n      })\n    })\n    const UnaryOperator = Operator(Any(\"+\", \"-\", \"~\", \"!\"))\n    const UnaryExpression = Node(All(Star(UnaryOperator), CallExpression), (parts, _, $next) =>\n      parts.reduceRight((argument, { $, operator }) =>\n        srcMap({ type: \"UnaryExpression\", argument, operator }, $, $next)\n      )\n    )\n    const LogicalExpressionOrExpression = BinaryOperatorPrecedence.reduce(\n      (Expr, BinaryOp) => Node(All(Expr, Star(All(Operator(BinaryOp), Expr))), associativity(BinaryOp)),\n      UnaryExpression\n    )\n    const TernaryExpression = Node(\n      All(LogicalExpressionOrExpression, Optional(All(\"?\", Expression, \":\", Expression))),\n      ([test, consequent, alternate]) =>\n        consequent ? { type: \"TernaryExpression\", test, consequent, alternate } : test\n    )\n    return Node(Any(TernaryExpression), ([expr], $, $next) => srcMap(expr, $, $next))\n  })\n)\n"],"names":["seedrandom","Decimal"],"mappings":"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"}