{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import * as seedrandom from 'seedrandom';\n\nexport type DictOf<T> = { [key: string]: T };\nexport type TExprScalar = number | string | boolean | null;\nexport type TExprArray = TExprValue[];\nexport type TExprObject = { [key: string]: TExprValue };\nexport type TExprValue = TExprScalar | TExprArray | TExprObject;\n\nexport type TExprFuncAsync = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExprValue[]\n) => Promise<TExprValue>;\nexport type TExprFuncSync = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExprValue[]\n) => TExprValue;\nexport type TExprFuncDef = {\n  assignment?: true;\n  lazy?: true;\n  macro?: true;\n} & (\n  | {\n      async: true;\n      f: TExprFuncAsync;\n    }\n  | {\n      async?: false;\n      f: TExprFuncSync;\n    }\n);\n\nexport type TBinopDef = {\n  alias: string;\n};\nexport type TUnopDef = {\n  alias: string;\n};\n\nexport type TExprResult = {\n  result: TExprValue;\n  ctx: TExprContext;\n};\n\nexport type TExprContext = {\n  rng: () => number;\n  funcs: DictOf<TExprFuncDef>;\n  binops: DictOf<TBinopDef>;\n  unops: DictOf<TUnopDef>;\n  get: (scope: TScope, key: string) => Promise<TExprValue>;\n  set: (scope: TScope, key: string, value: TExprValue) => Promise<void>;\n  call?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExprValue[],\n      ) => Promise<TExprValue>)\n    | undefined;\n};\n\nexport type TScope = { [key: string]: TExprValue };\n\nexport type TExpression =\n  | TCallExpression\n  | TIdentifierExpression\n  | TBinaryExpression\n  | TLiteralExpression\n  | TConditionalExpression\n  | TUnaryExpression\n  | TTemplateLiteralExpression\n  | TArrayLiteralExpression\n  | TObjectLiteralExpression\n  | TComputedPropertyExpression;\n\nexport type TTemplateLiteralExpression = {\n  type: 'TemplateLiteral';\n  parts: [['chunks', string] | ['expression', TExpression]];\n};\n\nexport type TComputedPropertyExpression = {\n  type: 'ComputedProperty';\n  expression: TExpression;\n};\n\nexport type TArrayLiteralExpression = {\n  type: 'ArrayLiteral';\n  elements: TExpression[];\n};\n\nexport type TObjectLiteralExpression = {\n  type: 'ObjectLiteral';\n  properties: {\n    name:\n      | TIdentifierExpression\n      | TLiteralExpression\n      | TComputedPropertyExpression;\n    value: TExpression | undefined;\n  }[];\n};\n\nexport type TCallExpression = {\n  type: 'CallExpression';\n  callee: TIdentifierExpression;\n  arguments: TExpression[];\n};\n\nexport type TIdentifierExpression = {\n  type: 'Identifier';\n  name: string;\n};\n\nexport type TBinaryExpression = {\n  type: 'BinaryExpression';\n  left: TExpression;\n  operator: string;\n  right: TExpression;\n};\n\nexport type TLiteralExpression = {\n  type: 'Literal';\n  value: string;\n  raw: string;\n};\n\nexport type TConditionalExpression = {\n  type: 'ConditionalExpression';\n  test: TExpression;\n  consequent: TExpression;\n  alternate: TExpression | undefined;\n};\n\nexport type TUnaryExpression = {\n  type: 'UnaryExpression';\n  argument: TExpression;\n  operator: string;\n};\n\nexport const CONSTS: DictOf<TExprValue> = {\n  E: Math.E,\n  LN10: Math.LN10,\n  LN2: Math.LN2,\n  LOG10E: Math.LOG10E,\n  LOG2E: Math.LOG2E,\n  PI: Math.PI,\n  SQRT1_2: Math.SQRT1_2,\n  SQRT2: Math.SQRT2,\n};\n\nconst BINOP_MAP = {\n  '**': { alias: 'pow' },\n  '*': { alias: 'mul' },\n  '/': { alias: 'div' },\n  '%': { alias: 'mod' },\n  '+': { alias: 'add' },\n  '-': { alias: 'sub' },\n  '>>>': { alias: 'bitwiseRightShiftUnsigned' },\n  '<<': { alias: 'bitwiseLeftShift' },\n  '>>': { alias: 'bitwiseRightShift' },\n  '<=': { alias: 'lte' },\n  '>=': { alias: 'gte' },\n  '<': { alias: 'lt' },\n  '>': { alias: 'gt' },\n  '===': { alias: 'eq' },\n  '!==': { alias: 'neq' },\n  '==': { alias: 'eq' },\n  '!=': { alias: 'neq' },\n  '&': { alias: 'bitwiseAnd' },\n  '^': { alias: 'bitwiseXor' },\n  '|': { alias: 'bitwiseOr' },\n  '&&': { alias: 'and' },\n  '||': { alias: 'or' },\n  ':=': { alias: 'setVar' },\n  '+=': { alias: 'setAdd' },\n  '-=': { alias: 'setSub' },\n  '/=': { alias: 'setDiv' },\n  '*=': { alias: 'setMul' },\n  '??': { alias: 'nullCoalesce' },\n};\n\nconst UNOP_MAP = {\n  '+': { alias: 'number' },\n  '-': { alias: 'negate' },\n  '~': { alias: 'bitwiseNot' },\n  '!': { alias: 'not' },\n};\n\nconst IgnoreWhitespace = (Rule) => Ignore(/^\\s+/, Rule);\nconst QuoteToken = Any(\n  /^('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')/,\n  /^(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")/,\n);\nconst NumericToken = Any(\n  /^((?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\\b/,\n  /^(0[xX][0-9a-fA-F]+)\\b/,\n);\nconst NullToken = /^(null)\\b/;\nconst BooleanToken = /^(true|false)\\b/;\nconst IdentifierToken = /^([a-zA-Z_$][a-zA-Z0-9_$.]*)/;\nconst InterpolationChunkToken = /^((?:\\$(?!{)|\\\\.|[^`$\\\\])+)/;\nconst BinaryOperatorPrecedence = [\n  '**',\n  Any('*', '/', '%'),\n  Any('+', '-'),\n  Any('>>>', '<<', '>>'),\n  Any('<=', '>=', '<', '>'),\n  Any('===', '!==', '==', '!='),\n  /^&(?!&)/,\n  '^',\n  /^\\|(?!\\|)/,\n  '&&',\n  '||',\n  '??',\n  Any(':=', '+=', '-=', '*=', '/='),\n];\n\nconst INVALID_IDENT_REGEX = /^__proto__|prototype|constructor$/;\n\nexport function createExprContext({\n  funcs,\n  binops,\n  unops,\n  seed = 'expreval',\n  get,\n  set,\n  call,\n}: Partial<TExprContext> & { seed?: string }): TExprContext {\n  const vars: { [key: string]: TExprValue } = {};\n  return {\n    rng: seedrandom.default(seed),\n    funcs: { ...STDLIB, ...funcs },\n    binops: { ...BINOP_MAP, ...binops },\n    unops: { ...UNOP_MAP, ...unops },\n    get: async (scope, name) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return 0;\n      }\n      if (get) {\n        return (await get(scope, name)) ?? null;\n      }\n      return vars[name] ?? null;\n    },\n    set: async (scope, name, value) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return;\n      }\n      if (set) {\n        return await set(scope, name, value);\n      }\n      vars[name] = value;\n      return;\n    },\n    call,\n  };\n}\n\nexport async function evaluateExpr(\n  code: string,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope = {},\n): Promise<TExprResult> {\n  return {\n    result: await executeAst(parseExpr(code), ctx, scope),\n    ctx,\n  };\n}\n\nexport default evaluateExpr;\n\nexport function parseExpr(code: string): TExpression {\n  const parser = Parser(DefaultGrammar);\n  return parser(code.replace(/\\/\\/.*\\n/g, ''));\n}\n\nexport async function executeAst(\n  ast: TExpression,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope,\n): Promise<TExprValue> {\n  switch (ast.type) {\n    case 'Literal':\n      return ast.value;\n    case 'Identifier':\n      const value = await ctx.get(scope, ast.name);\n      return value !== undefined ? value : ast.name;\n    case 'CallExpression':\n      const fdef = Object.keys(ctx.funcs).includes(ast.callee.name)\n        ? ctx.funcs[ast.callee.name]\n        : null;\n      const args: TExprValue[] = [];\n      if (fdef && fdef.assignment && ast.arguments.length > 1) {\n        const left = exprToIdentifier(ast.arguments[0]!) ?? '';\n        const right = ast.arguments.slice(1);\n        args.push(\n          left,\n          ...(await asyncMap(\n            right,\n            async (expr) => await executeAst(expr, ctx, scope),\n          )),\n        );\n      } else {\n        args.push(\n          ...(await asyncMap(\n            ast.arguments,\n            async (expr) => await executeAst(expr, ctx, scope),\n          )),\n        );\n      }\n      if (fdef) {\n        const result = fdef.async\n          ? await fdef.f(ctx, scope, ...args)\n          : fdef.f(ctx, scope, ...args);\n        return result;\n      } else if (ctx.call) {\n        return await ctx.call(ctx, scope, ast.callee.name, args);\n      }\n      throw new Error(`Function not found: '${ast.callee.name}'`);\n    case 'BinaryExpression':\n      const binop = Object.keys(ctx.binops).includes(ast.operator)\n        ? ctx.binops[ast.operator]\n        : null;\n      if (binop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: binop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.left, ast.right],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'ConditionalExpression':\n      const result = await executeAst(ast.test, ctx, scope);\n      if (toBoolean(result)) {\n        return await executeAst(ast.consequent, ctx, scope);\n      }\n      if (!ast.alternate) {\n        return null;\n      }\n      return await executeAst(ast.alternate, ctx, scope);\n    case 'UnaryExpression':\n      const unop = Object.keys(ctx.unops).includes(ast.operator)\n        ? ctx.unops[ast.operator]\n        : null;\n      if (unop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: unop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.argument],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'TemplateLiteral':\n      let accum = '';\n      for (let i = 0; i < ast.parts.length; i++) {\n        const [kind, value] = ast.parts[i]!;\n        if (kind === 'chunks') {\n          accum += value;\n        } else if (kind === 'expression') {\n          accum += (await executeAst(value, ctx, scope)) + '';\n        }\n      }\n      return accum;\n    case 'ComputedProperty':\n      return await executeAst(ast.expression, ctx, scope);\n    case 'ArrayLiteral':\n      return await asyncMap(\n        ast.elements,\n        async (element) => await executeAst(element, ctx, scope),\n      );\n    case 'ObjectLiteral':\n      const obj = {};\n      for (let i = 0; i < ast.properties.length; i++) {\n        const { name, value } = ast.properties[i]!;\n        let key: string = '';\n        if (name.type === 'ComputedProperty') {\n          key = toString(await executeAst(name.expression, ctx, scope));\n        } else if (name.type === 'Identifier') {\n          key = name.name; // Don't evaluate this if 'bare'\n        } else if (name.type === 'Literal') {\n          key = name.value;\n        }\n        obj[key] = await executeAst(value ? value : name, ctx, scope);\n      }\n      return obj;\n    default:\n      console.info(ast);\n      throw new Error(`Syntax error`);\n  }\n}\n\nexport function exprToIdentifier(v: TExpression): string | null {\n  if (v.type === 'Identifier') {\n    return v.name;\n  }\n  return null;\n}\n\nexport function toNumber(v: any, fallback: number = 0): number {\n  if (typeof v === 'number') {\n    return isNaN(v) ? fallback : v;\n  }\n  if (typeof v === 'string') {\n    if (v.includes('.')) {\n      return parseFloat(v);\n    }\n    return parseInt(v);\n  }\n  return fallback;\n}\n\nexport function toBoolean(v: TExprValue): boolean {\n  if (!v) {\n    return false;\n  }\n  if (typeof v === 'string' && v.match(/^\\s+$/)) {\n    return false;\n  }\n  if (v === 'false') {\n    return false;\n  }\n  if (v === '0') {\n    return false;\n  }\n  return true;\n}\n\nexport function toString(v: any, radix: number = 10): string {\n  if (typeof v === 'number') {\n    return v.toString(radix);\n  }\n  if (v === true || v === 'true') {\n    return 'true';\n  }\n  if (!v) {\n    return '';\n  }\n  return v + '';\n}\n\nexport function toObject(v: any): TExprObject {\n  if (!v) {\n    return {};\n  }\n  if (v && typeof v === 'object') {\n    return v;\n  }\n  return {};\n}\n\nexport function toArray(v: any): TExprArray {\n  if (!v) {\n    return [];\n  }\n  if (Array.isArray(v)) {\n    return v.map((e) => toScalar(e));\n  }\n  if (v && typeof v === 'object') {\n    return Object.keys(v).map((k) => toScalar(v[k]));\n  }\n  if (\n    typeof v === 'number' ||\n    typeof v === 'string' ||\n    typeof v === 'boolean'\n  ) {\n    return [v];\n  }\n  return [];\n}\n\nexport function toScalar(n: any, radix: number = 10): TExprScalar {\n  if (typeof n === 'number') {\n    return n;\n  }\n  if (typeof n === 'string') {\n    return n;\n  }\n  if (typeof n === 'boolean') {\n    return n;\n  }\n  if (!n) {\n    return null;\n  }\n  if (typeof n === 'object') {\n    return '';\n  }\n  return n + '';\n}\n\nexport async function asyncMap<V, T>(\n  array: V[],\n  callback: (el: V, idx: number, arr: V[]) => Promise<T>,\n) {\n  const out: T[] = [];\n  for (let index = 0; index < array.length; index++) {\n    const m = await callback(array[index]!, index, array);\n    out.push(m);\n  }\n  return out;\n}\n\nasync function setVar<T extends TExprValue>(\n  ctx: TExprContext,\n  scope: TScope,\n  name: any,\n  value: T,\n): Promise<T> {\n  const key = toString(name);\n  await ctx.set(scope, key, value);\n  return value;\n}\n\nasync function getVar(\n  ctx: TExprContext,\n  scope: TScope,\n  name: any,\n): Promise<TExprValue> {\n  return (await ctx.get(scope, name + '')) ?? null;\n}\n\nexport const STDLIB: DictOf<TExprFuncDef> = {\n  do: {\n    f(ctx, scope, ...args) {\n      return args[args.length - 1] ?? null;\n    },\n  },\n  present: {\n    f(ctx, scope, v) {\n      return !!v;\n    },\n  },\n  empty: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      return !v;\n    },\n  },\n  blank: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      if (typeof v === 'string' && (!v || v.match(/^\\s+$/))) {\n        return true;\n      }\n      return !v;\n    },\n  },\n  setVar: {\n    assignment: true,\n    async: true,\n    async f(ctx, scope, left, right) {\n      return await setVar(ctx, scope, left, right);\n    },\n  },\n  setAdd: {\n    assignment: true,\n    async: true,\n    async f(ctx, scope, left, right) {\n      const lval = await getVar(ctx, scope, left);\n      if (typeof lval === 'string') {\n        return await setVar(ctx, scope, left, lval + right + '');\n      }\n      return await setVar(ctx, scope, left, toNumber(lval) + toNumber(right));\n    },\n  },\n  setSub: {\n    assignment: true,\n    async: true,\n    async f(ctx, scope, left, right) {\n      return await setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(await getVar(ctx, scope, left)) - toNumber(right),\n      );\n    },\n  },\n  setMul: {\n    assignment: true,\n    async: true,\n    async f(ctx, scope, left, right) {\n      return await setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(await getVar(ctx, scope, left)) * toNumber(right),\n      );\n    },\n  },\n  setDiv: {\n    assignment: true,\n    async: true,\n    async f(ctx, scope, left, right) {\n      return await setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(await getVar(ctx, scope, left)) / toNumber(right),\n      );\n    },\n  },\n  nullCoalesce: {\n    f(ctx, scope, a, b) {\n      return a ?? b;\n    },\n  },\n  unixTimestampNow: {\n    f() {\n      return Date.now();\n    },\n  },\n  unixTimestampForDate: {\n    f(ctx, scope, year, mon, day, hour, min, second) {\n      return new Date(\n        toNumber(year),\n        toNumber(mon),\n        toNumber(day),\n        toNumber(hour),\n        toNumber(min),\n        toNumber(second),\n      ).getTime();\n    },\n  },\n  all: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (!xs[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  any: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (xs[i]) {\n          return true;\n        }\n      }\n      return false;\n    },\n  },\n  some: {\n    f(ctx, scope, xs) {\n      return !!STDLIB['any']!.f(ctx, scope, xs);\n    },\n  },\n  none: {\n    f(ctx, scope, xs) {\n      return !STDLIB['any']!.f(ctx, scope, xs);\n    },\n  },\n  or: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) || toBoolean(b);\n    },\n  },\n  and: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) && toBoolean(b);\n    },\n  },\n  not: {\n    f(ctx, scope, a) {\n      return !toBoolean(a);\n    },\n  },\n  gt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  gte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  eq: {\n    f(ctx, scope, a, b) {\n      return toString(a) === toString(b);\n    },\n  },\n  neq: {\n    f(ctx, scope, a, b) {\n      return toString(a) !== toString(b);\n    },\n  },\n  rand: {\n    f(ctx) {\n      return ctx.rng();\n    },\n  },\n  randInRange: {\n    f(ctx, scope, min, max) {\n      return ctx.rng() * (Number(max) - Number(min)) + Number(min);\n    },\n  },\n  randInt: {\n    f(ctx) {\n      return Math.floor(ctx.rng() * 10);\n    },\n  },\n  randIntInRange: {\n    f(ctx, scope, min, max) {\n      min = Math.ceil(Number(min));\n      max = Math.floor(Number(max));\n      return Math.floor(ctx.rng() * (max - min + 1)) + min;\n    },\n  },\n  number: {\n    f(ctx, scope, a) {\n      return Number(a);\n    },\n  },\n  bitwiseOr: {\n    f(ctx, scope, a, b) {\n      return Number(a) | Number(b);\n    },\n  },\n  bitwiseXor: {\n    f(ctx, scope, a, b) {\n      return Number(a) ^ Number(b);\n    },\n  },\n  bitwiseAnd: {\n    f(ctx, scope, a, b) {\n      return Number(a) & Number(b);\n    },\n  },\n  bitwiseNot: {\n    f(ctx, scope, a) {\n      return ~Number(a);\n    },\n  },\n  bitwiseLeftShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) << Number(b);\n    },\n  },\n  bitwiseRightShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) >> Number(b);\n    },\n  },\n  bitwiseRightshiftUnsigned: {\n    f(ctx, scope, a, b) {\n      return Number(a) >>> Number(b);\n    },\n  },\n  negate: {\n    f(ctx, scope, a) {\n      return -toNumber(a);\n    },\n  },\n  add: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a + b + '';\n      }\n      return toNumber(a) + toNumber(b);\n    },\n  },\n  sub: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) - toNumber(b);\n    },\n  },\n  div: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) / toNumber(b);\n    },\n  },\n  mul: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) * toNumber(b);\n    },\n  },\n  mod: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) % toNumber(b);\n    },\n  },\n  pow: {\n    f(ctx, scope, a, b) {\n      return Math.pow(toNumber(a), toNumber(b));\n    },\n  },\n  abs: {\n    f(ctx, scope, a) {\n      return Math.abs(toNumber(a));\n    },\n  },\n  acos: {\n    f(ctx, scope, a) {\n      return Math.acos(toNumber(a));\n    },\n  },\n  acosh: {\n    f(ctx, scope, a) {\n      return Math.acosh(toNumber(a));\n    },\n  },\n  asin: {\n    f(ctx, scope, a) {\n      return Math.asin(toNumber(a));\n    },\n  },\n  asinh: {\n    f(ctx, scope, a) {\n      return Math.asinh(toNumber(a));\n    },\n  },\n  atan: {\n    f(ctx, scope, a) {\n      return Math.atan(toNumber(a));\n    },\n  },\n  atan2: {\n    f(ctx, scope, a, b) {\n      return Math.atan2(toNumber(a), toNumber(b));\n    },\n  },\n  atanh: {\n    f(ctx, scope, a) {\n      return Math.atanh(toNumber(a));\n    },\n  },\n  cbrt: {\n    f(ctx, scope, a) {\n      return Math.cbrt(toNumber(a));\n    },\n  },\n  ceil: {\n    f(ctx, scope, a) {\n      return Math.ceil(toNumber(a));\n    },\n  },\n  cos: {\n    f(ctx, scope, a) {\n      return Math.cos(toNumber(a));\n    },\n  },\n  cosh: {\n    f(ctx, scope, a) {\n      return Math.cosh(toNumber(a));\n    },\n  },\n  exp: {\n    f(ctx, scope, a) {\n      return Math.exp(toNumber(a));\n    },\n  },\n  floor: {\n    f(ctx, scope, a) {\n      return Math.floor(toNumber(a));\n    },\n  },\n  hypot: {\n    f(ctx, scope, a) {\n      return Math.hypot(toNumber(a));\n    },\n  },\n  log: {\n    f(ctx, scope, a) {\n      return Math.log(toNumber(a));\n    },\n  },\n  log10: {\n    f(ctx, scope, a) {\n      return Math.log10(toNumber(a));\n    },\n  },\n  log2: {\n    f(ctx, scope, a) {\n      return Math.log2(toNumber(a));\n    },\n  },\n  max: {\n    f(ctx, scope, a) {\n      return Math.max(toNumber(a));\n    },\n  },\n  min: {\n    f(ctx, scope, a) {\n      return Math.min(toNumber(a));\n    },\n  },\n  round: {\n    f(ctx, scope, a) {\n      return Math.round(toNumber(a));\n    },\n  },\n  sign: {\n    f(ctx, scope, a) {\n      return Math.sign(toNumber(a));\n    },\n  },\n  sin: {\n    f(ctx, scope, a) {\n      return Math.sin(toNumber(a));\n    },\n  },\n  sinh: {\n    f(ctx, scope, a) {\n      return Math.sinh(toNumber(a));\n    },\n  },\n  sqrt: {\n    f(ctx, scope, a) {\n      return Math.sqrt(toNumber(a));\n    },\n  },\n  tan: {\n    f(ctx, scope, a) {\n      return Math.tan(toNumber(a));\n    },\n  },\n  tanh: {\n    f(ctx, scope, a) {\n      return Math.tanh(toNumber(a));\n    },\n  },\n  trunc: {\n    f(ctx, scope, a) {\n      return Math.trunc(toNumber(a));\n    },\n  },\n  fromCharCode: {\n    f(ctx, scope, a) {\n      return String.fromCharCode(Number(a));\n    },\n  },\n  fromCodePoint: {\n    f(ctx, scope, a) {\n      return String.fromCodePoint(Number(a));\n    },\n  },\n  parseInt: {\n    f(ctx, scope, a, b) {\n      return parseInt(toString(a), Number(b));\n    },\n  },\n  parseFloat: {\n    f(ctx, scope, a) {\n      return parseFloat(toString(a));\n    },\n  },\n  charAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charAt(Number(b));\n    },\n  },\n  charCodeAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charCodeAt(Number(b));\n    },\n  },\n  codePointAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).codePointAt(Number(b)) ?? 0;\n    },\n  },\n  localeCompare: {\n    f(ctx, scope, a, b) {\n      return toString(a).localeCompare(toString(b));\n    },\n  },\n  match: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  matchAll: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  padEnd: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padEnd(Number(b), toString(c ?? ''));\n    },\n  },\n  padStart: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padStart(Number(b), toString(c ?? ''));\n    },\n  },\n  repeat: {\n    f(ctx, scope, a, b) {\n      return toString(a).repeat(Number(b));\n    },\n  },\n  replace: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replace(toString(b), toString(c));\n    },\n  },\n  replaceAll: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replaceAll(toString(b), toString(c));\n    },\n  },\n  startsWith: {\n    f(ctx, scope, a, b) {\n      return toString(a).startsWith(toString(b));\n    },\n  },\n  substring: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).substring(Number(b), Number(c));\n    },\n  },\n  toLowerCase: {\n    f(ctx, scope, a) {\n      return toString(a).toLowerCase();\n    },\n  },\n  toUpperCase: {\n    f(ctx, scope, a) {\n      return toString(a).toUpperCase();\n    },\n  },\n  trim: {\n    f(ctx, scope, a) {\n      return toString(a).trim();\n    },\n  },\n  trimEnd: {\n    f(ctx, scope, a) {\n      return toString(a).trimEnd();\n    },\n  },\n  trimStart: {\n    f(ctx, scope, a) {\n      return toString(a).trimStart();\n    },\n  },\n  clamp: {\n    f(ctx, a, min, max) {\n      return clamp(toNumber(a), toNumber(min), toNumber(max));\n    },\n  },\n  avg: {\n    f(ctx, nn) {\n      return avg(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  sum: {\n    f(ctx, nn) {\n      return sum(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  join: {\n    f(ctx, scope, ss, spacer) {\n      return toArray(ss).join(toString(spacer));\n    },\n  },\n  split: {\n    f(ctx, scope, s, spacer) {\n      return toString(s).split(toString(spacer));\n    },\n  },\n  first: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[0] ?? null;\n      }\n      return toArray(arr)[0] ?? null;\n    },\n  },\n  last: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[arr.length] ?? null;\n      }\n      arr = toArray(arr);\n      return arr[arr.length] ?? null;\n    },\n  },\n  length: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr.length;\n      }\n      return toArray(arr).length;\n    },\n  },\n  concat: {\n    f(ctx, scope, aa, bb) {\n      if (typeof aa === 'string') {\n        return aa + toString(bb);\n      }\n      return [...toArray(aa), ...toArray(bb)];\n    },\n  },\n  endsWith: {\n    f(ctx, scope, a, b, c = '') {\n      if (Array.isArray(a)) {\n        a = a.join(toString(c));\n      }\n      return toString(a).endsWith(toString(b));\n    },\n  },\n  includes: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.includes(toString(b));\n      }\n      return toArray(a).includes(b);\n    },\n  },\n  lastIndexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.lastIndexOf(toString(b));\n      }\n      return toArray(a).lastIndexOf(b);\n    },\n  },\n  indexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.indexOf(toString(b));\n      }\n      return toArray(a).indexOf(b);\n    },\n  },\n  nth: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a[toNumber(b)] ?? null;\n      }\n      return toArray(a)[toNumber(b)] ?? null;\n    },\n  },\n  reverse: {\n    f(ctx, scope, a) {\n      if (typeof a === 'string') {\n        return a.split('').reverse().join('');\n      }\n      return toArray(a).reverse();\n    },\n  },\n  take: {\n    f(ctx, scope, a, n) {\n      if (typeof a === 'string') {\n        return a.slice(0, toNumber(n));\n      }\n      return toArray(a).slice(0, toNumber(n));\n    },\n  },\n  head: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(0, -1);\n    },\n  },\n  tail: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(1);\n    },\n  },\n  slice: {\n    f(ctx, scope, arr, a, b) {\n      if (typeof arr === 'string') {\n        return arr.slice(toNumber(a), toNumber(b));\n      }\n      return toArray(arr).slice(toNumber(a), toNumber(b));\n    },\n  },\n  randEl: {\n    f(ctx, scope, arr) {\n      arr = toArray(arr);\n      const i = STDLIB['randIntInRange']!.f(\n        ctx,\n        scope,\n        0,\n        arr.length - 1,\n      ) as number;\n      return arr[i] ?? null;\n    },\n  },\n  push: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.push(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  pop: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.pop() ?? null;\n      }\n      return null;\n    },\n  },\n  shift: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.shift() ?? null;\n      }\n      return null;\n    },\n  },\n  unshift: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.unshift(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  keys: {\n    f(ctx, scope, obj) {\n      return Object.keys(toObject(obj));\n    },\n  },\n  values: {\n    f(ctx, scope, obj) {\n      return Object.values(toObject(obj));\n    },\n  },\n  get: {\n    f(ctx, scope, obj, key) {\n      return toObject(obj)[toString(key)] ?? null;\n    },\n  },\n  set: {\n    f(ctx, scope, obj, key, value) {\n      if (obj && typeof obj === 'object') {\n        obj[toString(key)] = value;\n      }\n      return obj;\n    },\n  },\n};\n\n// The code below is derived from code at https://github.com/dmaevsky/rd-parse. License:\n// The MIT License (MIT)\n// Copyright 2013 - present Dmitry Maevsky\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst associativity = (binop) => (binop === '**' ? r2l : l2r);\n\nfunction locAt(text, newPos, { pos, line, column }) {\n  while (pos < newPos) {\n    const ch = text[pos++];\n    if (ch === '\\n') {\n      column = 1;\n      line++;\n    } else {\n      column++;\n    }\n  }\n  return { pos, line, column };\n}\n\nconst markSeen = ($) => {\n  if ($.pos > $.lastSeen.pos) {\n    Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen));\n  }\n};\n\nfunction RegexToken(pattern) {\n  return ($) => {\n    markSeen($);\n    const match = pattern.exec($.text.substring($.pos));\n    if (!match) {\n      return $;\n    }\n    const $next = {\n      ...$,\n      pos: $.pos + match[0].length,\n    };\n    for (let i = 1; i < match.length; i++) {\n      $.stack[$next.sp++] = match[i];\n    }\n    return $next;\n  };\n}\n\nfunction StringToken(pattern) {\n  return ($) => {\n    markSeen($);\n    if ($.text.startsWith(pattern, $.pos)) {\n      return {\n        ...$,\n        pos: $.pos + pattern.length,\n      };\n    }\n    return $;\n  };\n}\n\nfunction Use(rule) {\n  if (typeof rule === 'function') {\n    return rule;\n  }\n  if (rule instanceof RegExp) {\n    return RegexToken(rule);\n  }\n  if (typeof rule === 'string') {\n    return StringToken(rule);\n  }\n  throw new Error('Invalid rule');\n}\n\nfunction Ignore(toIgnore, rule) {\n  rule = Use(rule);\n  if (toIgnore) {\n    toIgnore = Ignore(null, Plus(toIgnore));\n  }\n\n  return ($) => {\n    const $cur = toIgnore ? toIgnore($) : $;\n    $.ignore.push(toIgnore);\n    const $next = rule($cur);\n    $.ignore.pop();\n    return $next === $cur ? $ : toIgnore ? toIgnore($next) : $next;\n  };\n}\n\nconst skipIgnored = ($) => {\n  if (!$.ignore.length) {\n    return $;\n  }\n  const toIgnore = $.ignore[$.ignore.length - 1];\n  return toIgnore ? toIgnore($) : $;\n};\n\nfunction All(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    let $cur = $;\n    for (let i = 0; i < rules.length; i++) {\n      const $before = i > 0 ? skipIgnored($cur) : $cur;\n      const $after = rules[i]($before);\n      if ($after === $before) {\n        return $;\n      }\n      if ($after.pos > $before.pos || $after.sp > $before.sp) {\n        $cur = $after;\n      }\n    }\n    return $cur;\n  };\n}\n\nfunction Any(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    for (let i = 0; i < rules.length; i++) {\n      const $next = rules[i]($);\n      if ($next !== $) {\n        return $next;\n      }\n    }\n    return $;\n  };\n}\n\nfunction Plus(rule) {\n  rule = Use(rule);\n  return ($) => {\n    while (true) {\n      const $cur = skipIgnored($);\n      const $next = rule($cur);\n      if ($next === $cur) {\n        return $;\n      }\n      $ = $next;\n    }\n  };\n}\n\nfunction Optional(rule) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next !== $) {\n      return $next;\n    }\n    return { ...$ };\n  };\n}\n\nfunction Node(rule, reducer) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next === $) {\n      return $;\n    }\n    const node = reducer($.stack.slice($.sp, $next.sp), $, $next);\n    $next.sp = $.sp;\n    if (node !== null) {\n      $.stack[$next.sp++] = node;\n    }\n    return $next;\n  };\n}\n\nconst Star = (rule) => Optional(Plus(rule));\n\nconst Y = (proc) => ((x) => proc((y) => x(x)(y)))((x) => proc((y) => x(x)(y)));\n\nconst START = (text, pos = 0) => ({\n  text,\n  ignore: [],\n  stack: [],\n  sp: 0,\n  lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),\n  pos,\n});\n\nfunction Parser(\n  Grammar,\n  pos = 0,\n  partial = false,\n): (text: string) => TExpression {\n  return (text) => {\n    if (typeof text !== 'string') {\n      throw new Error('Parsing function expects a string input');\n    }\n    const $ = START(text, pos);\n    const $next = Grammar($);\n    if ($ === $next || (!partial && $next.pos < text.length)) {\n      throw new Error(\n        `Unexpected token at ${$.lastSeen.line}:${\n          $.lastSeen.column\n        }. Remainder: ${text.slice($.lastSeen.pos)}`,\n      );\n    }\n    return $.stack[0] as unknown as TExpression;\n  };\n}\n\nfunction l2r(parts, $) {\n  let left = parts[0];\n  for (let i = 1; i < parts.length; i += 2) {\n    const [operator, right] = [parts[i].operator, parts[i + 1]];\n    left = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      $,\n      { pos: right.pos + right.text.length },\n    );\n  }\n  return left;\n}\n\nfunction r2l(parts, _, $next) {\n  let right = parts[parts.length - 1];\n  for (let i = parts.length - 2; i >= 0; i -= 2) {\n    const [left, operator] = [parts[i - 1], parts[i].operator];\n    right = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      { pos: left.pos },\n      $next,\n    );\n  }\n  return right;\n}\n\nconst Operator = (Rule) =>\n  Node(Rule, (_, $, $next) => ({\n    $,\n    operator: $.text.substring($.pos, $next.pos),\n  }));\n\nconst srcMap = (obj, $, $next) =>\n  Object.defineProperties(obj, {\n    pos: { writable: true, configurable: true, value: $.pos },\n    text: {\n      writable: true,\n      configurable: true,\n      value: ($.text || $next.text).slice($.pos, $next.pos),\n    },\n  });\n\nconst DefaultGrammar = IgnoreWhitespace(\n  Y((Expression) => {\n    const Identifier = Node(IdentifierToken, ([name]) => ({\n      type: 'Identifier',\n      name,\n    }));\n    const StringLiteral = Node(QuoteToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw.slice(1, -1),\n      raw,\n    }));\n    const NumericLiteral = Node(NumericToken, ([raw]) => ({\n      type: 'Literal',\n      value: +raw,\n      raw,\n    }));\n    const NullLiteral = Node(NullToken, ([raw]) => ({\n      type: 'Literal',\n      value: null,\n      raw,\n    }));\n    const BooleanLiteral = Node(BooleanToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw === 'true',\n      raw,\n    }));\n    const InterpolationChunk = Node(InterpolationChunkToken, ([raw]) => [\n      'chunks',\n      raw,\n    ]);\n    const TemplateInlineExpression = Node(\n      All('${', IgnoreWhitespace(Expression), '}'),\n      ([expression]) => ['expression', expression],\n    );\n    const TemplateLiteral = Node(\n      Ignore(\n        null,\n        All('`', Star(Any(InterpolationChunk, TemplateInlineExpression)), '`'),\n      ),\n      (parts) => ({ type: 'TemplateLiteral', parts }),\n    );\n    const Literal = Any(\n      StringLiteral,\n      NumericLiteral,\n      NullLiteral,\n      BooleanLiteral,\n      TemplateLiteral,\n    );\n    const ArgumentsList = All(Expression, Star(All(',', Expression)));\n    const Arguments = Node(\n      All('(', Optional(All(ArgumentsList, Optional(','))), ')'),\n      (args) => ({\n        args,\n      }),\n    );\n    const ArgumentsExpression = Node(Any(Arguments), ([part], _, $next) => ({\n      part,\n      $next,\n    }));\n    const CompoundExpression = Node(\n      All(Expression, Star(All(',', Expression))),\n      (leafs) =>\n        leafs.length > 1 ? { type: 'CompoundExpression', leafs } : leafs[0],\n    );\n    const ComputedPropertyName = Node(\n      All('[', CompoundExpression, ']'),\n      ([expression]) => ({ type: 'ComputedProperty', expression }),\n    );\n    const PropertyName = Any(\n      Identifier,\n      StringLiteral,\n      NumericLiteral,\n      ComputedPropertyName,\n    );\n    const ShortNotation = Node(Identifier, ([expr], $, $next) =>\n      srcMap({ ...expr, shortNotation: true }, $, $next),\n    );\n    const PropertyDefinition = Node(\n      Any(All(PropertyName, ':', Expression), ShortNotation),\n      ([name, value]) => ({\n        name,\n        value,\n      }),\n    );\n    const PropertyDefinitions = All(\n      PropertyDefinition,\n      Star(All(',', PropertyDefinition)),\n    );\n    const PropertyDefinitionList = Optional(\n      All(PropertyDefinitions, Optional(',')),\n    );\n    const ObjectLiteral = Node(\n      All('{', PropertyDefinitionList, '}'),\n      (properties) => ({ type: 'ObjectLiteral', properties }),\n    );\n    const Element = Any(Expression);\n    const ElementList = All(Element, Star(All(',', Element)));\n    const ArrayLiteral = Node(All('[', ElementList, ']'), (elements) => ({\n      type: 'ArrayLiteral',\n      elements,\n    }));\n    const PrimaryExpression = Node(\n      Any(\n        Literal,\n        Identifier,\n        ArrayLiteral,\n        ObjectLiteral,\n        All('(', CompoundExpression, ')'),\n      ),\n      ([expr], $, $next) => srcMap(expr, $, $next),\n    );\n    const CallExpression = Node(\n      All(PrimaryExpression, Star(ArgumentsExpression)),\n      (parts, $, $last) => {\n        return parts.reduce((acc, { part, $next }) => {\n          return srcMap(\n            { type: 'CallExpression', callee: acc, arguments: part.args },\n            $,\n            $next,\n          );\n        });\n      },\n    );\n    const UnaryOperator = Operator(Any('+', '-', '~', '!'));\n    const UnaryExpression = Node(\n      All(Star(UnaryOperator), CallExpression),\n      (parts, _, $next) =>\n        parts.reduceRight((argument, { $, operator }) =>\n          srcMap({ type: 'UnaryExpression', argument, operator }, $, $next),\n        ),\n    );\n    const LogicalExpressionOrExpression = BinaryOperatorPrecedence.reduce(\n      (Expr, BinaryOp) =>\n        Node(\n          All(Expr, Star(All(Operator(BinaryOp), Expr))),\n          associativity(BinaryOp),\n        ),\n      UnaryExpression,\n    );\n    const TernaryExpression = Node(\n      All(\n        LogicalExpressionOrExpression,\n        Optional(All('?', Expression, ':', Expression)),\n      ),\n      ([test, consequent, alternate]) => {\n        return consequent\n          ? { type: 'ConditionalExpression', test, consequent, alternate }\n          : test;\n      },\n    );\n    return Node(Any(TernaryExpression), ([expr], $, $next) =>\n      srcMap(expr, $, $next),\n    );\n  }),\n);\n\nexport function clamp(n: number, min: number = 0, max: number = 1): number {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n}\nexport function avg(nn: number[]): number {\n  if (nn.length < 1) return 0;\n  return sum(nn) / nn.length;\n}\nexport function sum(nn: number[]): number {\n  let n = 0;\n  for (let i = 0; i < nn.length; i++) n += nn[i]!;\n  return n;\n}\n"],"names":["CONSTS","E","Math","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2","BINOP_MAP","alias","UNOP_MAP","IgnoreWhitespace","Rule","Ignore","QuoteToken","Any","NumericToken","NullToken","BooleanToken","IdentifierToken","InterpolationChunkToken","BinaryOperatorPrecedence","INVALID_IDENT_REGEX","createExprContext","_a","_this","this","funcs","binops","unops","_b","seed","get","set","call","vars","rng","seedrandom","default","__assign","STDLIB","scope","name","__awaiter","match","_c","sent","value","evaluateExpr","code","ctx","executeAst","parseExpr","result","Grammar","pos","partial","text","Error","$","ignore","stack","sp","lastSeen","locAt","line","column","START","$next","length","concat","slice","Parser","DefaultGrammar","parser","replace","ast","type","undefined","_s","fdef","Object","keys","includes","callee","args","assignment","arguments","left","exprToIdentifier","right","_d","push","apply","asyncMap","expr","__generator","_e","__spreadArray","_f","_h","_g","_j","async","f","_k","binop","operator","test","toBoolean","consequent","alternate","unop","argument","accum","i","parts","_l","kind","value_1","_m","expression","elements","element","obj","properties","_o","value_2","key","_p","toString","_q","_r","console","info","v","toNumber","fallback","isNaN","parseFloat","parseInt","radix","toObject","toArray","Array","isArray","map","e","toScalar","k","n","array","callback","out","index","m","setVar","getVar","do","_i","present","empty","blank","setAdd","lval","setSub","setMul","setDiv","nullCoalesce","a","b","unixTimestampNow","Date","now","unixTimestampForDate","year","mon","day","hour","min","second","getTime","all","xs","any","some","none","or","and","not","gt","gte","lt","lte","eq","neq","rand","randInRange","max","Number","randInt","floor","randIntInRange","ceil","number","bitwiseOr","bitwiseXor","bitwiseAnd","bitwiseNot","bitwiseLeftShift","bitwiseRightShift","bitwiseRightshiftUnsigned","negate","add","sub","div","mul","mod","pow","abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","cos","cosh","exp","hypot","log","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","fromCharCode","String","fromCodePoint","charAt","charCodeAt","codePointAt","localeCompare","matchAll","padEnd","c","padStart","repeat","replaceAll","startsWith","substring","toLowerCase","toUpperCase","trim","trimEnd","trimStart","clamp","avg","nn","sum","join","ss","spacer","split","s","first","arr","last","aa","bb","endsWith","lastIndexOf","indexOf","nth","reverse","take","head","tail","randEl","pop","shift","unshift","values","newPos","markSeen","assign","Use","rule","RegExp","pattern","exec","StringToken","toIgnore","Plus","$cur","skipIgnored","All","rules","$before","$after","Optional","Node","reducer","node","Star","l2r","srcMap","r2l","_","proc","x","Operator","defineProperties","writable","configurable","y","Expression","Identifier","StringLiteral","raw","NumericLiteral","NullLiteral","BooleanLiteral","InterpolationChunk","TemplateInlineExpression","TemplateLiteral","Literal","ArgumentsList","Arguments","ArgumentsExpression","part","CompoundExpression","leafs","PropertyName","ShortNotation","shortNotation","PropertyDefinition","PropertyDefinitions","PropertyDefinitionList","ObjectLiteral","Element","ElementList","ArrayLiteral","PrimaryExpression","CallExpression","$last","reduce","acc","UnaryOperator","UnaryExpression","reduceRight","LogicalExpressionOrExpression","Expr","BinaryOp","TernaryExpression"],"mappings":";;;;;wyEA2Ia,IAAAA,EAA6B,CACxCC,EAAGC,KAAKD,EACRE,KAAMD,KAAKC,KACXC,IAAKF,KAAKE,IACVC,OAAQH,KAAKG,OACbC,MAAOJ,KAAKI,MACZC,GAAIL,KAAKK,GACTC,QAASN,KAAKM,QACdC,MAAOP,KAAKO,OAGRC,EAAY,CAChB,KAAM,CAAEC,MAAO,OACf,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,MAAO,CAAEA,MAAO,6BAChB,KAAM,CAAEA,MAAO,oBACf,KAAM,CAAEA,MAAO,qBACf,KAAM,CAAEA,MAAO,OACf,KAAM,CAAEA,MAAO,OACf,IAAK,CAAEA,MAAO,MACd,IAAK,CAAEA,MAAO,MACd,MAAO,CAAEA,MAAO,MAChB,MAAO,CAAEA,MAAO,OAChB,KAAM,CAAEA,MAAO,MACf,KAAM,CAAEA,MAAO,OACf,IAAK,CAAEA,MAAO,cACd,IAAK,CAAEA,MAAO,cACd,IAAK,CAAEA,MAAO,aACd,KAAM,CAAEA,MAAO,OACf,KAAM,CAAEA,MAAO,MACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,iBAGXC,EAAW,CACf,IAAK,CAAED,MAAO,UACd,IAAK,CAAEA,MAAO,UACd,IAAK,CAAEA,MAAO,cACd,IAAK,CAAEA,MAAO,QAGVE,EAAmB,SAACC,GAAS,OAAAC,EAAO,OAAQD,IAC5CE,EAAaC,EACjB,8BACA,+BAEIC,EAAeD,EACnB,wDACA,0BAEIE,EAAY,YACZC,EAAe,kBACfC,EAAkB,+BAClBC,EAA0B,8BAC1BC,EAA2B,CAC/B,KACAN,EAAI,IAAK,IAAK,KACdA,EAAI,IAAK,KACTA,EAAI,MAAO,KAAM,MACjBA,EAAI,KAAM,KAAM,IAAK,KACrBA,EAAI,MAAO,MAAO,KAAM,MACxB,UACA,IACA,YACA,KACA,KACA,KACAA,EAAI,KAAM,KAAM,KAAM,KAAM,OAGxBO,EAAsB,oCAEtB,SAAUC,EAAkBC,GAAlC,IAoCCC,EAAAC,KAnCCC,EAAKH,EAAAG,MACLC,EAAMJ,EAAAI,OACNC,EAAKL,EAAAK,MACLC,EAAAN,EAAAO,KAAAA,aAAO,WAAUD,EACjBE,EAAGR,EAAAQ,IACHC,EAAGT,EAAAS,IACHC,EAAIV,EAAAU,KAEEC,EAAsC,GAC5C,MAAO,CACLC,IAAKC,EAAWC,QAAQP,GACxBJ,MAAYY,EAAAA,EAAA,GAAAC,GAAWb,GACvBC,OAAaW,EAAAA,EAAA,GAAA/B,GAAcoB,GAC3BC,MAAYU,EAAAA,EAAA,GAAA7B,GAAamB,GACzBG,IAAK,SAAOS,EAAOC,GAAI,OAAAC,EAAAlB,OAAA,OAAA,GAAA,qEACrB,OAAIiB,EAAKE,MAAMtB,GACb,CAAA,EAAO,GAELU,EACM,CAAA,EAAMA,EAAIS,EAAOC,IADpB,CAAA,EAAA,GACL,KAAA,EAAA,MAAA,CAAA,EAA+B,UAAvBG,EAAAC,cAAuB,IAAAtB,EAAAA,EAAI,MAErC,KAAA,EAAA,MAAA,CAAA,EAAiB,UAAVW,EAAKO,UAAK,IAAAZ,EAAAA,EAAI,cAEvBG,IAAK,SAAOQ,EAAOC,EAAMK,GAAK,OAAAJ,EAAAlB,OAAA,OAAA,GAAA,6DAC5B,OAAIiB,EAAKE,MAAMtB,GACN,CAAA,GAELW,EACW,CAAA,EAAAA,EAAIQ,EAAOC,EAAMK,IADzB,CAAA,EAAA,GACL,KAAA,EAAA,MAAA,CAAA,EAAOvB,iBAGT,OADAW,EAAKO,GAAQK,EACN,CAAA,WAETb,KAAIA,YAIcc,EACpBC,EACAC,EACAT,eADA,IAAAS,IAAAA,EAAoB3B,EAAkB,UACtC,IAAAkB,IAAAA,EAAkB,6FAGR,YAAM,CAAA,EAAAU,EAAWC,EAAUH,GAAOC,EAAKT,WADjD,MACE,CAAA,GAAAjB,EAAA6B,OAAQvB,EAA6CgB,OACrDtB,EAAA0B,IAAGA,EACH1B,WAKE,SAAU4B,EAAUH,GAExB,OAmqCF,SACEK,EACAC,EACAC,QADA,IAAAD,IAAAA,EAAO,QACP,IAAAC,IAAAA,GAAe,GAEf,OAAO,SAACC,GACN,GAAoB,iBAATA,EACT,MAAM,IAAIC,MAAM,2CAElB,IAAMC,EAlBI,SAACF,EAAMF,QAAA,IAAAA,IAAAA,EAAO,GAAK,MAAC,CAChCE,KAAIA,EACJG,OAAQ,GACRC,MAAO,GACPC,GAAI,EACJC,SAAUC,EAAMP,EAAMF,EAAK,CAAEA,IAAK,EAAGU,KAAM,EAAGC,OAAQ,IACtDX,IAAGA,GAYSY,CAAMV,EAAMF,GAChBa,EAAQd,EAAQK,GACtB,GAAIA,IAAMS,IAAWZ,GAAWY,EAAMb,IAAME,EAAKY,OAC/C,MAAM,IAAIX,MACR,uBAAAY,OAAuBX,EAAEI,SAASE,KAAI,KAAAK,OACpCX,EAAEI,SAASG,OAAM,iBAAAI,OACHb,EAAKc,MAAMZ,EAAEI,SAASR,OAG1C,OAAOI,EAAEE,MAAM,IAtrCFW,CAAOC,EACfC,CAAOzB,EAAK0B,QAAQ,YAAa,cAGpBxB,EACpByB,EACA1B,EACAT,qBADA,IAAAS,IAAAA,EAAoB3B,EAAkB,oKAG9BqD,EAAIC,UACL,UAAA,MAAS,CAAA,EAAA,OAET,aAAA,MAAY,CAAA,EAAA,OAGZ,iBAAA,MAAgB,CAAA,EAAA,OAgChB,mBAAA,MAAkB,CAAA,EAAA,QAmBlB,wBAAA,MAAuB,CAAA,EAAA,QASvB,kBAAA,MAAiB,CAAA,EAAA,QAmBjB,kBAAA,MAAiB,CAAA,EAAA,QAWjB,mBAAA,MAAkB,CAAA,EAAA,QAElB,eAAA,MAAc,CAAA,EAAA,QAKd,gBAAA,MAAe,CAAA,EAAA,wBArGlB,MAAO,CAAA,EAAAD,EAAI7B,cAEG,MAAM,CAAA,EAAAG,EAAIlB,IAAIS,EAAOmC,EAAIlC,cACvC,MAAA,CAAA,OAAiBoC,KADX/B,EAAQgC,EAA8BjC,QACfC,EAAQ6B,EAAIlC,aAMrC,OAJEsC,EAAOC,OAAOC,KAAKhC,EAAIvB,OAAOwD,SAASP,EAAIQ,OAAO1C,MACpDQ,EAAIvB,MAAMiD,EAAIQ,OAAO1C,MACrB,KACE2C,EAAqB,GACvBL,GAAQA,EAAKM,YAAcV,EAAIW,UAAUlB,OAAS,GAC9CmB,EAA0C,QAAnChE,EAAAiE,EAAiBb,EAAIW,UAAU,WAAI,IAAA/D,EAAAA,EAAI,GAC9CkE,EAAQd,EAAIW,UAAUhB,MAAM,GAClCoB,GAAA9C,EAAAwC,EAAKO,MAAIC,SAATR,OACEG,IACI,CAAA,EAAMM,EACRJ,GACA,SAAOK,GAAI,OAAApD,EAAAlB,OAAA,OAAA,GAAA,WAAA,OAAAuE,EAAAtE,MAAA,SAAAF,0BAAK,MAAM,CAAA,EAAA2B,EAAW4C,EAAM7C,EAAKT,IAA5B,KAAA,EAAA,MAAA,CAAA,EAAAjB,sBAPiC,CAAA,EAAA,iBAGrDmE,EAEKE,MAAAhD,EAAAoD,EAAA3B,OAAA,CAAA4B,EAAAL,WAAA,EAAAM,EAAA7B,OAAA,CAACS,EAGHjC,QACD,qBAGI,OADNsD,GAAAC,EAAAhB,EAAKO,MAAIC,SAATR,GACM,CAAA,EAAMS,EACRlB,EAAIW,WACJ,SAAOQ,GAAI,OAAApD,EAAAlB,OAAA,OAAA,GAAA,WAAA,OAAAuE,EAAAtE,MAAA,SAAAF,0BAAK,MAAM,CAAA,EAAA2B,EAAW4C,EAAM7C,EAAKT,IAA5B,KAAA,EAAA,MAAA,CAAA,EAAAjB,4BAHpB4E,EACKP,MAAAQ,EAAAC,EAAAhC,OAAA,CAACS,EAGHjC,2BAGD,OAAAkC,EACaA,EAAKuB,MACV,CAAA,EAAAvB,EAAKwB,EAALX,MAAAb,EAAOkB,EAAA,CAAAhD,EAAKT,GAAU4C,GAAK,KADZ,CAAA,EAAA,IADnB,CAAA,EAAA,kBAEFoB,EAAA1B,0BACAC,EAAKwB,EAALX,MAAAb,KAAO9B,EAAKT,GAAU4C,GAAI,uBAC9B,MAAA,CAAA,EAD+BoB,kBAEtBvD,EAAIhB,KACN,CAAA,EAAMgB,EAAIhB,KAAKgB,EAAKT,EAAOmC,EAAIQ,OAAO1C,KAAM2C,IADlC,CAAA,EAAA,IACjB,KAAA,GAAA,MAAA,CAAA,EAAON,kBAET,MAAM,IAAIrB,MAAM,wBAAwBY,OAAAM,EAAIQ,OAAO1C,KAAO,cAK1D,GAHMgE,EAAQzB,OAAOC,KAAKhC,EAAItB,QAAQuD,SAASP,EAAI+B,UAC/CzD,EAAItB,OAAOgD,EAAI+B,UACf,KAEF,MAAA,CAAA,EAAOxD,EACL,CACE0B,KAAM,iBACNO,OAAQ,CACN1C,KAAMgE,EAAMjG,MACZoE,KAAM,cAERU,UAAW,CAACX,EAAIY,KAAMZ,EAAIc,QAE5BxC,EACAT,IAGJ,MAAM,IAAIiB,MAAM,wBAAAY,OAAwBM,EAAI+B,SAAW,cAExC,MAAM,CAAA,EAAAxD,EAAWyB,EAAIgC,KAAM1D,EAAKT,YAC3C,OAAAoE,EADW9B,EAAsCjC,QAEtC,CAAA,EAAAK,EAAWyB,EAAIkC,WAAY5D,EAAKT,IAD1B,CAAA,EAAA,IACnB,KAAA,GAAA,MAAA,CAAA,EAAOsC,kBAET,OAAKH,EAAImC,UAGI,CAAA,EAAA5D,EAAWyB,EAAImC,UAAW7D,EAAKT,IAF1C,CAAA,EAAO,MAET,KAAA,GAAA,MAAA,CAAA,EAAOsC,kBAKP,GAHMiC,EAAO/B,OAAOC,KAAKhC,EAAIrB,OAAOsD,SAASP,EAAI+B,UAC7CzD,EAAIrB,MAAM+C,EAAI+B,UACd,KAEF,MAAA,CAAA,EAAOxD,EACL,CACE0B,KAAM,iBACNO,OAAQ,CACN1C,KAAMsE,EAAKvG,MACXoE,KAAM,cAERU,UAAW,CAACX,EAAIqC,WAElB/D,EACAT,IAGJ,MAAM,IAAIiB,MAAM,wBAAAY,OAAwBM,EAAI+B,SAAW,cAEnDO,EAAQ,GACHC,EAAI,qBAAG,OAAAA,EAAIvC,EAAIwC,MAAM/C,QACtBgD,EAAgBzC,EAAIwC,MAAMD,GAAzBG,EAAID,EAAA,GAAEE,EAAAF,EAAA,GACA,WAATC,EAAiB,CAAA,EAAA,KACnBJ,GAASK,WAHuB,CAAA,EAAA,YAIvB,MAAS,eAATD,EAAqB,CAAA,EAAA,KAC9BE,EAAAN,EAAgB,CAAA,EAAA/D,EAAWoE,EAAOrE,EAAKT,aAAvCyE,EAAAM,GAAUzC,EAAAjC,OAAuC,8BALfqE,WAQtC,KAAA,GAAA,MAAA,CAAA,EAAOD,WAEA,MAAM,CAAA,EAAA/D,EAAWyB,EAAI6C,WAAYvE,EAAKT,IAA7C,KAAA,GAAA,MAAA,CAAA,EAAOsC,UAEA,KAAA,GAAA,MAAA,CAAA,EAAMe,EACXlB,EAAI8C,UACJ,SAAOC,GAAO,OAAAhF,EAAAlB,OAAA,OAAA,GAAA,WAAA,OAAAuE,EAAAtE,MAAA,SAAAF,0BAAK,MAAM,CAAA,EAAA2B,EAAWwE,EAASzE,EAAKT,IAA/B,KAAA,EAAA,MAAA,CAAA,EAAAjB,qBAFrB,KAAA,GAAA,MAAA,CAAA,EAAOuD,kBAKD6C,EAAM,GACHT,EAAI,qBAAG,OAAAA,EAAIvC,EAAIiD,WAAWxD,QAC3ByD,EAAkBlD,EAAIiD,WAAWV,GAA/BzE,EAAIoF,EAAApF,KAAEqF,EAAAD,EAAA/E,MACViF,EAAc,GACA,qBAAdtF,EAAKmC,KAA2B,CAAA,EAAA,KAC5BoD,EAAAC,EAAe,CAAA,EAAA/E,EAAWT,EAAK+E,WAAYvE,EAAKT,MAJjB,CAAA,EAAA,mBAIrCuF,EAAMC,EAAApC,WAAA,EAAA,CAASd,EAA6CjC,wBACrC,eAAdJ,EAAKmC,KACdmD,EAAMtF,EAAKA,KACY,YAAdA,EAAKmC,OACdmD,EAAMtF,EAAKK,0BAEF,OAAXoF,EAAAP,EAAIQ,EAAAJ,EAAO,CAAA,EAAM7E,EAAW4E,GAAgBrF,EAAMQ,EAAKT,YAAvD0F,EAAQC,GAAGrD,mCAV8BoC,WAY3C,KAAA,GAAA,MAAA,CAAA,EAAOS,WAGP,MADAS,QAAQC,KAAK1D,GACP,IAAIlB,MAAM,uBAIhB,SAAU+B,EAAiB8C,GAC/B,MAAe,eAAXA,EAAE1D,KACG0D,EAAE7F,KAEJ,KAGO,SAAA8F,EAASD,EAAQE,GAC/B,YAD+B,IAAAA,IAAAA,EAAoB,GAClC,iBAANF,EACFG,MAAMH,GAAKE,EAAWF,EAEd,iBAANA,EACLA,EAAEpD,SAAS,KACNwD,WAAWJ,GAEbK,SAASL,GAEXE,EAGH,SAAU5B,EAAU0B,GACxB,QAAKA,KAGY,iBAANA,IAAkBA,EAAE3F,MAAM,YAG3B,UAAN2F,GAGM,MAANA,IAMU,SAAAL,EAASK,EAAQM,GAC/B,YAD+B,IAAAA,IAAAA,EAAkB,IAChC,iBAANN,EACFA,EAAEL,SAASW,IAEV,IAANN,GAAoB,SAANA,EACT,OAEJA,EAGEA,EAAI,GAFF,GAKL,SAAUO,EAASP,GACvB,OAAKA,GAGDA,GAAkB,iBAANA,EACPA,EAHA,GAQL,SAAUQ,EAAQR,GACtB,OAAKA,EAGDS,MAAMC,QAAQV,GACTA,EAAEW,KAAI,SAACC,GAAM,OAAAC,EAASD,MAE3BZ,GAAkB,iBAANA,EACPtD,OAAOC,KAAKqD,GAAGW,KAAI,SAACG,GAAM,OAAAD,EAASb,EAAEc,OAG/B,iBAANd,GACM,iBAANA,GACM,kBAANA,EAEA,CAACA,GAEH,GAfE,GAkBK,SAAAa,EAASE,EAAQT,GAC/B,MAAiB,iBAANS,GAGM,iBAANA,GAGM,kBAANA,EALFA,EAQJA,EAGY,iBAANA,EACF,GAEFA,EAAI,GALF,KAQW,SAAAxD,EACpByD,EACAC,uGAEMC,EAAW,GACRC,EAAQ,mBAAG,OAAAA,EAAQH,EAAMlF,OAChB,CAAA,EAAAmF,EAASD,EAAMG,GAASA,EAAOH,IADT,CAAA,EAAA,UAChCI,EAAInI,EAA2CsB,OACrD2G,EAAI7D,KAAK+D,2BAF+BD,UAI1C,KAAA,EAAA,MAAA,CAAA,EAAOD,UAGT,SAAeG,EACb1G,EACAT,EACAC,EACAK,mGAGA,OADMiF,EAAME,EAASxF,GACf,CAAA,EAAAQ,EAAIjB,IAAIQ,EAAOuF,EAAKjF,WAC1B,OADAvB,EAAAsB,OACA,CAAA,EAAOC,UAGT,SAAe8G,EACb3G,EACAT,EACAC,mGAEQ,MAAM,CAAA,EAAAQ,EAAIlB,IAAIS,EAAOC,EAAO,KAApC,KAAA,EAAA,MAAA,CAAA,EAAwC,UAAhCZ,EAAAgB,cAAgC,IAAAtB,EAAAA,EAAI,aAGjC,IAAAgB,EAA+B,CAC1CsH,GAAI,CACFtD,EAAC,SAACtD,EAAKT,aAAc4C,EAAA,GAAA0E,EAAA,EAAPA,EAAOxE,UAAAlB,OAAP0F,IAAA1E,EAAO0E,EAAA,GAAAxE,UAAAwE,GACnB,OAAgC,QAAzBvI,EAAA6D,EAAKA,EAAKhB,OAAS,UAAM,IAAA7C,EAAAA,EAAA,OAGpCwI,QAAS,CACPxD,EAAE,SAAAtD,EAAKT,EAAO8F,GACZ,QAASA,IAGb0B,MAAO,CACLzD,EAAE,SAAAtD,EAAKT,EAAO8F,GACZ,OAAIS,MAAMC,QAAQV,GACTA,EAAElE,OAAS,EAEhBkE,GAAkB,iBAANA,EACPtD,OAAOC,KAAKqD,GAAGlE,OAAS,GAEzBkE,IAGZ2B,MAAO,CACL1D,EAAE,SAAAtD,EAAKT,EAAO8F,GACZ,OAAIS,MAAMC,QAAQV,GACTA,EAAElE,OAAS,EAEhBkE,GAAkB,iBAANA,EACPtD,OAAOC,KAAKqD,GAAGlE,OAAS,IAEhB,iBAANkE,GAAoBA,IAAKA,EAAE3F,MAAM,YAGpC2F,IAGZqB,OAAQ,CACNtE,YAAY,EACZiB,OAAO,EACDC,WAAEtD,EAAKT,EAAO+C,EAAME,6FACjB,MAAM,CAAA,EAAAkE,EAAO1G,EAAKT,EAAO+C,EAAME,IAAtC,KAAA,EAAA,MAAA,CAAA,EAAOlE,mBAGX2I,OAAQ,CACN7E,YAAY,EACZiB,OAAO,EACDC,WAAEtD,EAAKT,EAAO+C,EAAME,mGACX,MAAM,CAAA,EAAAmE,EAAO3G,EAAKT,EAAO+C,WAClC,MAAgB,iBADd4E,EAAO5I,EAA8BsB,QACf,CAAA,EAAA,GACnB,CAAA,EAAM8G,EAAO1G,EAAKT,EAAO+C,EAAM4E,EAAO1E,EAAQ,KAArD,KAAA,EAEF,KAAA,EAAA,MAAA,CAAA,EAAOlE,UAAA,KAAA,EAAA,MAAA,CAAA,EAAMoI,EAAO1G,EAAKT,EAAO+C,EAAMgD,EAAS4B,GAAQ5B,EAAS9C,cAGpE2E,OAAQ,CACN/E,YAAY,EACZiB,OAAO,EACDC,WAAEtD,EAAKT,EAAO+C,EAAME,uGAKb,OAJElE,EAAAoI,KACX1G,EACAT,EACA+C,GACA3C,EAAA2F,EAAe,CAAA,EAAAqB,EAAO3G,EAAKT,EAAO+C,WAJ7B,MAAM,CAAA,EAAAhE,EAAAqE,WAAA,EAAA/D,EAAAwC,OAAA,CAIXzB,EAASgD,WAAA,EAAA,CAAAF,EAAA7C,SAAkC0F,EAAS9C,OAJtD,KAAA,EAAA,MAAA,CAAA,EAAOC,mBAQX2E,OAAQ,CACNhF,YAAY,EACZiB,OAAO,EACDC,WAAEtD,EAAKT,EAAO+C,EAAME,uGAKb,OAJElE,EAAAoI,KACX1G,EACAT,EACA+C,GACA3C,EAAA2F,EAAe,CAAA,EAAAqB,EAAO3G,EAAKT,EAAO+C,WAJ7B,MAAM,CAAA,EAAAhE,EAAAqE,WAAA,EAAA/D,EAAAwC,OAAA,CAIXzB,EAASgD,WAAA,EAAA,CAAAF,EAAA7C,SAAkC0F,EAAS9C,OAJtD,KAAA,EAAA,MAAA,CAAA,EAAOC,mBAQX4E,OAAQ,CACNjF,YAAY,EACZiB,OAAO,EACDC,WAAEtD,EAAKT,EAAO+C,EAAME,uGAKb,OAJElE,EAAAoI,KACX1G,EACAT,EACA+C,GACA3C,EAAA2F,EAAe,CAAA,EAAAqB,EAAO3G,EAAKT,EAAO+C,WAJ7B,MAAM,CAAA,EAAAhE,EAAAqE,WAAA,EAAA/D,EAAAwC,OAAA,CAIXzB,EAASgD,WAAA,EAAA,CAAAF,EAAA7C,SAAkC0F,EAAS9C,OAJtD,KAAA,EAAA,MAAA,CAAA,EAAOC,mBAQX6E,aAAc,CACZhE,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOD,QAAAA,EAAKC,IAGhBC,iBAAkB,CAChBnE,EAAC,WACC,OAAOoE,KAAKC,QAGhBC,qBAAsB,CACpBtE,EAAE,SAAAtD,EAAKT,EAAOsI,EAAMC,EAAKC,EAAKC,EAAMC,EAAKC,GACvC,OAAO,IAAIR,KACTpC,EAASuC,GACTvC,EAASwC,GACTxC,EAASyC,GACTzC,EAAS0C,GACT1C,EAAS2C,GACT3C,EAAS4C,IACTC,YAGNC,IAAK,CACH9E,EAAE,SAAAtD,EAAKT,EAAO8I,GACZ,IAAKvC,MAAMC,QAAQsC,GACjB,QAASA,EAEX,IAAK,IAAIpE,EAAI,EAAGA,EAAIoE,EAAGlH,OAAQ8C,IAC7B,IAAKoE,EAAGpE,GACN,OAAO,EAGX,OAAO,IAGXqE,IAAK,CACHhF,EAAE,SAAAtD,EAAKT,EAAO8I,GACZ,IAAKvC,MAAMC,QAAQsC,GACjB,QAASA,EAEX,IAAK,IAAIpE,EAAI,EAAGA,EAAIoE,EAAGlH,OAAQ8C,IAC7B,GAAIoE,EAAGpE,GACL,OAAO,EAGX,OAAO,IAGXsE,KAAM,CACJjF,EAAA,SAAEtD,EAAKT,EAAO8I,GACZ,QAAS/I,EAAY,IAAGgE,EAAEtD,EAAKT,EAAO8I,KAG1CG,KAAM,CACJlF,EAAA,SAAEtD,EAAKT,EAAO8I,GACZ,OAAQ/I,EAAY,IAAGgE,EAAEtD,EAAKT,EAAO8I,KAGzCI,GAAI,CACFnF,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO7D,EAAU4D,IAAM5D,EAAU6D,KAGrCkB,IAAK,CACHpF,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO7D,EAAU4D,IAAM5D,EAAU6D,KAGrCmB,IAAK,CACHrF,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAQ5D,EAAU4D,KAGtBqB,GAAI,CACFtF,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlCqB,IAAK,CACHvF,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlCsB,GAAI,CACFxF,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlCuB,IAAK,CACHzF,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlCwB,GAAI,CACF1F,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,KAAOvC,EAASwC,KAGpCyB,IAAK,CACH3F,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,KAAOvC,EAASwC,KAGpC0B,KAAM,CACJ5F,WAAEtD,GACA,OAAOA,EAAId,QAGfiK,YAAa,CACX7F,WAAEtD,EAAKT,EAAO0I,EAAKmB,GACjB,OAAOpJ,EAAId,OAASmK,OAAOD,GAAOC,OAAOpB,IAAQoB,OAAOpB,KAG5DqB,QAAS,CACPhG,WAAEtD,GACA,OAAOlD,KAAKyM,MAAkB,GAAZvJ,EAAId,SAG1BsK,eAAgB,CACdlG,WAAEtD,EAAKT,EAAO0I,EAAKmB,GAGjB,OAFAnB,EAAMnL,KAAK2M,KAAKJ,OAAOpB,IACvBmB,EAAMtM,KAAKyM,MAAMF,OAAOD,IACjBtM,KAAKyM,MAAMvJ,EAAId,OAASkK,EAAMnB,EAAM,IAAMA,IAGrDyB,OAAQ,CACNpG,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAO8B,OAAO9B,KAGlBoC,UAAW,CACTrG,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO6B,OAAO9B,GAAK8B,OAAO7B,KAG9BoC,WAAY,CACVtG,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO6B,OAAO9B,GAAK8B,OAAO7B,KAG9BqC,WAAY,CACVvG,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO6B,OAAO9B,GAAK8B,OAAO7B,KAG9BsC,WAAY,CACVxG,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAQ8B,OAAO9B,KAGnBwC,iBAAkB,CAChBzG,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO6B,OAAO9B,IAAM8B,OAAO7B,KAG/BwC,kBAAmB,CACjB1G,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO6B,OAAO9B,IAAM8B,OAAO7B,KAG/ByC,0BAA2B,CACzB3G,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO6B,OAAO9B,KAAO8B,OAAO7B,KAGhC0C,OAAQ,CACN5G,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAQjC,EAASiC,KAGrB4C,IAAK,CACH7G,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAIC,EAAI,GAEVlC,EAASiC,GAAKjC,EAASkC,KAGlC4C,IAAK,CACH9G,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlC6C,IAAK,CACH/G,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlC8C,IAAK,CACHhH,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlC+C,IAAK,CACHjH,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOlC,EAASiC,GAAKjC,EAASkC,KAGlCgD,IAAK,CACHlH,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO1K,KAAK0N,IAAIlF,EAASiC,GAAIjC,EAASkC,MAG1CiD,IAAK,CACHnH,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK2N,IAAInF,EAASiC,MAG7BmD,KAAM,CACJpH,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK4N,KAAKpF,EAASiC,MAG9BoD,MAAO,CACLrH,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK6N,MAAMrF,EAASiC,MAG/BqD,KAAM,CACJtH,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK8N,KAAKtF,EAASiC,MAG9BsD,MAAO,CACLvH,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK+N,MAAMvF,EAASiC,MAG/BuD,KAAM,CACJxH,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKgO,KAAKxF,EAASiC,MAG9BwD,MAAO,CACLzH,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO1K,KAAKiO,MAAMzF,EAASiC,GAAIjC,EAASkC,MAG5CwD,MAAO,CACL1H,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKkO,MAAM1F,EAASiC,MAG/B0D,KAAM,CACJ3H,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKmO,KAAK3F,EAASiC,MAG9BkC,KAAM,CACJnG,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK2M,KAAKnE,EAASiC,MAG9B2D,IAAK,CACH5H,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKoO,IAAI5F,EAASiC,MAG7B4D,KAAM,CACJ7H,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKqO,KAAK7F,EAASiC,MAG9B6D,IAAK,CACH9H,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKsO,IAAI9F,EAASiC,MAG7BgC,MAAO,CACLjG,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKyM,MAAMjE,EAASiC,MAG/B8D,MAAO,CACL/H,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKuO,MAAM/F,EAASiC,MAG/B+D,IAAK,CACHhI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKwO,IAAIhG,EAASiC,MAG7BgE,MAAO,CACLjI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKyO,MAAMjG,EAASiC,MAG/BiE,KAAM,CACJlI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK0O,KAAKlG,EAASiC,MAG9B6B,IAAK,CACH9F,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKsM,IAAI9D,EAASiC,MAG7BU,IAAK,CACH3E,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKmL,IAAI3C,EAASiC,MAG7BkE,MAAO,CACLnI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK2O,MAAMnG,EAASiC,MAG/BmE,KAAM,CACJpI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK4O,KAAKpG,EAASiC,MAG9BoE,IAAK,CACHrI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK6O,IAAIrG,EAASiC,MAG7BqE,KAAM,CACJtI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK8O,KAAKtG,EAASiC,MAG9BsE,KAAM,CACJvI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAK+O,KAAKvG,EAASiC,MAG9BuE,IAAK,CACHxI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKgP,IAAIxG,EAASiC,MAG7BwE,KAAM,CACJzI,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKiP,KAAKzG,EAASiC,MAG9ByE,MAAO,CACL1I,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOzK,KAAKkP,MAAM1G,EAASiC,MAG/B0E,aAAc,CACZ3I,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAO2E,OAAOD,aAAa5C,OAAO9B,MAGtC4E,cAAe,CACb7I,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAO2E,OAAOC,cAAc9C,OAAO9B,MAGvC7B,SAAU,CACRpC,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAO9B,SAASV,EAASuC,GAAI8B,OAAO7B,MAGxC/B,WAAY,CACVnC,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAO9B,WAAWT,EAASuC,MAG/B6E,OAAQ,CACN9I,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,GAAG6E,OAAO/C,OAAO7B,MAGrC6E,WAAY,CACV/I,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,GAAG8E,WAAWhD,OAAO7B,MAGzC8E,YAAa,CACXhJ,WAAEtD,EAAKT,EAAOgI,EAAGC,SACf,OAAyC,QAAlClJ,EAAA0G,EAASuC,GAAG+E,YAAYjD,OAAO7B,WAAG,IAAAlJ,EAAAA,EAAI,IAGjDiO,cAAe,CACbjJ,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,GAAGgF,cAAcvH,EAASwC,MAG9C9H,MAAO,CACL4D,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,QAASxC,EAASuC,GAAG7H,MAAMsF,EAASwC,MAGxCgF,SAAU,CACRlJ,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,QAASxC,EAASuC,GAAG7H,MAAMsF,EAASwC,MAGxCiF,OAAQ,CACNnJ,EAAC,SAACtD,EAAKT,EAAOgI,EAAGC,EAAGkF,GAClB,OAAO1H,EAASuC,GAAGkF,OAAOpD,OAAO7B,GAAIxC,EAAS0H,QAAAA,EAAK,OAGvDC,SAAU,CACRrJ,EAAC,SAACtD,EAAKT,EAAOgI,EAAGC,EAAGkF,GAClB,OAAO1H,EAASuC,GAAGoF,SAAStD,OAAO7B,GAAIxC,EAAS0H,QAAAA,EAAK,OAGzDE,OAAQ,CACNtJ,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,GAAGqF,OAAOvD,OAAO7B,MAGrC/F,QAAS,CACP6B,EAAC,SAACtD,EAAKT,EAAOgI,EAAGC,EAAGkF,GAClB,OAAO1H,EAASuC,GAAG9F,QAAQuD,EAASwC,GAAIxC,EAAS0H,MAGrDG,WAAY,CACVvJ,EAAC,SAACtD,EAAKT,EAAOgI,EAAGC,EAAGkF,GAClB,OAAO1H,EAASuC,GAAGsF,WAAW7H,EAASwC,GAAIxC,EAAS0H,MAGxDI,WAAY,CACVxJ,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,OAAOxC,EAASuC,GAAGuF,WAAW9H,EAASwC,MAG3CuF,UAAW,CACTzJ,EAAC,SAACtD,EAAKT,EAAOgI,EAAGC,EAAGkF,GAClB,OAAO1H,EAASuC,GAAGwF,UAAU1D,OAAO7B,GAAI6B,OAAOqD,MAGnDM,YAAa,CACX1J,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOvC,EAASuC,GAAGyF,gBAGvBC,YAAa,CACX3J,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOvC,EAASuC,GAAG0F,gBAGvBC,KAAM,CACJ5J,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOvC,EAASuC,GAAG2F,SAGvBC,QAAS,CACP7J,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOvC,EAASuC,GAAG4F,YAGvBC,UAAW,CACT9J,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,OAAOvC,EAASuC,GAAG6F,cAGvBC,MAAO,CACL/J,WAAEtD,EAAKuH,EAAGU,EAAKmB,GACb,OAAOiE,EAAM/H,EAASiC,GAAIjC,EAAS2C,GAAM3C,EAAS8D,MAGtDkE,IAAK,CACHhK,EAAC,SAACtD,EAAKuN,GACL,OAAOD,GAAIzH,EAAQ0H,GAAIvH,KAAI,SAACI,GAAM,OAAAd,EAASc,SAG/CoH,IAAK,CACHlK,EAAC,SAACtD,EAAKuN,GACL,OAAOC,GAAI3H,EAAQ0H,GAAIvH,KAAI,SAACI,GAAM,OAAAd,EAASc,SAG/CqH,KAAM,CACJnK,WAAEtD,EAAKT,EAAOmO,EAAIC,GAChB,OAAO9H,EAAQ6H,GAAID,KAAKzI,EAAS2I,MAGrCC,MAAO,CACLtK,WAAEtD,EAAKT,EAAOsO,EAAGF,GACf,OAAO3I,EAAS6I,GAAGD,MAAM5I,EAAS2I,MAGtCG,MAAO,CACLxK,EAAE,SAAAtD,EAAKT,EAAOwO,WACZ,MAAmB,iBAARA,EACI,UAANA,EAAI,UAAE,IAAAzP,EAAAA,EAAI,KAEO,QAAnBM,EAAAiH,EAAQkI,GAAK,UAAM,IAAAnP,EAAAA,EAAA,OAG9BoP,KAAM,CACJ1K,EAAE,SAAAtD,EAAKT,EAAOwO,WACZ,MAAmB,iBAARA,EACiB,QAAnBzP,EAAAyP,EAAIA,EAAI5M,eAAW,IAAA7C,EAAAA,EAAA,KAGF,QAAnBM,GADPmP,EAAMlI,EAAQkI,IACHA,EAAI5M,eAAW,IAAAvC,EAAAA,EAAA,OAG9BuC,OAAQ,CACNmC,EAAE,SAAAtD,EAAKT,EAAOwO,GACZ,MAAmB,iBAARA,EACFA,EAAI5M,OAEN0E,EAAQkI,GAAK5M,SAGxBC,OAAQ,CACNkC,WAAEtD,EAAKT,EAAO0O,EAAIC,GAChB,MAAkB,iBAAPD,EACFA,EAAKjJ,EAASkJ,GAEZlL,EAAAA,EAAA,GAAA6C,EAAQoI,OAAQpI,EAAQqI,IAAK,KAG5CC,SAAU,CACR7K,EAAC,SAACtD,EAAKT,EAAOgI,EAAGC,EAAGkF,GAIlB,YAJkB,IAAAA,IAAAA,EAAM,IACpB5G,MAAMC,QAAQwB,KAChBA,EAAIA,EAAEkG,KAAKzI,EAAS0H,KAEf1H,EAASuC,GAAG4G,SAASnJ,EAASwC,MAGzCvF,SAAU,CACRqB,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAEtF,SAAS+C,EAASwC,IAEtB3B,EAAQ0B,GAAGtF,SAASuF,KAG/B4G,YAAa,CACX9K,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAE6G,YAAYpJ,EAASwC,IAEzB3B,EAAQ0B,GAAG6G,YAAY5G,KAGlC6G,QAAS,CACP/K,WAAEtD,EAAKT,EAAOgI,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAE8G,QAAQrJ,EAASwC,IAErB3B,EAAQ0B,GAAG8G,QAAQ7G,KAG9B8G,IAAK,CACHhL,WAAEtD,EAAKT,EAAOgI,EAAGC,WACf,MAAiB,iBAAND,EACgB,QAAlBjJ,EAAAiJ,EAAEjC,EAASkC,WAAO,IAAAlJ,EAAAA,EAAA,KAEG,QAAvBM,EAAAiH,EAAQ0B,GAAGjC,EAASkC,WAAG,IAAA5I,EAAAA,EAAI,OAGtC2P,QAAS,CACPjL,EAAE,SAAAtD,EAAKT,EAAOgI,GACZ,MAAiB,iBAANA,EACFA,EAAEqG,MAAM,IAAIW,UAAUd,KAAK,IAE7B5H,EAAQ0B,GAAGgH,YAGtBC,KAAM,CACJlL,WAAEtD,EAAKT,EAAOgI,EAAGnB,GACf,MAAiB,iBAANmB,EACFA,EAAElG,MAAM,EAAGiE,EAASc,IAEtBP,EAAQ0B,GAAGlG,MAAM,EAAGiE,EAASc,MAGxCqI,KAAM,CACJnL,EAAE,SAAAtD,EAAKT,EAAOwO,GACZ,OAAOlI,EAAQkI,GAAK1M,MAAM,GAAI,KAGlCqN,KAAM,CACJpL,EAAE,SAAAtD,EAAKT,EAAOwO,GACZ,OAAOlI,EAAQkI,GAAK1M,MAAM,KAG9BA,MAAO,CACLiC,EAAC,SAACtD,EAAKT,EAAOwO,EAAKxG,EAAGC,GACpB,MAAmB,iBAARuG,EACFA,EAAI1M,MAAMiE,EAASiC,GAAIjC,EAASkC,IAElC3B,EAAQkI,GAAK1M,MAAMiE,EAASiC,GAAIjC,EAASkC,MAGpDmH,OAAQ,CACNrL,EAAA,SAAEtD,EAAKT,EAAOwO,SAQZ,OAAa,WAPbA,EAAMlI,EAAQkI,IACJzO,EAAuB,eAAGgE,EAClCtD,EACAT,EACA,EACAwO,EAAI5M,OAAS,WAEF,IAAA7C,EAAAA,EAAI,OAGrBoE,KAAM,CACJY,WAAEtD,EAAKT,EAAOwO,EAAKlO,GACjB,OAAIiG,MAAMC,QAAQgI,IAChBA,EAAIrL,KAAK7C,GACFkO,EAAI5M,SAEL,IAGZyN,IAAK,CACHtL,EAAE,SAAAtD,EAAKT,EAAOwO,SACZ,OAAIjI,MAAMC,QAAQgI,IACA,UAATA,EAAIa,aAAK,IAAAtQ,EAAAA,EAEX,OAGXuQ,MAAO,CACLvL,EAAE,SAAAtD,EAAKT,EAAOwO,SACZ,OAAIjI,MAAMC,QAAQgI,IACE,UAAXA,EAAIc,eAAO,IAAAvQ,EAAAA,EAEb,OAGXwQ,QAAS,CACPxL,WAAEtD,EAAKT,EAAOwO,EAAKlO,GACjB,OAAIiG,MAAMC,QAAQgI,IAChBA,EAAIe,QAAQjP,GACLkO,EAAI5M,SAEL,IAGZa,KAAM,CACJsB,EAAE,SAAAtD,EAAKT,EAAOmF,GACZ,OAAO3C,OAAOC,KAAK4D,EAASlB,MAGhCqK,OAAQ,CACNzL,EAAE,SAAAtD,EAAKT,EAAOmF,GACZ,OAAO3C,OAAOgN,OAAOnJ,EAASlB,MAGlC5F,IAAK,CACHwE,WAAEtD,EAAKT,EAAOmF,EAAKI,SACjB,OAAmC,QAA5BxG,EAAAsH,EAASlB,GAAKM,EAASF,WAAK,IAAAxG,EAAAA,EAAI,OAG3CS,IAAK,CACHuE,EAAC,SAACtD,EAAKT,EAAOmF,EAAKI,EAAKjF,GAItB,OAHI6E,GAAsB,iBAARA,IAChBA,EAAIM,EAASF,IAAQjF,GAEhB6E,KAcb,SAAS5D,EAAMP,EAAMyO,EAAQ1Q,GAC3B,IAD6B,IAAA+B,QAAKU,EAAIzC,EAAAyC,KAAEC,EAAM1C,EAAA0C,OACvCX,EAAM2O,GAAQ,CAER,OADAzO,EAAKF,MAEdW,EAAS,EACTD,KAEAC,IAGJ,MAAO,CAAEX,IAAGA,EAAEU,OAAMC,OAAMA,GAG5B,IAAMiO,EAAW,SAACxO,GACZA,EAAEJ,IAAMI,EAAEI,SAASR,KACrB0B,OAAOmN,OAAOzO,EAAEI,SAAUC,EAAML,EAAEF,KAAME,EAAEJ,IAAKI,EAAEI,YAmCrD,SAASsO,EAAIC,GACX,GAAoB,mBAATA,EACT,OAAOA,EAET,GAAIA,aAAgBC,OAClB,OApCgBC,EAoCEF,EAnCb,SAAC3O,GACNwO,EAASxO,GACT,IAAMf,EAAQ4P,EAAQC,KAAK9O,EAAEF,KAAKwM,UAAUtM,EAAEJ,MAC9C,IAAKX,EACH,OAAOe,EAMT,IAJA,IAAMS,EACD7B,EAAAA,EAAA,GAAAoB,GACH,CAAAJ,IAAKI,EAAEJ,IAAMX,EAAM,GAAGyB,SAEf8C,EAAI,EAAGA,EAAIvE,EAAMyB,OAAQ8C,IAChCxD,EAAEE,MAAMO,EAAMN,MAAQlB,EAAMuE,GAE9B,OAAO/C,GAdX,IAAoBoO,EAsClB,GAAoB,iBAATF,EACT,OArBJ,SAAqBE,GACnB,OAAO,SAAC7O,GAEN,OADAwO,EAASxO,GACLA,EAAEF,KAAKuM,WAAWwC,EAAS7O,EAAEJ,KAE1BhB,EAAAA,EAAA,GAAAoB,GACH,CAAAJ,IAAKI,EAAEJ,IAAMiP,EAAQnO,SAGlBV,GAYA+O,CAAYJ,GAErB,MAAM,IAAI5O,MAAM,gBAGlB,SAAS7C,EAAO8R,EAAUL,GAMxB,OALAA,EAAOD,EAAIC,GACPK,IACFA,EAAW9R,EAAO,KAAM+R,EAAKD,KAGxB,SAAChP,GACN,IAAMkP,EAAOF,EAAWA,EAAShP,GAAKA,EACtCA,EAAEC,OAAOgC,KAAK+M,GACd,IAAMvO,EAAQkO,EAAKO,GAEnB,OADAlP,EAAEC,OAAOkO,MACF1N,IAAUyO,EAAOlP,EAAIgP,EAAWA,EAASvO,GAASA,GAI7D,IAAM0O,EAAc,SAACnP,GACnB,IAAKA,EAAEC,OAAOS,OACZ,OAAOV,EAET,IAAMgP,EAAWhP,EAAEC,OAAOD,EAAEC,OAAOS,OAAS,GAC5C,OAAOsO,EAAWA,EAAShP,GAAKA,GAGlC,SAASoP,QAAI,IAAQC,EAAA,GAAAjJ,EAAA,EAARA,EAAQxE,UAAAlB,OAAR0F,IAAAiJ,EAAQjJ,GAAAxE,UAAAwE,GAEnB,OADAiJ,EAAQA,EAAM9J,IAAImJ,GACX,SAAC1O,GAEN,IADA,IAAIkP,EAAOlP,EACFwD,EAAI,EAAGA,EAAI6L,EAAM3O,OAAQ8C,IAAK,CACrC,IAAM8L,EAAU9L,EAAI,EAAI2L,EAAYD,GAAQA,EACtCK,EAASF,EAAM7L,GAAG8L,GACxB,GAAIC,IAAWD,EACb,OAAOtP,GAELuP,EAAO3P,IAAM0P,EAAQ1P,KAAO2P,EAAOpP,GAAKmP,EAAQnP,MAClD+O,EAAOK,GAGX,OAAOL,GAIX,SAAS9R,QAAI,IAAQiS,EAAA,GAAAjJ,EAAA,EAARA,EAAQxE,UAAAlB,OAAR0F,IAAAiJ,EAAQjJ,GAAAxE,UAAAwE,GAEnB,OADAiJ,EAAQA,EAAM9J,IAAImJ,GACX,SAAC1O,GACN,IAAK,IAAIwD,EAAI,EAAGA,EAAI6L,EAAM3O,OAAQ8C,IAAK,CACrC,IAAM/C,EAAQ4O,EAAM7L,GAAGxD,GACvB,GAAIS,IAAUT,EACZ,OAAOS,EAGX,OAAOT,GAIX,SAASiP,EAAKN,GAEZ,OADAA,EAAOD,EAAIC,GACJ,SAAC3O,GACN,OAAa,CACX,IAAMkP,EAAOC,EAAYnP,GACnBS,EAAQkO,EAAKO,GACnB,GAAIzO,IAAUyO,EACZ,OAAOlP,EAETA,EAAIS,IAKV,SAAS+O,EAASb,GAEhB,OADAA,EAAOD,EAAIC,GACJ,SAAC3O,GACN,IAAMS,EAAQkO,EAAK3O,GACnB,OAAIS,IAAUT,EACLS,EAET7B,EAAA,GAAYoB,IAIhB,SAASyP,EAAKd,EAAMe,GAElB,OADAf,EAAOD,EAAIC,GACJ,SAAC3O,GACN,IAAMS,EAAQkO,EAAK3O,GACnB,GAAIS,IAAUT,EACZ,OAAOA,EAET,IAAM2P,EAAOD,EAAQ1P,EAAEE,MAAMU,MAAMZ,EAAEG,GAAIM,EAAMN,IAAKH,EAAGS,GAKvD,OAJAA,EAAMN,GAAKH,EAAEG,GACA,OAATwP,IACF3P,EAAEE,MAAMO,EAAMN,MAAQwP,GAEjBlP,GAIX,IAAMmP,EAAO,SAACjB,GAAS,OAAAa,EAASP,EAAKN,KAmCrC,SAASkB,EAAIpM,EAAOzD,GAElB,IADA,IAAI6B,EAAO4B,EAAM,GACRD,EAAI,EAAGA,EAAIC,EAAM/C,OAAQ8C,GAAK,EAAG,CAClC,IAAA3F,EAAoB,CAAC4F,EAAMD,GAAGR,SAAUS,EAAMD,EAAI,IAAvCzB,EAAKlE,EAAA,GACtBgE,EAAOiO,EACL,CACE5O,KAAM,mBACNW,KAAIA,EACJmB,SALWnF,EAAA,GAMXkE,MAAKA,GAEP/B,EACA,CAAEJ,IAAKmC,EAAMnC,IAAMmC,EAAMjC,KAAKY,SAGlC,OAAOmB,EAGT,SAASkO,EAAItM,EAAOuM,EAAGvP,GAErB,IADA,IAAIsB,EAAQ0B,EAAMA,EAAM/C,OAAS,GACxB8C,EAAIC,EAAM/C,OAAS,EAAG8C,GAAK,EAAGA,GAAK,EAAG,CACvC,IAAA3F,EAAmB,CAAC4F,EAAMD,EAAI,GAAIC,EAAMD,GAAGR,UAA1CnB,EAAIhE,EAAA,GACXkE,EAAQ+N,EACN,CACE5O,KAAM,mBACNW,KAAIA,EACJmB,SALiBnF,EAAA,GAMjBkE,MAAKA,GAEP,CAAEnC,IAAKiC,EAAKjC,KACZa,GAGJ,OAAOsB,EAGT,IArEWkO,EAAWC,EAqEhBC,EAAW,SAAClT,GAChB,OAAAwS,EAAKxS,GAAM,SAAC+S,EAAGhQ,EAAGS,GAAU,MAAC,CAC3BT,EAACA,EACDgD,SAAUhD,EAAEF,KAAKwM,UAAUtM,EAAEJ,IAAKa,EAAMb,UAGtCkQ,EAAS,SAAC7L,EAAKjE,EAAGS,GACtB,OAAAa,OAAO8O,iBAAiBnM,EAAK,CAC3BrE,IAAK,CAAEyQ,UAAU,EAAMC,cAAc,EAAMlR,MAAOY,EAAEJ,KACpDE,KAAM,CACJuQ,UAAU,EACVC,cAAc,EACdlR,OAAQY,EAAEF,MAAQW,EAAMX,MAAMc,MAAMZ,EAAEJ,IAAKa,EAAMb,SAIjDkB,EAAiB9D,GArFDkT,EAA4B,SAACA,GAAM,OAAAD,GAAK,SAACM,GAAM,OAAAL,EAAEA,EAAFA,CAAKK,QAA/DN,EAsFP,SAACO,GACD,IAAMC,EAAahB,EAAKjS,GAAiB,SAACK,GAAW,MAAC,CACpDqD,KAAM,aACNnC,KAF6ClB,EAAA,OAIzC6S,EAAgBjB,EAAKtS,GAAY,SAACU,GAAC,IAAA8S,EAAG9S,EAAA,GAAM,MAAC,CACjDqD,KAAM,UACN9B,MAAOuR,EAAI/P,MAAM,GAAI,GACrB+P,IAAGA,MAECC,EAAiBnB,EAAKpS,GAAc,SAACQ,GAAC,IAAA8S,EAAG9S,EAAA,GAAM,MAAC,CACpDqD,KAAM,UACN9B,OAAQuR,EACRA,IAAGA,MAECE,EAAcpB,EAAKnS,GAAW,SAACO,GAAU,MAAC,CAC9CqD,KAAM,UACN9B,MAAO,KACPuR,IAHuC9S,EAAA,OAKnCiT,EAAiBrB,EAAKlS,GAAc,SAACM,GAAC,IAAA8S,EAAG9S,EAAA,GAAM,MAAC,CACpDqD,KAAM,UACN9B,MAAe,SAARuR,EACPA,IAAGA,MAECI,EAAqBtB,EAAKhS,GAAyB,SAACI,GAAU,MAAA,CAClE,SAD4DA,EAAA,OAIxDmT,EAA2BvB,EAC/BL,EAAI,KAAMpS,EAAiBwT,GAAa,MACxC,SAAC3S,GAAiB,MAAA,CAAC,aAAPA,EAAA,OAERoT,EAAkBxB,EACtBvS,EACE,KACAkS,EAAI,IAAKQ,EAAKxS,EAAI2T,EAAoBC,IAA4B,OAEpE,SAACvN,GAAU,OAAGvC,KAAM,kBAAmBuC,MAAKA,MAExCyN,EAAU9T,EACdsT,EACAE,EACAC,EACAC,EACAG,GAEIE,EAAgB/B,EAAIoB,EAAYZ,EAAKR,EAAI,IAAKoB,KAC9CY,EAAY3B,EAChBL,EAAI,IAAKI,EAASJ,EAAI+B,EAAe3B,EAAS,OAAQ,MACtD,SAAC9N,GAAS,MAAC,CACTA,KAAIA,MAGF2P,EAAsB5B,EAAKrS,EAAIgU,IAAY,SAACvT,EAAQmS,EAAGvP,GAAU,MAAC,CACtE6Q,KADqDzT,EAAA,GAErD4C,MAAKA,MAED8Q,EAAqB9B,EACzBL,EAAIoB,EAAYZ,EAAKR,EAAI,IAAKoB,MAC9B,SAACgB,GACC,OAAAA,EAAM9Q,OAAS,EAAI,CAAEQ,KAAM,qBAAsBsQ,SAAUA,EAAM,MAM/DC,EAAerU,EACnBqT,EACAC,EACAE,EAP2BnB,EAC3BL,EAAI,IAAKmC,EAAoB,MAC7B,SAAC1T,GAAiB,MAAA,CAAGqD,KAAM,mBAAoB4C,WAAnCjG,EAAA,QAQR6T,EAAgBjC,EAAKgB,GAAY,SAAC5S,EAAQmC,EAAGS,GAAV,IAAA2B,EAAIvE,EAAA,GAC3C,OAAAiS,EAAYlR,EAAAA,EAAA,GAAAwD,GAAM,CAAAuP,eAAe,IAAQ3R,EAAGS,MAExCmR,EAAqBnC,EACzBrS,EAAIgS,EAAIqC,EAAc,IAAKjB,GAAakB,IACxC,SAAC7T,GAAkB,MAAC,CAClBkB,KADIlB,EAAA,GAEJuB,MAFWvB,EAAA,OAKTgU,EAAsBzC,EAC1BwC,EACAhC,EAAKR,EAAI,IAAKwC,KAEVE,EAAyBtC,EAC7BJ,EAAIyC,EAAqBrC,EAAS,OAE9BuC,EAAgBtC,EACpBL,EAAI,IAAK0C,EAAwB,MACjC,SAAC5N,GAAe,MAAA,CAAGhD,KAAM,gBAAiBgD,WAAUA,MAEhD8N,EAAU5U,EAAIoT,GACdyB,EAAc7C,EAAI4C,EAASpC,EAAKR,EAAI,IAAK4C,KACzCE,EAAezC,EAAKL,EAAI,IAAK6C,EAAa,MAAM,SAAClO,GAAa,MAAC,CACnE7C,KAAM,eACN6C,SAAQA,MAEJoO,EAAoB1C,EACxBrS,EACE8T,EACAT,EACAyB,EACAH,EACA3C,EAAI,IAAKmC,EAAoB,OAE/B,SAAC1T,EAAQmC,EAAGS,GAAV,IAAA2B,EAAIvE,EAAA,GAAgB,OAAAiS,EAAO1N,EAAMpC,EAAGS,MAElC2R,EAAiB3C,EACrBL,EAAI+C,EAAmBvC,EAAKyB,KAC5B,SAAC5N,EAAOzD,EAAGqS,GACT,OAAO5O,EAAM6O,QAAO,SAACC,EAAK1U,OAAEyT,EAAIzT,EAAAyT,KAAE7Q,EAAK5C,EAAA4C,MACrC,OAAOqP,EACL,CAAE5O,KAAM,iBAAkBO,OAAQ8Q,EAAK3Q,UAAW0P,EAAK5P,MACvD1B,EACAS,SAKF+R,EAAgBrC,EAAS/S,EAAI,IAAK,IAAK,IAAK,MAC5CqV,EAAkBhD,EACtBL,EAAIQ,EAAK4C,GAAgBJ,IACzB,SAAC3O,EAAOuM,EAAGvP,GACT,OAAAgD,EAAMiP,aAAY,SAACpP,EAAUzF,OAAEmC,EAACnC,EAAAmC,EAAEgD,EAAQnF,EAAAmF,SACxC,OAAA8M,EAAO,CAAE5O,KAAM,kBAAmBoC,SAAQA,EAAEN,SAAQA,GAAIhD,EAAGS,SAG3DkS,EAAgCjV,EAAyB4U,QAC7D,SAACM,EAAMC,GACL,OAAApD,EACEL,EAAIwD,EAAMhD,EAAKR,EAAIe,EAAS0C,GAAWD,KA7XL,OA8XpBC,EA9X2B9C,EAAMF,KAgYnD4C,GAEIK,EAAoBrD,EACxBL,EACEuD,EACAnD,EAASJ,EAAI,IAAKoB,EAAY,IAAKA,MAErC,SAAC3S,GAAC,IAAAoF,OAAME,EAAUtF,EAAA,GAAEuF,EAASvF,EAAA,GAC3B,OAAOsF,EACH,CAAEjC,KAAM,wBAAyB+B,KAAIA,EAAEE,WAAUA,EAAEC,aACnDH,KAGR,OAAOwM,EAAKrS,EAAI0V,IAAoB,SAACjV,EAAQmC,EAAGS,GAAV,IAAA2B,EAAIvE,EAAA,GACxC,OAAAiS,EAAO1N,EAAMpC,EAAGS,SA5OW,SAAC8P,GAAM,OAAAL,EAAEA,EAAFA,CAAKK,iBAiP7B3D,EAAMjH,EAAW6B,EAAiBmB,GAChD,YAD+B,IAAAnB,IAAAA,EAAe,QAAE,IAAAmB,IAAAA,EAAe,GAC3DhD,EAAI6B,EAAYA,EAChB7B,EAAIgD,EAAYA,EACbhD,EAEH,SAAUkH,GAAIC,GAClB,OAAIA,EAAGpM,OAAS,EAAU,EACnBqM,GAAID,GAAMA,EAAGpM,OAEhB,SAAUqM,GAAID,GAElB,IADA,IAAInH,EAAI,EACCnC,EAAI,EAAGA,EAAIsJ,EAAGpM,OAAQ8C,IAAKmC,GAAKmH,EAAGtJ,GAC5C,OAAOmC"}