{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import * as seedrandom from 'seedrandom';\nimport { z } from 'zod';\n\nexport type DictOf<T> = { [key: string]: T };\n\nexport const ZExprScalar = z.union([\n  z.number(),\n  z.string(),\n  z.boolean(),\n  z.null(),\n]);\nexport type TExprScalar = number | string | boolean | null;\nexport type TExprArray = TExprValue[];\nexport type TExprObject = { [key: string]: TExprValue };\nexport type TExprValue = TExprScalar | TExprObject | TExprArray;\n\nexport type TExprFuncSync = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExprValue[]\n) => TExprValue;\nexport type TExprFuncLazy = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExpression[]\n) => TExprValue;\nexport type TExprFuncDef =\n  | {\n      assignment?: true;\n      lazy?: undefined;\n      f: TExprFuncSync;\n    }\n  | {\n      lazy: true;\n      f: TExprFuncLazy;\n    };\n\nexport type TBinopDef = {\n  alias: string;\n};\nexport type TUnopDef = {\n  alias: string;\n};\n\nexport type TExprResult = {\n  result: TExprValue;\n  ctx: TExprContext;\n};\n\nexport type TExprContext = {\n  rng: () => number;\n  funcs: DictOf<TExprFuncDef>;\n  binops: DictOf<TBinopDef>;\n  unops: DictOf<TUnopDef>;\n  get: (scope: TScope, key: string) => TExprValue;\n  set: (scope: TScope, key: string, value: TExprValue) => void;\n  call?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExprValue[],\n      ) => TExprValue)\n    | undefined;\n  lazy?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExpression[],\n      ) => TExprValue)\n    | undefined;\n};\n\nexport type TScope = { [key: string]: TExprValue };\n\nexport type TExpression =\n  | TCallExpression\n  | TIdentifierExpression\n  | TBinaryExpression\n  | TLiteralExpression\n  | TConditionalExpression\n  | TUnaryExpression\n  | TTemplateLiteralExpression\n  | TArrayLiteralExpression\n  | TObjectLiteralExpression\n  | TComputedPropertyExpression\n  | TArrowFunctionExpression;\n\nexport type TTemplateLiteralPart =\n  | ['chunks', string]\n  | ['expression', TExpression];\n\nexport type TTemplateLiteralExpression = {\n  type: 'TemplateLiteral';\n  parts: TTemplateLiteralPart[];\n};\n\nexport type TComputedPropertyExpression = {\n  type: 'ComputedProperty';\n  expression: TExpression;\n};\n\nexport type TArrayLiteralExpression = {\n  type: 'ArrayLiteral';\n  elements: TExpression[];\n};\n\nexport type TObjectLiteralExpression = {\n  type: 'ObjectLiteral';\n  properties: {\n    name: TExpression;\n    value: TExpression | undefined;\n  }[];\n};\n\nexport type TCallExpression = {\n  type: 'CallExpression';\n  callee: TIdentifierExpression;\n  arguments: TExpression[];\n};\n\nexport type TIdentifierExpression = {\n  type: 'Identifier';\n  name: string;\n};\n\nexport type TBinaryExpression = {\n  type: 'BinaryExpression';\n  left: TExpression;\n  operator: string;\n  right: TExpression;\n};\n\nexport type TLiteralExpression = {\n  type: 'Literal';\n  value: string;\n  raw: string;\n};\n\nexport type TConditionalExpression = {\n  type: 'ConditionalExpression';\n  test: TExpression;\n  consequent: TExpression;\n  alternate: TExpression;\n};\n\nexport type TUnaryExpression = {\n  type: 'UnaryExpression';\n  argument: TExpression;\n  operator: string;\n};\n\nexport type TArrowFunctionExpression = {\n  type: 'ArrowFunction';\n  parameters: { type: 'BoundName'; name: string }[];\n  result: TExpression;\n};\n\nexport const CONSTS: DictOf<TExprValue> = {\n  E: Math.E,\n  LN10: Math.LN10,\n  LN2: Math.LN2,\n  LOG10E: Math.LOG10E,\n  LOG2E: Math.LOG2E,\n  PI: Math.PI,\n  SQRT1_2: Math.SQRT1_2,\n  SQRT2: Math.SQRT2,\n};\n\nconst BINOP_MAP = {\n  '**': { alias: 'pow' },\n  '*': { alias: 'mul' },\n  '/': { alias: 'div' },\n  '%': { alias: 'mod' },\n  '+': { alias: 'add' },\n  '-': { alias: 'sub' },\n  '>>>': { alias: 'bitwiseRightShiftUnsigned' },\n  '<<': { alias: 'bitwiseLeftShift' },\n  '>>': { alias: 'bitwiseRightShift' },\n  '<=': { alias: 'lte' },\n  '>=': { alias: 'gte' },\n  '<': { alias: 'lt' },\n  '>': { alias: 'gt' },\n  '===': { alias: 'eq' },\n  '!==': { alias: 'neq' },\n  '==': { alias: 'eq' },\n  '!=': { alias: 'neq' },\n  '&': { alias: 'bitwiseAnd' },\n  '^': { alias: 'bitwiseXor' },\n  '|': { alias: 'bitwiseOr' },\n  '&&': { alias: 'and' },\n  '||': { alias: 'or' },\n  ':=': { alias: 'setVar' },\n  '+=': { alias: 'setAdd' },\n  '-=': { alias: 'setSub' },\n  '/=': { alias: 'setDiv' },\n  '*=': { alias: 'setMul' },\n  '??': { alias: 'nullCoalesce' },\n};\n\nconst UNOP_MAP = {\n  '+': { alias: 'number' },\n  '-': { alias: 'negate' },\n  '~': { alias: 'bitwiseNot' },\n  '!': { alias: 'not' },\n};\n\nconst IgnoreWhitespace = (Rule) => Ignore(/^\\s+/, Rule);\nconst QuoteToken = Any(\n  /^('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')/,\n  /^(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")/,\n);\nconst NumericToken = Any(\n  /^((?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\\b/,\n  /^(0[xX][0-9a-fA-F]+)\\b/,\n);\nconst NullToken = /^(null)\\b/;\nconst BooleanToken = /^(true|false)\\b/;\nconst IdentifierToken = /^([a-zA-Z_$][a-zA-Z0-9_$.]*)/;\nconst InterpolationChunkToken = /^((?:\\$(?!{)|\\\\.|[^`$\\\\])+)/;\nconst BinaryOperatorPrecedence = [\n  '**',\n  Any('*', '/', '%'),\n  Any('+', '-'),\n  Any('>>>', '<<', '>>'),\n  Any('<=', '>=', '<', '>'),\n  Any('===', '!==', '==', '!='),\n  /^&(?!&)/,\n  '^',\n  /^\\|(?!\\|)/,\n  '&&',\n  '||',\n  '??',\n  Any(':=', '+=', '-=', '*=', '/='),\n];\n\nconst INVALID_IDENT_REGEX = /^__proto__|prototype|constructor$/;\n\nexport function createExprContext({\n  funcs,\n  binops,\n  unops,\n  seed = 'expreval',\n  get,\n  set,\n  call,\n}: Partial<TExprContext> & { seed?: string }): TExprContext {\n  const vars: { [key: string]: TExprValue } = {};\n  return {\n    rng: seedrandom.default(seed),\n    funcs: { ...STDLIB, ...funcs },\n    binops: { ...BINOP_MAP, ...binops },\n    unops: { ...UNOP_MAP, ...unops },\n    get: (scope, name) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return 0;\n      }\n      if (get) {\n        return get(scope, name) ?? null;\n      }\n      return vars[name] ?? null;\n    },\n    set: (scope, name, value) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return;\n      }\n      if (set) {\n        return set(scope, name, value);\n      }\n      vars[name] = value;\n      return;\n    },\n    call,\n  };\n}\n\nexport type TExpressionCache = { [key: string]: TExpression };\n\nexport function evaluateExpr(\n  code: string,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope = {},\n  cache: TExpressionCache = {},\n): TExprResult {\n  return {\n    result: executeAst(parseExpr(code, cache), ctx, scope),\n    ctx,\n  };\n}\n\nexport default evaluateExpr;\n\nexport function parseExpr(\n  code: string,\n  cache: TExpressionCache,\n  parser = DEFAULT_PARSER,\n): TExpression {\n  if (!cache[code]) {\n    cache[code] = parser(code.replace(/\\/\\/.*\\n/g, ''));\n  }\n  return cache[code]!;\n}\n\nexport function remapAst(\n  ast: TExpression,\n  res: (ast: TExpression) => TExpression,\n): TExpression {\n  switch (ast.type) {\n    case 'Literal':\n      return res(ast);\n    case 'Identifier':\n      return res(ast);\n    case 'CallExpression':\n      ast.arguments = ast.arguments.map((el) => remapAst(el, res));\n      return res(ast);\n    case 'BinaryExpression':\n      ast.left = remapAst(ast.left, res);\n      ast.right = remapAst(ast.right, res);\n      return res(ast);\n    case 'ConditionalExpression':\n      ast.test = remapAst(ast.test, res);\n      ast.consequent = remapAst(ast.consequent, res);\n      ast.alternate = remapAst(ast.alternate, res);\n      return res(ast);\n    case 'UnaryExpression':\n      ast.argument = remapAst(ast.argument, res);\n      return res(ast);\n    case 'TemplateLiteral':\n      ast.parts = ast.parts.map(([type, value]) => {\n        return type === 'expression'\n          ? [type, remapAst(value, res)]\n          : [type, value];\n      });\n      return res(ast);\n    case 'ComputedProperty':\n      ast.expression = remapAst(ast.expression, res);\n      return res(ast);\n    case 'ArrayLiteral':\n      ast.elements = ast.elements.map((el) => remapAst(el, res));\n      return res(ast);\n    case 'ObjectLiteral':\n      ast.properties = ast.properties.map(({ name, value }) => {\n        return {\n          name: remapAst(name, res),\n          value: value ? remapAst(value, res) : value,\n        };\n      });\n      return res(ast);\n    case 'ArrowFunction':\n      return res(ast);\n  }\n}\n\nexport function genCode(\n  ast: TExpression,\n  res: (ident: string) => string = (s) => s,\n): string {\n  switch (ast.type) {\n    case 'Literal':\n      return res(ast.raw);\n    case 'Identifier':\n      return res(ast.name);\n    case 'CallExpression':\n      return `${res(ast.callee.name)}(${ast.arguments\n        .map((el) => genCode(el, res))\n        .join(', ')})`;\n    case 'BinaryExpression':\n      return `${genCode(ast.left, res)} ${ast.operator} ${genCode(\n        ast.right,\n        res,\n      )}`;\n    case 'ConditionalExpression':\n      return `${genCode(ast.test, res)} ? ${genCode(\n        ast.consequent,\n        res,\n      )} : ${genCode(ast.alternate, res)}`;\n    case 'UnaryExpression':\n      return `${ast.operator}${genCode(ast.argument, res)}`;\n    case 'TemplateLiteral':\n      return (\n        '`' +\n        ast.parts\n          .map(([kind, value]) => {\n            if (kind === 'chunks') {\n              return value; // Hmm...\n            } else {\n              return '${' + genCode(value, res) + '}';\n            }\n          })\n          .join('') +\n        '`'\n      );\n    case 'ComputedProperty':\n      return '[' + genCode(ast.expression, res) + ']';\n    case 'ArrayLiteral':\n      return '[' + ast.elements.map((el) => genCode(el, res)).join(', ') + ']';\n    case 'ObjectLiteral':\n      return (\n        '{' +\n        ast.properties\n          .map((prop) => {\n            if (!prop.value) {\n              return `${genCode(prop.name, res)}`;\n            }\n            return `${genCode(prop.name, res)}: ${genCode(prop.value, res)}`;\n          })\n          .join(', ') +\n        '}'\n      );\n    case 'ArrowFunction':\n      return `(${ast.parameters.map((p) => p.name).join(', ')}) => ${genCode(\n        ast.result,\n        res,\n      )}`;\n  }\n}\n\nexport function rewriteCode(\n  code: string,\n  res: (ident: string) => string,\n  cache: TExpressionCache,\n) {\n  return genCode(parseExpr(code, cache), res);\n}\n\nexport function executeAst(\n  ast: TExpression,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope,\n): TExprValue {\n  switch (ast.type) {\n    case 'Literal':\n      return ast.value;\n    case 'Identifier':\n      const value = ctx.get(scope, ast.name);\n      return value !== undefined ? value : ast.name;\n    case 'CallExpression':\n      const fdef = Object.keys(ctx.funcs).includes(ast.callee.name)\n        ? ctx.funcs[ast.callee.name]\n        : null;\n      if (fdef && fdef.lazy) {\n        return fdef.f(ctx, scope, ...ast.arguments);\n      }\n      const args: TExprValue[] = [];\n      if (fdef && fdef.assignment && ast.arguments.length > 1) {\n        const left = exprToIdentifier(ast.arguments[0]!) ?? '';\n        const right = ast.arguments.slice(1);\n        args.push(left, ...right.map((expr) => executeAst(expr, ctx, scope)));\n      } else {\n        args.push(...ast.arguments.map((expr) => executeAst(expr, ctx, scope)));\n      }\n      if (fdef) {\n        const result = fdef.f(ctx, scope, ...args);\n        return result;\n      }\n      if (ctx.call) {\n        return ctx.call(ctx, scope, ast.callee.name, args);\n      }\n      throw new Error(`Function not found: '${ast.callee.name}'`);\n    case 'BinaryExpression':\n      const binop = Object.keys(ctx.binops).includes(ast.operator)\n        ? ctx.binops[ast.operator]\n        : null;\n      if (binop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: binop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.left, ast.right],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'ConditionalExpression':\n      const result = executeAst(ast.test, ctx, scope);\n      if (toBoolean(result)) {\n        return executeAst(ast.consequent, ctx, scope);\n      }\n      return executeAst(ast.alternate, ctx, scope);\n    case 'UnaryExpression':\n      const unop = Object.keys(ctx.unops).includes(ast.operator)\n        ? ctx.unops[ast.operator]\n        : null;\n      if (unop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: unop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.argument],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'TemplateLiteral':\n      let accum = '';\n      for (let i = 0; i < ast.parts.length; i++) {\n        const [kind, value] = ast.parts[i]!;\n        if (kind === 'chunks') {\n          accum += value;\n        } else if (kind === 'expression') {\n          accum += executeAst(value, ctx, scope) + '';\n        }\n      }\n      return accum;\n    case 'ComputedProperty':\n      return executeAst(ast.expression, ctx, scope);\n    case 'ArrayLiteral':\n      return ast.elements.map((element) => executeAst(element, ctx, scope));\n    case 'ObjectLiteral':\n      const obj = {};\n      for (let i = 0; i < ast.properties.length; i++) {\n        const { name, value } = ast.properties[i]!;\n        let key: string = '';\n        if (name.type === 'ComputedProperty') {\n          key = toString(executeAst(name.expression, ctx, scope));\n        } else if (name.type === 'Identifier') {\n          key = name.name; // Don't evaluate this if 'bare'\n        } else if (name.type === 'Literal') {\n          key = name.value;\n        }\n        obj[key] = executeAst(value ? value : name, ctx, scope);\n      }\n      return obj;\n    case 'ArrowFunction':\n      return {\n        params: ast.parameters.map(({ name }) => name),\n        body: ast.result,\n      } as any;\n    default:\n      console.info(ast);\n      throw new Error(`Syntax error`);\n  }\n}\n\nexport function exprToIdentifier(v: TExpression): string | null {\n  if (v.type === 'Identifier') {\n    return v.name;\n  }\n  return null;\n}\n\nexport function toNumber(v: any, fallback: number = 0): number {\n  if (typeof v === 'boolean') {\n    return v ? 1 : 0;\n  }\n  if (typeof v === 'number') {\n    return isNaN(v) ? fallback : v;\n  }\n  if (typeof v === 'string') {\n    if (v.includes('.')) {\n      return parseFloat(v);\n    }\n    return parseInt(v);\n  }\n  return fallback;\n}\n\nexport function toBoolean(v: TExprValue): boolean {\n  if (!v) {\n    return false;\n  }\n  if (typeof v === 'string' && v.match(/^\\s+$/)) {\n    return false;\n  }\n  if (v === 'false') {\n    return false;\n  }\n  if (v === '0') {\n    return false;\n  }\n  return true;\n}\n\nexport function toString(v: any): string {\n  if (typeof v === 'number') {\n    return v.toString(10);\n  }\n  if (v === true || v === 'true') {\n    return 'true';\n  }\n  if (!v) {\n    return '';\n  }\n  return v + '';\n}\n\nexport function toObject(v: any): TExprObject {\n  if (!v) {\n    return {};\n  }\n  if (v && typeof v === 'object') {\n    return v;\n  }\n  return {};\n}\n\nexport function toArray(v: any): TExprArray {\n  if (!v) {\n    return [];\n  }\n  if (Array.isArray(v)) {\n    return v.map((e) => toScalar(e));\n  }\n  if (v && typeof v === 'object') {\n    return Object.keys(v).map((k) => toScalar(v[k]));\n  }\n  if (\n    typeof v === 'number' ||\n    typeof v === 'string' ||\n    typeof v === 'boolean'\n  ) {\n    return [v];\n  }\n  return [];\n}\n\nexport function toScalar(n: any, radix: number = 10): TExprScalar {\n  if (typeof n === 'number') {\n    return n;\n  }\n  if (typeof n === 'string') {\n    return n;\n  }\n  if (typeof n === 'boolean') {\n    return n;\n  }\n  if (!n) {\n    return null;\n  }\n  if (typeof n === 'object') {\n    return '';\n  }\n  return n + '';\n}\n\nfunction setVar<T extends TExprValue>(\n  ctx: TExprContext,\n  scope: TScope,\n  name: any,\n  value: T,\n): T {\n  const key = toString(name);\n  ctx.set(scope, key, value);\n  return value;\n}\n\nfunction getVar(ctx: TExprContext, scope: TScope, name: any): TExprValue {\n  return ctx.get(scope, name + '') ?? null;\n}\n\nexport const STDLIB: DictOf<TExprFuncDef> = {\n  debug: {\n    f: (ctx, scope, ...args) => {\n      console.debug(...args);\n      return null;\n    },\n  },\n  do: {\n    f(ctx, scope, ...args) {\n      return args[args.length - 1] ?? null;\n    },\n  },\n  present: {\n    f(ctx, scope, v) {\n      return !!v;\n    },\n  },\n  empty: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      return !v;\n    },\n  },\n  blank: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      if (typeof v === 'string' && (!v || v.match(/^\\s+$/))) {\n        return true;\n      }\n      return !v;\n    },\n  },\n  setVar: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(ctx, scope, left, right);\n    },\n  },\n  setAdd: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      const lval = getVar(ctx, scope, left);\n      if (typeof lval === 'string') {\n        return setVar(ctx, scope, left, lval + right + '');\n      }\n      return setVar(ctx, scope, left, toNumber(lval) + toNumber(right));\n    },\n  },\n  setSub: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) - toNumber(right),\n      );\n    },\n  },\n  setMul: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) * toNumber(right),\n      );\n    },\n  },\n  setDiv: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) / toNumber(right),\n      );\n    },\n  },\n  nullCoalesce: {\n    f(ctx, scope, a, b) {\n      return a ?? b;\n    },\n  },\n  unixTimestampNow: {\n    f() {\n      return Date.now();\n    },\n  },\n  unixTimestampForDate: {\n    f(ctx, scope, year, mon, day, hour, min, second) {\n      return new Date(\n        toNumber(year),\n        toNumber(mon),\n        toNumber(day),\n        toNumber(hour),\n        toNumber(min),\n        toNumber(second),\n      ).getTime();\n    },\n  },\n  all: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (!xs[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  any: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (xs[i]) {\n          return true;\n        }\n      }\n      return false;\n    },\n  },\n  some: {\n    f(ctx, scope, xs) {\n      return !!STDLIB['any']!.f(ctx, scope, xs as any);\n    },\n  },\n  none: {\n    f(ctx, scope, xs) {\n      return !STDLIB['any']!.f(ctx, scope, xs as any);\n    },\n  },\n  or: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) || toBoolean(b);\n    },\n  },\n  and: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) && toBoolean(b);\n    },\n  },\n  not: {\n    f(ctx, scope, a) {\n      return !toBoolean(a);\n    },\n  },\n  gt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  gte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  eq: {\n    f(ctx, scope, a, b) {\n      return toString(a) === toString(b);\n    },\n  },\n  neq: {\n    f(ctx, scope, a, b) {\n      return toString(a) !== toString(b);\n    },\n  },\n  rand: {\n    f(ctx) {\n      return ctx.rng();\n    },\n  },\n  randInRange: {\n    f(ctx, scope, min, max) {\n      return ctx.rng() * (Number(max) - Number(min)) + Number(min);\n    },\n  },\n  randInt: {\n    f(ctx) {\n      return Math.floor(ctx.rng() * 10);\n    },\n  },\n  randIntInRange: {\n    f(ctx, scope, min, max) {\n      min = Math.ceil(Number(min));\n      max = Math.floor(Number(max));\n      return Math.floor(ctx.rng() * (max - min + 1)) + min;\n    },\n  },\n  number: {\n    f(ctx, scope, a) {\n      return Number(a);\n    },\n  },\n  isNumeric: {\n    f(ctx, scope, a) {\n      if (typeof a === 'number') {\n        return true;\n      }\n      if (typeof a === 'string') {\n        return isNumeric(a);\n      }\n      return false;\n    },\n  },\n  bitwiseOr: {\n    f(ctx, scope, a, b) {\n      return Number(a) | Number(b);\n    },\n  },\n  bitwiseXor: {\n    f(ctx, scope, a, b) {\n      return Number(a) ^ Number(b);\n    },\n  },\n  bitwiseAnd: {\n    f(ctx, scope, a, b) {\n      return Number(a) & Number(b);\n    },\n  },\n  bitwiseNot: {\n    f(ctx, scope, a) {\n      return ~Number(a);\n    },\n  },\n  bitwiseLeftShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) << Number(b);\n    },\n  },\n  bitwiseRightShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) >> Number(b);\n    },\n  },\n  bitwiseRightshiftUnsigned: {\n    f(ctx, scope, a, b) {\n      return Number(a) >>> Number(b);\n    },\n  },\n  negate: {\n    f(ctx, scope, a) {\n      return -toNumber(a);\n    },\n  },\n  add: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a + b + '';\n      }\n      return toNumber(a) + toNumber(b);\n    },\n  },\n  sub: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) - toNumber(b);\n    },\n  },\n  div: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) / toNumber(b);\n    },\n  },\n  mul: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) * toNumber(b);\n    },\n  },\n  mod: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) % toNumber(b);\n    },\n  },\n  pow: {\n    f(ctx, scope, a, b) {\n      return Math.pow(toNumber(a), toNumber(b));\n    },\n  },\n  abs: {\n    f(ctx, scope, a) {\n      return Math.abs(toNumber(a));\n    },\n  },\n  acos: {\n    f(ctx, scope, a) {\n      return Math.acos(toNumber(a));\n    },\n  },\n  acosh: {\n    f(ctx, scope, a) {\n      return Math.acosh(toNumber(a));\n    },\n  },\n  asin: {\n    f(ctx, scope, a) {\n      return Math.asin(toNumber(a));\n    },\n  },\n  asinh: {\n    f(ctx, scope, a) {\n      return Math.asinh(toNumber(a));\n    },\n  },\n  atan: {\n    f(ctx, scope, a) {\n      return Math.atan(toNumber(a));\n    },\n  },\n  atan2: {\n    f(ctx, scope, a, b) {\n      return Math.atan2(toNumber(a), toNumber(b));\n    },\n  },\n  atanh: {\n    f(ctx, scope, a) {\n      return Math.atanh(toNumber(a));\n    },\n  },\n  cbrt: {\n    f(ctx, scope, a) {\n      return Math.cbrt(toNumber(a));\n    },\n  },\n  ceil: {\n    f(ctx, scope, a) {\n      return Math.ceil(toNumber(a));\n    },\n  },\n  cos: {\n    f(ctx, scope, a) {\n      return Math.cos(toNumber(a));\n    },\n  },\n  cosh: {\n    f(ctx, scope, a) {\n      return Math.cosh(toNumber(a));\n    },\n  },\n  exp: {\n    f(ctx, scope, a) {\n      return Math.exp(toNumber(a));\n    },\n  },\n  floor: {\n    f(ctx, scope, a) {\n      return Math.floor(toNumber(a));\n    },\n  },\n  hypot: {\n    f(ctx, scope, a) {\n      return Math.hypot(toNumber(a));\n    },\n  },\n  log: {\n    f(ctx, scope, a) {\n      return Math.log(toNumber(a));\n    },\n  },\n  log10: {\n    f(ctx, scope, a) {\n      return Math.log10(toNumber(a));\n    },\n  },\n  log2: {\n    f(ctx, scope, a) {\n      return Math.log2(toNumber(a));\n    },\n  },\n  max: {\n    f(ctx, scope, a) {\n      return Math.max(toNumber(a));\n    },\n  },\n  min: {\n    f(ctx, scope, a) {\n      return Math.min(toNumber(a));\n    },\n  },\n  round: {\n    f(ctx, scope, a) {\n      return Math.round(toNumber(a));\n    },\n  },\n  sign: {\n    f(ctx, scope, a) {\n      return Math.sign(toNumber(a));\n    },\n  },\n  sin: {\n    f(ctx, scope, a) {\n      return Math.sin(toNumber(a));\n    },\n  },\n  sinh: {\n    f(ctx, scope, a) {\n      return Math.sinh(toNumber(a));\n    },\n  },\n  sqrt: {\n    f(ctx, scope, a) {\n      return Math.sqrt(toNumber(a));\n    },\n  },\n  tan: {\n    f(ctx, scope, a) {\n      return Math.tan(toNumber(a));\n    },\n  },\n  tanh: {\n    f(ctx, scope, a) {\n      return Math.tanh(toNumber(a));\n    },\n  },\n  trunc: {\n    f(ctx, scope, a) {\n      return Math.trunc(toNumber(a));\n    },\n  },\n  fromCharCode: {\n    f(ctx, scope, a) {\n      return String.fromCharCode(Number(a));\n    },\n  },\n  fromCodePoint: {\n    f(ctx, scope, a) {\n      return String.fromCodePoint(Number(a));\n    },\n  },\n  parseInt: {\n    f(ctx, scope, a, b) {\n      return parseInt(toString(a), Number(b));\n    },\n  },\n  parseFloat: {\n    f(ctx, scope, a) {\n      return parseFloat(toString(a));\n    },\n  },\n  charAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charAt(Number(b));\n    },\n  },\n  charCodeAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charCodeAt(Number(b));\n    },\n  },\n  codePointAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).codePointAt(Number(b)) ?? 0;\n    },\n  },\n  localeCompare: {\n    f(ctx, scope, a, b) {\n      return toString(a).localeCompare(toString(b));\n    },\n  },\n  match: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  matchAll: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  padEnd: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padEnd(Number(b), toString(c ?? ''));\n    },\n  },\n  padStart: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padStart(Number(b), toString(c ?? ''));\n    },\n  },\n  repeat: {\n    f(ctx, scope, a, b) {\n      return toString(a).repeat(Number(b));\n    },\n  },\n  replace: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replace(toString(b), toString(c));\n    },\n  },\n  replaceAll: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replaceAll(toString(b), toString(c));\n    },\n  },\n  startsWith: {\n    f(ctx, scope, a, b) {\n      return toString(a).startsWith(toString(b));\n    },\n  },\n  substring: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).substring(Number(b), Number(c));\n    },\n  },\n  toLowerCase: {\n    f(ctx, scope, a) {\n      return toString(a).toLowerCase();\n    },\n  },\n  toUpperCase: {\n    f(ctx, scope, a) {\n      return toString(a).toUpperCase();\n    },\n  },\n  trim: {\n    f(ctx, scope, a) {\n      return toString(a).trim();\n    },\n  },\n  trimEnd: {\n    f(ctx, scope, a) {\n      return toString(a).trimEnd();\n    },\n  },\n  trimStart: {\n    f(ctx, scope, a) {\n      return toString(a).trimStart();\n    },\n  },\n  clamp: {\n    f(ctx, a, min, max) {\n      return clamp(toNumber(a), toNumber(min), toNumber(max));\n    },\n  },\n  avg: {\n    f(ctx, scope, nn) {\n      return avg(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  sum: {\n    f(ctx, scope, nn) {\n      return sum(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  join: {\n    f(ctx, scope, ss, spacer) {\n      return toArray(ss).join(toString(spacer));\n    },\n  },\n  split: {\n    f(ctx, scope, s, spacer) {\n      return toString(s).split(toString(spacer));\n    },\n  },\n  first: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[0] ?? null;\n      }\n      return toArray(arr)[0] ?? null;\n    },\n  },\n  last: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[arr.length] ?? null;\n      }\n      arr = toArray(arr);\n      return arr[arr.length] ?? null;\n    },\n  },\n  length: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr.length;\n      }\n      return toArray(arr).length;\n    },\n  },\n  concat: {\n    f(ctx, scope, aa, bb) {\n      if (typeof aa === 'string') {\n        return aa + toString(bb);\n      }\n      return [...toArray(aa), ...toArray(bb)];\n    },\n  },\n  endsWith: {\n    f(ctx, scope, a, b, c = '') {\n      if (Array.isArray(a)) {\n        a = a.join(toString(c));\n      }\n      return toString(a).endsWith(toString(b));\n    },\n  },\n  includes: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.includes(toString(b));\n      }\n      return toArray(a).includes(b);\n    },\n  },\n  lastIndexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.lastIndexOf(toString(b));\n      }\n      return toArray(a).lastIndexOf(b);\n    },\n  },\n  indexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.indexOf(toString(b));\n      }\n      return toArray(a).indexOf(b);\n    },\n  },\n  nth: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a[toNumber(b)] ?? null;\n      }\n      return toArray(a)[toNumber(b)] ?? null;\n    },\n  },\n  reverse: {\n    f(ctx, scope, a) {\n      if (typeof a === 'string') {\n        return a.split('').reverse().join('');\n      }\n      return toArray(a).reverse();\n    },\n  },\n  take: {\n    f(ctx, scope, a, n) {\n      if (typeof a === 'string') {\n        return a.slice(0, toNumber(n));\n      }\n      return toArray(a).slice(0, toNumber(n));\n    },\n  },\n  head: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(0, -1);\n    },\n  },\n  tail: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(1);\n    },\n  },\n  slice: {\n    f(ctx, scope, arr, a, b) {\n      if (typeof arr === 'string') {\n        return arr.slice(toNumber(a), toNumber(b));\n      }\n      return toArray(arr).slice(toNumber(a), toNumber(b));\n    },\n  },\n  randEl: {\n    f(ctx, scope, arr) {\n      arr = toArray(arr);\n      const i = STDLIB['randIntInRange']!.f(\n        ctx,\n        scope,\n        0 as any,\n        (arr.length - 1) as any,\n      ) as number;\n      return arr[i] ?? null;\n    },\n  },\n  push: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.push(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  pop: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.pop() ?? null;\n      }\n      return null;\n    },\n  },\n  shift: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.shift() ?? null;\n      }\n      return null;\n    },\n  },\n  unshift: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.unshift(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  keysOf: {\n    f(ctx, scope, obj) {\n      return Object.keys(toObject(obj));\n    },\n  },\n  valuesOf: {\n    f(ctx, scope, obj) {\n      return Object.values(toObject(obj));\n    },\n  },\n  getProperty: {\n    f(ctx, scope, obj, key) {\n      return toObject(obj)[toString(key)] ?? null;\n    },\n  },\n  setProperty: {\n    f(ctx, scope, obj, key, value) {\n      if (obj && typeof obj === 'object') {\n        obj[toString(key)] = value;\n      }\n      return obj;\n    },\n  },\n  map: {\n    f(ctx, scope, arr, mapper) {\n      arr = toArray(arr);\n      const func = asFunc(mapper);\n      if (!func) {\n        return arr;\n      }\n      const { params, body } = func;\n      return arr.map((el, idx, coll) => {\n        const subscope = {\n          ...scope,\n          [params[0] ?? '__element__']: el,\n          [params[1] ?? '__index__']: idx,\n          [params[2] ?? '__collection__']: coll,\n        };\n        return executeAst(\n          body,\n          {\n            ...ctx,\n            get(scope, key) {\n              if (scope[key] !== undefined) {\n                return scope[key] ?? null;\n              }\n              return ctx.get(scope, key);\n            },\n          },\n          subscope,\n        );\n      });\n    },\n  },\n  filter: {\n    f(ctx, scope, arr, mapper) {\n      arr = toArray(arr);\n      const func = asFunc(mapper);\n      if (!func) {\n        return arr;\n      }\n      const { params, body } = func;\n      return arr.filter((el, idx, coll) => {\n        const subscope = {\n          ...scope,\n          [params[0] ?? '__element__']: el,\n          [params[1] ?? '__index__']: idx,\n          [params[2] ?? '__collection__']: coll,\n        };\n        return toBoolean(\n          executeAst(\n            body,\n            {\n              ...ctx,\n              get(scope, key) {\n                if (scope[key] !== undefined) {\n                  return scope[key] ?? null;\n                }\n                return ctx.get(scope, key);\n              },\n            },\n            subscope,\n          ),\n        );\n      });\n    },\n  },\n};\n\nfunction asFunc(v: any): { body: TExpression; params: string[] } | undefined {\n  if (v && typeof v === 'object') {\n    const { params, body } = v as any;\n    if (\n      Array.isArray(params) &&\n      body &&\n      typeof body === 'object' &&\n      typeof body['type'] === 'string'\n    ) {\n      return { body, params };\n    }\n  }\n  return;\n}\n\n// The code below is derived from code at https://github.com/dmaevsky/rd-parse. License:\n// The MIT License (MIT)\n// Copyright 2013 - present Dmitry Maevsky\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst associativity = (binop) => (binop === '**' ? r2l : l2r);\n\nfunction locAt(text, newPos, { pos, line, column }) {\n  while (pos < newPos) {\n    const ch = text[pos++];\n    if (ch === '\\n') {\n      column = 1;\n      line++;\n    } else {\n      column++;\n    }\n  }\n  return { pos, line, column };\n}\n\nconst markSeen = ($) => {\n  if ($.pos > $.lastSeen.pos) {\n    Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen));\n  }\n};\n\nfunction RegexToken(pattern) {\n  return ($) => {\n    markSeen($);\n    const match = pattern.exec($.text.substring($.pos));\n    if (!match) {\n      return $;\n    }\n    const $next = {\n      ...$,\n      pos: $.pos + match[0].length,\n    };\n    for (let i = 1; i < match.length; i++) {\n      $.stack[$next.sp++] = match[i];\n    }\n    return $next;\n  };\n}\n\nfunction StringToken(pattern) {\n  return ($) => {\n    markSeen($);\n    if ($.text.startsWith(pattern, $.pos)) {\n      return {\n        ...$,\n        pos: $.pos + pattern.length,\n      };\n    }\n    return $;\n  };\n}\n\nfunction Use(rule) {\n  if (typeof rule === 'function') {\n    return rule;\n  }\n  if (rule instanceof RegExp) {\n    return RegexToken(rule);\n  }\n  if (typeof rule === 'string') {\n    return StringToken(rule);\n  }\n  throw new Error('Invalid rule');\n}\n\nfunction Ignore(toIgnore, rule) {\n  rule = Use(rule);\n  if (toIgnore) {\n    toIgnore = Ignore(null, Plus(toIgnore));\n  }\n\n  return ($) => {\n    const $cur = toIgnore ? toIgnore($) : $;\n    $.ignore.push(toIgnore);\n    const $next = rule($cur);\n    $.ignore.pop();\n    return $next === $cur ? $ : toIgnore ? toIgnore($next) : $next;\n  };\n}\n\nconst skipIgnored = ($) => {\n  if (!$.ignore.length) {\n    return $;\n  }\n  const toIgnore = $.ignore[$.ignore.length - 1];\n  return toIgnore ? toIgnore($) : $;\n};\n\nfunction All(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    let $cur = $;\n    for (let i = 0; i < rules.length; i++) {\n      const $before = i > 0 ? skipIgnored($cur) : $cur;\n      const $after = rules[i]($before);\n      if ($after === $before) {\n        return $;\n      }\n      if ($after.pos > $before.pos || $after.sp > $before.sp) {\n        $cur = $after;\n      }\n    }\n    return $cur;\n  };\n}\n\nfunction Any(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    for (let i = 0; i < rules.length; i++) {\n      const $next = rules[i]($);\n      if ($next !== $) {\n        return $next;\n      }\n    }\n    return $;\n  };\n}\n\nfunction Plus(rule) {\n  rule = Use(rule);\n  return ($) => {\n    while (true) {\n      const $cur = skipIgnored($);\n      const $next = rule($cur);\n      if ($next === $cur) {\n        return $;\n      }\n      $ = $next;\n    }\n  };\n}\n\nfunction Optional(rule) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next !== $) {\n      return $next;\n    }\n    return { ...$ };\n  };\n}\n\nfunction Node(rule, reducer) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next === $) {\n      return $;\n    }\n    const node = reducer($.stack.slice($.sp, $next.sp), $, $next);\n    $next.sp = $.sp;\n    if (node !== null) {\n      $.stack[$next.sp++] = node;\n    }\n    return $next;\n  };\n}\n\nconst Star = (rule) => Optional(Plus(rule));\n\nconst Y = (proc) => ((x) => proc((y) => x(x)(y)))((x) => proc((y) => x(x)(y)));\n\nconst START = (text, pos = 0) => ({\n  text,\n  ignore: [],\n  stack: [],\n  sp: 0,\n  lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),\n  pos,\n});\n\nfunction Parser(\n  Grammar,\n  pos = 0,\n  partial = false,\n): (text: string) => TExpression {\n  return (text) => {\n    if (typeof text !== 'string') {\n      throw new Error('Parsing function expects a string input');\n    }\n    const $ = START(text, pos);\n    const $next = Grammar($);\n    if ($ === $next || (!partial && $next.pos < text.length)) {\n      throw new Error(\n        `Unexpected token at ${$.lastSeen.line}:${\n          $.lastSeen.column\n        }. Remainder: ${text.slice($.lastSeen.pos)}`,\n      );\n    }\n    return $.stack[0] as unknown as TExpression;\n  };\n}\n\nfunction l2r(parts, $) {\n  let left = parts[0];\n  for (let i = 1; i < parts.length; i += 2) {\n    const [operator, right] = [parts[i].operator, parts[i + 1]];\n    left = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      $,\n      { pos: right.pos + right.text.length },\n    );\n  }\n  return left;\n}\n\nfunction r2l(parts, _, $next) {\n  let right = parts[parts.length - 1];\n  for (let i = parts.length - 2; i >= 0; i -= 2) {\n    const [left, operator] = [parts[i - 1], parts[i].operator];\n    right = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      { pos: left.pos },\n      $next,\n    );\n  }\n  return right;\n}\n\nconst Operator = (Rule) =>\n  Node(Rule, (_, $, $next) => ({\n    $,\n    operator: $.text.substring($.pos, $next.pos),\n  }));\n\nconst srcMap = (obj, $, $next) =>\n  Object.defineProperties(obj, {\n    pos: { writable: true, configurable: true, value: $.pos },\n    text: {\n      writable: true,\n      configurable: true,\n      value: ($.text || $next.text).slice($.pos, $next.pos),\n    },\n  });\n\nconst DefaultGrammar = IgnoreWhitespace(\n  Y((Expression) => {\n    const Identifier = Node(IdentifierToken, ([name]) => ({\n      type: 'Identifier',\n      name,\n    }));\n    const StringLiteral = Node(QuoteToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw.slice(1, -1),\n      raw,\n    }));\n    const NumericLiteral = Node(NumericToken, ([raw]) => ({\n      type: 'Literal',\n      value: +raw,\n      raw,\n    }));\n    const NullLiteral = Node(NullToken, ([raw]) => ({\n      type: 'Literal',\n      value: null,\n      raw,\n    }));\n    const BooleanLiteral = Node(BooleanToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw === 'true',\n      raw,\n    }));\n    const InterpolationChunk = Node(InterpolationChunkToken, ([raw]) => [\n      'chunks',\n      raw,\n    ]);\n    const TemplateInlineExpression = Node(\n      All('${', IgnoreWhitespace(Expression), '}'),\n      ([expression]) => ['expression', expression],\n    );\n    const TemplateLiteral = Node(\n      Ignore(\n        null,\n        All('`', Star(Any(InterpolationChunk, TemplateInlineExpression)), '`'),\n      ),\n      (parts) => ({ type: 'TemplateLiteral', parts }),\n    );\n    const Literal = Any(\n      StringLiteral,\n      NumericLiteral,\n      NullLiteral,\n      BooleanLiteral,\n      TemplateLiteral,\n    );\n    const ArgumentsList = All(Expression, Star(All(',', Expression)));\n    const Arguments = Node(\n      All('(', Optional(All(ArgumentsList, Optional(','))), ')'),\n      (args) => ({\n        args,\n      }),\n    );\n    const ArgumentsExpression = Node(Any(Arguments), ([part], _, $next) => ({\n      part,\n      $next,\n    }));\n    const CompoundExpression = Node(\n      All(Expression, Star(All(',', Expression))),\n      (leafs) =>\n        leafs.length > 1 ? { type: 'CompoundExpression', leafs } : leafs[0],\n    );\n    const ComputedPropertyName = Node(\n      All('[', CompoundExpression, ']'),\n      ([expression]) => ({ type: 'ComputedProperty', expression }),\n    );\n    const PropertyName = Any(\n      Identifier,\n      StringLiteral,\n      NumericLiteral,\n      ComputedPropertyName,\n    );\n    const ShortNotation = Node(Identifier, ([expr], $, $next) =>\n      srcMap({ ...expr, shortNotation: true }, $, $next),\n    );\n    const PropertyDefinition = Node(\n      Any(All(PropertyName, ':', Expression), ShortNotation),\n      ([name, value]) => ({\n        name,\n        value,\n      }),\n    );\n    const PropertyDefinitions = All(\n      PropertyDefinition,\n      Star(All(',', PropertyDefinition)),\n    );\n    const PropertyDefinitionList = Optional(\n      All(PropertyDefinitions, Optional(',')),\n    );\n    const ObjectLiteral = Node(\n      All('{', PropertyDefinitionList, '}'),\n      (properties) => ({ type: 'ObjectLiteral', properties }),\n    );\n    const Element = Any(Expression);\n    const ElementList = All(Element, Star(All(',', Element)));\n    const ArrayLiteral = Node(\n      All('[', Optional(ElementList), ']'),\n      (elements) => ({\n        type: 'ArrayLiteral',\n        elements,\n      }),\n    );\n    const PrimaryExpression = Node(\n      Any(\n        Literal,\n        Identifier,\n        ArrayLiteral,\n        ObjectLiteral,\n        All('(', CompoundExpression, ')'),\n      ),\n      ([expr], $, $next) => srcMap(expr, $, $next),\n    );\n    const CallExpression = Node(\n      All(PrimaryExpression, Star(ArgumentsExpression)),\n      (parts, $, $last) => {\n        return parts.reduce((acc, { part, $next }) => {\n          return srcMap(\n            { type: 'CallExpression', callee: acc, arguments: part.args },\n            $,\n            $next,\n          );\n        });\n      },\n    );\n    const UnaryOperator = Operator(Any('+', '-', '~', '!'));\n    const UnaryExpression = Node(\n      All(Star(UnaryOperator), CallExpression),\n      (parts, _, $next) =>\n        parts.reduceRight((argument, { $, operator }) =>\n          srcMap({ type: 'UnaryExpression', argument, operator }, $, $next),\n        ),\n    );\n    const LogicalExpressionOrExpression = BinaryOperatorPrecedence.reduce(\n      (Expr, BinaryOp) =>\n        Node(\n          All(Expr, Star(All(Operator(BinaryOp), Expr))),\n          associativity(BinaryOp),\n        ),\n      UnaryExpression,\n    );\n    const TernaryExpression = Node(\n      All(\n        LogicalExpressionOrExpression,\n        Optional(All('?', Expression, ':', Expression)),\n      ),\n      ([test, consequent, alternate]) => {\n        return consequent\n          ? { type: 'ConditionalExpression', test, consequent, alternate }\n          : test;\n      },\n    );\n    const BoundName = Node(IdentifierToken, ([name], $, $next) =>\n      srcMap({ type: 'BoundName', name }, $, $next),\n    );\n    const FormalsList = Node(\n      All(BoundName, Star(All(',', BoundName))),\n      (bound) => bound,\n    );\n    const FormalParameters = Node(All('(', All(FormalsList), ')'), (parts) =>\n      parts.reduce((acc, part) => Object.assign(acc, part), []),\n    );\n    const ArrowParameters = Node(\n      Any(BoundName, FormalParameters),\n      ([params]) => params,\n    );\n    const FoolSafe = Node('{', () => {\n      throw new Error(\n        'Object literal returned from the arrow function needs to be enclosed in ()',\n      );\n    });\n    const ArrowResult = Any(FoolSafe, Expression);\n    const ArrowFunction = Node(\n      All(ArrowParameters, '=>', ArrowResult),\n      ([parameters, result]) => ({ type: 'ArrowFunction', parameters, result }),\n    );\n\n    return Node(Any(ArrowFunction, TernaryExpression), ([expr], $, $next) =>\n      srcMap(expr, $, $next),\n    );\n  }),\n);\n\nexport const DEFAULT_PARSER = Parser(DefaultGrammar);\n\nexport function clamp(n: number, min: number = 0, max: number = 1): number {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n}\nexport function avg(nn: number[]): number {\n  if (nn.length < 1) return 0;\n  return sum(nn) / nn.length;\n}\nexport function sum(nn: number[]): number {\n  let n = 0;\n  for (let i = 0; i < nn.length; i++) n += nn[i]!;\n  return n;\n}\n\nexport function isNumeric(a: any): boolean {\n  return !isNaN(parseFloat(a)) && isFinite(a);\n}\n"],"names":["ZExprScalar","z","union","number","string","boolean","null","CONSTS","E","Math","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2","BINOP_MAP","alias","UNOP_MAP","IgnoreWhitespace","Rule","Ignore","QuoteToken","Any","NumericToken","NullToken","BooleanToken","IdentifierToken","InterpolationChunkToken","BinaryOperatorPrecedence","INVALID_IDENT_REGEX","createExprContext","_a","funcs","binops","unops","_b","seed","get","set","call","vars","rng","seedrandom","default","__assign","STDLIB","scope","name","match","value","evaluateExpr","code","ctx","cache","result","executeAst","parseExpr","parser","DEFAULT_PARSER","replace","genCode","ast","res","s","type","raw","concat","callee","arguments","map","el","join","left","operator","right","test","consequent","alternate","argument","parts","kind","expression","elements","properties","prop","parameters","p","undefined","fdef","Object","keys","includes","lazy","f","apply","__spreadArray","args","assignment","length","exprToIdentifier","slice","push","expr","Error","binop","toBoolean","unop","accum","i","value_1","element","obj","_c","value_2","key","toString","params","body","console","info","v","toNumber","fallback","isNaN","parseFloat","parseInt","toObject","toArray","Array","isArray","e","toScalar","k","n","radix","setVar","getVar","debug","_i","do","present","empty","blank","setAdd","lval","setSub","setMul","setDiv","nullCoalesce","a","b","unixTimestampNow","Date","now","unixTimestampForDate","year","mon","day","hour","min","second","getTime","all","xs","any","some","none","or","and","not","gt","gte","lt","lte","eq","neq","rand","randInRange","max","Number","randInt","floor","randIntInRange","ceil","isNumeric","bitwiseOr","bitwiseXor","bitwiseAnd","bitwiseNot","bitwiseLeftShift","bitwiseRightShift","bitwiseRightshiftUnsigned","negate","add","sub","div","mul","mod","pow","abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","cos","cosh","exp","hypot","log","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","fromCharCode","String","fromCodePoint","charAt","charCodeAt","codePointAt","localeCompare","matchAll","padEnd","c","padStart","repeat","replaceAll","startsWith","substring","toLowerCase","toUpperCase","trim","trimEnd","trimStart","clamp","avg","nn","sum","ss","spacer","split","first","arr","last","aa","bb","endsWith","lastIndexOf","indexOf","nth","reverse","take","head","tail","randEl","pop","shift","unshift","keysOf","valuesOf","values","getProperty","setProperty","mapper","func","asFunc","idx","coll","subscope","_d","filter","locAt","text","newPos","pos","line","column","markSeen","$","lastSeen","assign","Use","rule","RegExp","pattern","exec","$next","stack","sp","StringToken","toIgnore","Plus","$cur","ignore","skipIgnored","All","rules","$before","$after","Optional","Node","reducer","node","Star","l2r","srcMap","r2l","_","proc","x","Grammar","partial","Operator","defineProperties","writable","configurable","DefaultGrammar","y","Expression","Identifier","StringLiteral","NumericLiteral","NullLiteral","BooleanLiteral","InterpolationChunk","TemplateInlineExpression","TemplateLiteral","Literal","ArgumentsList","Arguments","ArgumentsExpression","part","CompoundExpression","leafs","PropertyName","ShortNotation","shortNotation","PropertyDefinition","PropertyDefinitions","PropertyDefinitionList","ObjectLiteral","Element","ElementList","ArrayLiteral","PrimaryExpression","CallExpression","$last","reduce","acc","UnaryOperator","UnaryExpression","reduceRight","LogicalExpressionOrExpression","Expr","BinaryOp","TernaryExpression","BoundName","FormalsList","bound","FormalParameters","ArrowParameters","FoolSafe","ArrowFunction","START","isFinite","remapAst"],"mappings":";;;;;0/BAKa,IAAAA,EAAcC,EAACA,EAACC,MAAM,CACjCD,EAAAA,EAAEE,SACFF,EAAAA,EAAEG,SACFH,EAAAA,EAAEI,UACFJ,EAAAA,EAAEK,SAsJSC,EAA6B,CACxCC,EAAGC,KAAKD,EACRE,KAAMD,KAAKC,KACXC,IAAKF,KAAKE,IACVC,OAAQH,KAAKG,OACbC,MAAOJ,KAAKI,MACZC,GAAIL,KAAKK,GACTC,QAASN,KAAKM,QACdC,MAAOP,KAAKO,OAGRC,EAAY,CAChB,KAAM,CAAEC,MAAO,OACf,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,IAAK,CAAEA,MAAO,OACd,MAAO,CAAEA,MAAO,6BAChB,KAAM,CAAEA,MAAO,oBACf,KAAM,CAAEA,MAAO,qBACf,KAAM,CAAEA,MAAO,OACf,KAAM,CAAEA,MAAO,OACf,IAAK,CAAEA,MAAO,MACd,IAAK,CAAEA,MAAO,MACd,MAAO,CAAEA,MAAO,MAChB,MAAO,CAAEA,MAAO,OAChB,KAAM,CAAEA,MAAO,MACf,KAAM,CAAEA,MAAO,OACf,IAAK,CAAEA,MAAO,cACd,IAAK,CAAEA,MAAO,cACd,IAAK,CAAEA,MAAO,aACd,KAAM,CAAEA,MAAO,OACf,KAAM,CAAEA,MAAO,MACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,UACf,KAAM,CAAEA,MAAO,iBAGXC,EAAW,CACf,IAAK,CAAED,MAAO,UACd,IAAK,CAAEA,MAAO,UACd,IAAK,CAAEA,MAAO,cACd,IAAK,CAAEA,MAAO,QAGVE,EAAmB,SAACC,GAAS,OAAAC,EAAO,OAAQD,IAC5CE,EAAaC,EACjB,8BACA,+BAEIC,EAAeD,EACnB,wDACA,0BAEIE,EAAY,YACZC,EAAe,kBACfC,EAAkB,+BAClBC,EAA0B,8BAC1BC,EAA2B,CAC/B,KACAN,EAAI,IAAK,IAAK,KACdA,EAAI,IAAK,KACTA,EAAI,MAAO,KAAM,MACjBA,EAAI,KAAM,KAAM,IAAK,KACrBA,EAAI,MAAO,MAAO,KAAM,MACxB,UACA,IACA,YACA,KACA,KACA,KACAA,EAAI,KAAM,KAAM,KAAM,KAAM,OAGxBO,EAAsB,oCAEtB,SAAUC,EAAkBC,OAChCC,EAAKD,EAAAC,MACLC,EAAMF,EAAAE,OACNC,EAAKH,EAAAG,MACLC,EAAAJ,EAAAK,KAAAA,aAAO,WAAUD,EACjBE,EAAGN,EAAAM,IACHC,EAAGP,EAAAO,IACHC,EAAIR,EAAAQ,KAEEC,EAAsC,GAC5C,MAAO,CACLC,IAAKC,EAAWC,QAAQP,GACxBJ,MAAYY,EAAAA,EAAA,GAAAC,GAAWb,GACvBC,OAAaW,EAAAA,EAAA,GAAA7B,GAAckB,GAC3BC,MAAYU,EAAAA,EAAA,GAAA3B,GAAaiB,GACzBG,IAAK,SAACS,EAAOC,WACX,OAAIA,EAAKC,MAAMnB,GACN,EAELQ,EACyB,QAApBN,EAAAM,EAAIS,EAAOC,UAAS,IAAAhB,EAAAA,EAAA,KAEZ,UAAVS,EAAKO,UAAK,IAAAZ,EAAAA,EAAI,MAEvBG,IAAK,SAACQ,EAAOC,EAAME,GACjB,IAAIF,EAAKC,MAAMnB,GAGf,OAAIS,EACKA,EAAIQ,EAAOC,EAAME,QAE1BT,EAAKO,GAAQE,IAGfV,KAAIA,GAMF,SAAUW,EACdC,EACAC,EACAN,EACAO,GAEA,YAJA,IAAAD,IAAAA,EAAoBtB,EAAkB,UACtC,IAAAgB,IAAAA,EAAkB,SAClB,IAAAO,IAAAA,EAA4B,IAErB,CACLC,OAAQC,EAAWC,EAAUL,EAAME,GAAQD,EAAKN,GAChDM,IAAGA,YAMSI,EACdL,EACAE,EACAI,GAKA,YALA,IAAAA,IAAAA,EAAuBC,IAElBL,EAAMF,KACTE,EAAMF,GAAQM,EAAON,EAAKQ,QAAQ,YAAa,MAE1CN,EAAMF,GAqDC,SAAAS,EACdC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAkC,SAAAC,GAAM,OAAAA,IAEhCF,EAAIG,MACV,IAAK,UACH,OAAOF,EAAID,EAAII,KACjB,IAAK,aACH,OAAOH,EAAID,EAAId,MACjB,IAAK,iBACH,MAAO,GAAGmB,OAAAJ,EAAID,EAAIM,OAAOpB,MAAK,KAAAmB,OAAIL,EAAIO,UACnCC,KAAI,SAACC,GAAO,OAAAV,EAAQU,EAAIR,MACxBS,KAAK,MAAK,KACf,IAAK,mBACH,MAAO,GAAAL,OAAGN,EAAQC,EAAIW,KAAMV,GAAQ,KAAAI,OAAAL,EAAIY,SAAQ,KAAAP,OAAIN,EAClDC,EAAIa,MACJZ,IAEJ,IAAK,wBACH,MAAO,GAAGI,OAAAN,EAAQC,EAAIc,KAAMb,GAAI,OAAAI,OAAMN,EACpCC,EAAIe,WACJd,GACK,OAAAI,OAAAN,EAAQC,EAAIgB,UAAWf,IAChC,IAAK,kBACH,MAAO,GAAGI,OAAAL,EAAIY,iBAAWb,EAAQC,EAAIiB,SAAUhB,IACjD,IAAK,kBACH,MACE,IACAD,EAAIkB,MACDV,KAAI,SAACtC,OAACiD,EAAIjD,EAAA,GAAEkB,EAAKlB,EAAA,GAChB,MAAa,WAATiD,EACK/B,EAEA,KAAOW,EAAQX,EAAOa,GAAO,OAGvCS,KAAK,IACR,IAEJ,IAAK,mBACH,MAAO,IAAMX,EAAQC,EAAIoB,WAAYnB,GAAO,IAC9C,IAAK,eACH,MAAO,IAAMD,EAAIqB,SAASb,KAAI,SAACC,GAAO,OAAAV,EAAQU,EAAIR,MAAMS,KAAK,MAAQ,IACvE,IAAK,gBACH,MACE,IACAV,EAAIsB,WACDd,KAAI,SAACe,GACJ,OAAKA,EAAKnC,MAGH,UAAGW,EAAQwB,EAAKrC,KAAMe,gBAASF,EAAQwB,EAAKnC,MAAOa,IAFjD,GAAAI,OAAGN,EAAQwB,EAAKrC,KAAMe,OAIhCS,KAAK,MACR,IAEJ,IAAK,gBACH,MAAO,IAAIL,OAAAL,EAAIwB,WAAWhB,KAAI,SAACiB,GAAM,OAAAA,EAAEvC,QAAMwB,KAAK,sBAAaX,EAC7DC,EAAIP,OACJQ,cAaQP,EACdM,EACAT,EACAN,SAEA,YAHA,IAAAM,IAAAA,EAAoBtB,EAAkB,KAG9B+B,EAAIG,MACV,IAAK,UACH,OAAOH,EAAIZ,MACb,IAAK,aACH,IAAMA,EAAQG,EAAIf,IAAIS,EAAOe,EAAId,MACjC,YAAiBwC,IAAVtC,EAAsBA,EAAQY,EAAId,KAC3C,IAAK,iBACH,IAAMyC,EAAOC,OAAOC,KAAKtC,EAAIpB,OAAO2D,SAAS9B,EAAIM,OAAOpB,MACpDK,EAAIpB,MAAM6B,EAAIM,OAAOpB,MACrB,KACJ,GAAIyC,GAAQA,EAAKI,KACf,OAAOJ,EAAKK,EAACC,MAANN,EAAIO,EAAA,CAAG3C,EAAKN,GAAUe,EAAIO,WAAW,IAE9C,IAAM4B,EAAqB,GAC3B,GAAIR,GAAQA,EAAKS,YAAcpC,EAAIO,UAAU8B,OAAS,EAAG,CACvD,IAAM1B,EAA0C,QAAnCzC,EAAAoE,EAAiBtC,EAAIO,UAAU,WAAI,IAAArC,EAAAA,EAAI,GAC9C2C,EAAQb,EAAIO,UAAUgC,MAAM,GAClCJ,EAAKK,KAAIP,MAATE,EAAID,EAAA,CAAMvB,GAASE,EAAML,KAAI,SAACiC,GAAS,OAAA/C,EAAW+C,EAAMlD,EAAKN,OAAS,SAEtEkD,EAAKK,KAAIP,MAATE,EAAanC,EAAIO,UAAUC,KAAI,SAACiC,GAAS,OAAA/C,EAAW+C,EAAMlD,EAAKN,OAEjE,GAAI0C,EAEF,OADeA,EAAKK,EAALC,MAAAN,EAAOO,EAAA,CAAA3C,EAAKN,GAAUkD,OAGvC,GAAI5C,EAAIb,KACN,OAAOa,EAAIb,KAAKa,EAAKN,EAAOe,EAAIM,OAAOpB,KAAMiD,GAE/C,MAAM,IAAIO,MAAM,wBAAwBrC,OAAAL,EAAIM,OAAOpB,KAAO,MAC5D,IAAK,mBACH,IAAMyD,EAAQf,OAAOC,KAAKtC,EAAInB,QAAQ0D,SAAS9B,EAAIY,UAC/CrB,EAAInB,OAAO4B,EAAIY,UACf,KACJ,GAAI+B,EACF,OAAOjD,EACL,CACES,KAAM,iBACNG,OAAQ,CACNpB,KAAMyD,EAAMxF,MACZgD,KAAM,cAERI,UAAW,CAACP,EAAIW,KAAMX,EAAIa,QAE5BtB,EACAN,GAGJ,MAAM,IAAIyD,MAAM,wBAAArC,OAAwBL,EAAIY,SAAW,MACzD,IAAK,wBAEH,OAAIgC,EADWlD,EAAWM,EAAIc,KAAMvB,EAAKN,IAEhCS,EAAWM,EAAIe,WAAYxB,EAAKN,GAElCS,EAAWM,EAAIgB,UAAWzB,EAAKN,GACxC,IAAK,kBACH,IAAM4D,EAAOjB,OAAOC,KAAKtC,EAAIlB,OAAOyD,SAAS9B,EAAIY,UAC7CrB,EAAIlB,MAAM2B,EAAIY,UACd,KACJ,GAAIiC,EACF,OAAOnD,EACL,CACES,KAAM,iBACNG,OAAQ,CACNpB,KAAM2D,EAAK1F,MACXgD,KAAM,cAERI,UAAW,CAACP,EAAIiB,WAElB1B,EACAN,GAGJ,MAAM,IAAIyD,MAAM,wBAAArC,OAAwBL,EAAIY,SAAW,MACzD,IAAK,kBAEH,IADA,IAAIkC,EAAQ,GACHC,EAAI,EAAGA,EAAI/C,EAAIkB,MAAMmB,OAAQU,IAAK,CACnC,IAAAzE,EAAgB0B,EAAIkB,MAAM6B,GAAzB5B,EAAI7C,EAAA,GAAE0E,OACA,WAAT7B,EACF2B,GAASE,EACS,eAAT7B,IACT2B,GAASpD,EAAWsD,EAAOzD,EAAKN,GAAS,IAG7C,OAAO6D,EACT,IAAK,mBACH,OAAOpD,EAAWM,EAAIoB,WAAY7B,EAAKN,GACzC,IAAK,eACH,OAAOe,EAAIqB,SAASb,KAAI,SAACyC,GAAY,OAAAvD,EAAWuD,EAAS1D,EAAKN,MAChE,IAAK,gBACH,IAAMiE,EAAM,GACZ,IAASH,EAAI,EAAGA,EAAI/C,EAAIsB,WAAWe,OAAQU,IAAK,CACxC,IAAAI,EAAkBnD,EAAIsB,WAAWyB,GAA/B7D,EAAIiE,EAAAjE,KAAEkE,UACVC,EAAc,GACA,qBAAdnE,EAAKiB,KACPkD,EAAMC,EAAS5D,EAAWR,EAAKkC,WAAY7B,EAAKN,IACzB,eAAdC,EAAKiB,KACdkD,EAAMnE,EAAKA,KACY,YAAdA,EAAKiB,OACdkD,EAAMnE,EAAKE,OAEb8D,EAAIG,GAAO3D,EAAW0D,GAAgBlE,EAAMK,EAAKN,GAEnD,OAAOiE,EACT,IAAK,gBACH,MAAO,CACLK,OAAQvD,EAAIwB,WAAWhB,KAAI,SAACtC,GAAa,OAAPA,EAAAgB,QAClCsE,KAAMxD,EAAIP,QAEd,QAEE,MADAgE,QAAQC,KAAK1D,GACP,IAAI0C,MAAM,iBAIhB,SAAUJ,EAAiBqB,GAC/B,MAAe,eAAXA,EAAExD,KACGwD,EAAEzE,KAEJ,KAGO,SAAA0E,EAASD,EAAQE,GAC/B,YAD+B,IAAAA,IAAAA,EAAoB,GAClC,kBAANF,EACFA,EAAI,EAAI,EAEA,iBAANA,EACFG,MAAMH,GAAKE,EAAWF,EAEd,iBAANA,EACLA,EAAE7B,SAAS,KACNiC,WAAWJ,GAEbK,SAASL,GAEXE,EAGH,SAAUjB,EAAUe,GACxB,QAAKA,KAGY,iBAANA,IAAkBA,EAAExE,MAAM,YAG3B,UAANwE,GAGM,MAANA,IAMA,SAAUL,EAASK,GACvB,MAAiB,iBAANA,EACFA,EAAEL,SAAS,KAEV,IAANK,GAAoB,SAANA,EACT,OAEJA,EAGEA,EAAI,GAFF,GAKL,SAAUM,EAASN,GACvB,OAAKA,GAGDA,GAAkB,iBAANA,EACPA,EAHA,GAQL,SAAUO,EAAQP,GACtB,OAAKA,EAGDQ,MAAMC,QAAQT,GACTA,EAAEnD,KAAI,SAAC6D,GAAM,OAAAC,EAASD,MAE3BV,GAAkB,iBAANA,EACP/B,OAAOC,KAAK8B,GAAGnD,KAAI,SAAC+D,GAAM,OAAAD,EAASX,EAAEY,OAG/B,iBAANZ,GACM,iBAANA,GACM,kBAANA,EAEA,CAACA,GAEH,GAfE,GAkBK,SAAAW,EAASE,EAAQC,GAC/B,MAAiB,iBAAND,GAGM,iBAANA,GAGM,kBAANA,EALFA,EAQJA,EAGY,iBAANA,EACF,GAEFA,EAAI,GALF,KAQX,SAASE,EACPnF,EACAN,EACAC,EACAE,GAEA,IAAMiE,EAAMC,EAASpE,GAErB,OADAK,EAAId,IAAIQ,EAAOoE,EAAKjE,GACbA,EAGT,SAASuF,EAAOpF,EAAmBN,EAAeC,SAChD,OAAgC,QAAzBhB,EAAAqB,EAAIf,IAAIS,EAAOC,EAAO,WAAG,IAAAhB,EAAAA,EAAI,KAGzB,IAAAc,EAA+B,CAC1C4F,MAAO,CACL5C,EAAG,SAACzC,EAAKN,OAAO,IAAOkD,EAAA,GAAA0C,EAAA,EAAPA,EAAOtE,UAAA8B,OAAPwC,IAAA1C,EAAO0C,EAAA,GAAAtE,UAAAsE,GAErB,OADApB,QAAQmB,MAAK3C,MAAbwB,QAAiBtB,GACV,OAGX2C,GAAI,CACF9C,EAAC,SAACzC,EAAKN,aAAckD,EAAA,GAAA0C,EAAA,EAAPA,EAAOtE,UAAA8B,OAAPwC,IAAA1C,EAAO0C,EAAA,GAAAtE,UAAAsE,GACnB,OAAgC,QAAzB3G,EAAAiE,EAAKA,EAAKE,OAAS,UAAM,IAAAnE,EAAAA,EAAA,OAGpC6G,QAAS,CACP/C,EAAE,SAAAzC,EAAKN,EAAO0E,GACZ,QAASA,IAGbqB,MAAO,CACLhD,EAAE,SAAAzC,EAAKN,EAAO0E,GACZ,OAAIQ,MAAMC,QAAQT,GACTA,EAAEtB,OAAS,EAEhBsB,GAAkB,iBAANA,EACP/B,OAAOC,KAAK8B,GAAGtB,OAAS,GAEzBsB,IAGZsB,MAAO,CACLjD,EAAE,SAAAzC,EAAKN,EAAO0E,GACZ,OAAIQ,MAAMC,QAAQT,GACTA,EAAEtB,OAAS,EAEhBsB,GAAkB,iBAANA,EACP/B,OAAOC,KAAK8B,GAAGtB,OAAS,IAEhB,iBAANsB,GAAoBA,IAAKA,EAAExE,MAAM,YAGpCwE,IAGZe,OAAQ,CACNtC,YAAY,EACZJ,WAAEzC,EAAKN,EAAO0B,EAAME,GAClB,OAAO6D,EAAOnF,EAAKN,EAAO0B,EAAME,KAGpCqE,OAAQ,CACN9C,YAAY,EACZJ,WAAEzC,EAAKN,EAAO0B,EAAME,GAClB,IAAMsE,EAAOR,EAAOpF,EAAKN,EAAO0B,GAChC,OACS+D,EAAOnF,EAAKN,EAAO0B,EADR,iBAATwE,EACuBA,EAAOtE,EAAQ,GAEjB+C,EAASuB,GAAQvB,EAAS/C,MAG9DuE,OAAQ,CACNhD,YAAY,EACZJ,WAAEzC,EAAKN,EAAO0B,EAAME,GAClB,OAAO6D,EACLnF,EACAN,EACA0B,EACAiD,EAASe,EAAOpF,EAAKN,EAAO0B,IAASiD,EAAS/C,MAIpDwE,OAAQ,CACNjD,YAAY,EACZJ,WAAEzC,EAAKN,EAAO0B,EAAME,GAClB,OAAO6D,EACLnF,EACAN,EACA0B,EACAiD,EAASe,EAAOpF,EAAKN,EAAO0B,IAASiD,EAAS/C,MAIpDyE,OAAQ,CACNlD,YAAY,EACZJ,WAAEzC,EAAKN,EAAO0B,EAAME,GAClB,OAAO6D,EACLnF,EACAN,EACA0B,EACAiD,EAASe,EAAOpF,EAAKN,EAAO0B,IAASiD,EAAS/C,MAIpD0E,aAAc,CACZvD,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOD,QAAAA,EAAKC,IAGhBC,iBAAkB,CAChB1D,EAAC,WACC,OAAO2D,KAAKC,QAGhBC,qBAAsB,CACpB7D,EAAE,SAAAzC,EAAKN,EAAO6G,EAAMC,EAAKC,EAAKC,EAAMC,EAAKC,GACvC,OAAO,IAAIR,KACT/B,EAASkC,GACTlC,EAASmC,GACTnC,EAASoC,GACTpC,EAASqC,GACTrC,EAASsC,GACTtC,EAASuC,IACTC,YAGNC,IAAK,CACHrE,EAAE,SAAAzC,EAAKN,EAAOqH,GACZ,IAAKnC,MAAMC,QAAQkC,GACjB,QAASA,EAEX,IAAK,IAAIvD,EAAI,EAAGA,EAAIuD,EAAGjE,OAAQU,IAC7B,IAAKuD,EAAGvD,GACN,OAAO,EAGX,OAAO,IAGXwD,IAAK,CACHvE,EAAE,SAAAzC,EAAKN,EAAOqH,GACZ,IAAKnC,MAAMC,QAAQkC,GACjB,QAASA,EAEX,IAAK,IAAIvD,EAAI,EAAGA,EAAIuD,EAAGjE,OAAQU,IAC7B,GAAIuD,EAAGvD,GACL,OAAO,EAGX,OAAO,IAGXyD,KAAM,CACJxE,EAAA,SAAEzC,EAAKN,EAAOqH,GACZ,QAAStH,EAAY,IAAGgD,EAAEzC,EAAKN,EAAOqH,KAG1CG,KAAM,CACJzE,EAAA,SAAEzC,EAAKN,EAAOqH,GACZ,OAAQtH,EAAY,IAAGgD,EAAEzC,EAAKN,EAAOqH,KAGzCI,GAAI,CACF1E,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7C,EAAU4C,IAAM5C,EAAU6C,KAGrCkB,IAAK,CACH3E,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7C,EAAU4C,IAAM5C,EAAU6C,KAGrCmB,IAAK,CACH5E,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAQ5C,EAAU4C,KAGtBqB,GAAI,CACF7E,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlCqB,IAAK,CACH9E,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlCsB,GAAI,CACF/E,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlCuB,IAAK,CACHhF,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlCwB,GAAI,CACFjF,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,KAAOlC,EAASmC,KAGpCyB,IAAK,CACHlF,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,KAAOlC,EAASmC,KAGpC0B,KAAM,CACJnF,WAAEzC,GACA,OAAOA,EAAIX,QAGfwI,YAAa,CACXpF,WAAEzC,EAAKN,EAAOiH,EAAKmB,GACjB,OAAO9H,EAAIX,OAAS0I,OAAOD,GAAOC,OAAOpB,IAAQoB,OAAOpB,KAG5DqB,QAAS,CACPvF,WAAEzC,GACA,OAAO7C,KAAK8K,MAAkB,GAAZjI,EAAIX,SAG1B6I,eAAgB,CACdzF,WAAEzC,EAAKN,EAAOiH,EAAKmB,GAGjB,OAFAnB,EAAMxJ,KAAKgL,KAAKJ,OAAOpB,IACvBmB,EAAM3K,KAAK8K,MAAMF,OAAOD,IACjB3K,KAAK8K,MAAMjI,EAAIX,OAASyI,EAAMnB,EAAM,IAAMA,IAGrD9J,OAAQ,CACN4F,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO8B,OAAO9B,KAGlBmC,UAAW,CACT3F,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,MAAiB,iBAANA,GAGM,iBAANA,GACFmC,GAAUnC,KAKvBoC,UAAW,CACT5F,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO6B,OAAO9B,GAAK8B,OAAO7B,KAG9BoC,WAAY,CACV7F,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO6B,OAAO9B,GAAK8B,OAAO7B,KAG9BqC,WAAY,CACV9F,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO6B,OAAO9B,GAAK8B,OAAO7B,KAG9BsC,WAAY,CACV/F,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAQ8B,OAAO9B,KAGnBwC,iBAAkB,CAChBhG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO6B,OAAO9B,IAAM8B,OAAO7B,KAG/BwC,kBAAmB,CACjBjG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO6B,OAAO9B,IAAM8B,OAAO7B,KAG/ByC,0BAA2B,CACzBlG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO6B,OAAO9B,KAAO8B,OAAO7B,KAGhC0C,OAAQ,CACNnG,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAQ5B,EAAS4B,KAGrB4C,IAAK,CACHpG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAIC,EAAI,GAEV7B,EAAS4B,GAAK5B,EAAS6B,KAGlC4C,IAAK,CACHrG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlC6C,IAAK,CACHtG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlC8C,IAAK,CACHvG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlC+C,IAAK,CACHxG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO7B,EAAS4B,GAAK5B,EAAS6B,KAGlCgD,IAAK,CACHzG,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO/I,KAAK+L,IAAI7E,EAAS4B,GAAI5B,EAAS6B,MAG1CiD,IAAK,CACH1G,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKgM,IAAI9E,EAAS4B,MAG7BmD,KAAM,CACJ3G,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKiM,KAAK/E,EAAS4B,MAG9BoD,MAAO,CACL5G,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKkM,MAAMhF,EAAS4B,MAG/BqD,KAAM,CACJ7G,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKmM,KAAKjF,EAAS4B,MAG9BsD,MAAO,CACL9G,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKoM,MAAMlF,EAAS4B,MAG/BuD,KAAM,CACJ/G,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKqM,KAAKnF,EAAS4B,MAG9BwD,MAAO,CACLhH,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAO/I,KAAKsM,MAAMpF,EAAS4B,GAAI5B,EAAS6B,MAG5CwD,MAAO,CACLjH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKuM,MAAMrF,EAAS4B,MAG/B0D,KAAM,CACJlH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKwM,KAAKtF,EAAS4B,MAG9BkC,KAAM,CACJ1F,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKgL,KAAK9D,EAAS4B,MAG9B2D,IAAK,CACHnH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKyM,IAAIvF,EAAS4B,MAG7B4D,KAAM,CACJpH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK0M,KAAKxF,EAAS4B,MAG9B6D,IAAK,CACHrH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK2M,IAAIzF,EAAS4B,MAG7BgC,MAAO,CACLxF,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK8K,MAAM5D,EAAS4B,MAG/B8D,MAAO,CACLtH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK4M,MAAM1F,EAAS4B,MAG/B+D,IAAK,CACHvH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK6M,IAAI3F,EAAS4B,MAG7BgE,MAAO,CACLxH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK8M,MAAM5F,EAAS4B,MAG/BiE,KAAM,CACJzH,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK+M,KAAK7F,EAAS4B,MAG9B6B,IAAK,CACHrF,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAK2K,IAAIzD,EAAS4B,MAG7BU,IAAK,CACHlE,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKwJ,IAAItC,EAAS4B,MAG7BkE,MAAO,CACL1H,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKgN,MAAM9F,EAAS4B,MAG/BmE,KAAM,CACJ3H,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKiN,KAAK/F,EAAS4B,MAG9BoE,IAAK,CACH5H,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKkN,IAAIhG,EAAS4B,MAG7BqE,KAAM,CACJ7H,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKmN,KAAKjG,EAAS4B,MAG9BsE,KAAM,CACJ9H,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKoN,KAAKlG,EAAS4B,MAG9BuE,IAAK,CACH/H,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKqN,IAAInG,EAAS4B,MAG7BwE,KAAM,CACJhI,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKsN,KAAKpG,EAAS4B,MAG9ByE,MAAO,CACLjI,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO9I,KAAKuN,MAAMrG,EAAS4B,MAG/B0E,aAAc,CACZlI,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO2E,OAAOD,aAAa5C,OAAO9B,MAGtC4E,cAAe,CACbpI,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAO2E,OAAOC,cAAc9C,OAAO9B,MAGvCxB,SAAU,CACRhC,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOzB,SAASV,EAASkC,GAAI8B,OAAO7B,MAGxC1B,WAAY,CACV/B,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAOzB,WAAWT,EAASkC,MAG/B6E,OAAQ,CACNrI,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,GAAG6E,OAAO/C,OAAO7B,MAGrC6E,WAAY,CACVtI,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,GAAG8E,WAAWhD,OAAO7B,MAGzC8E,YAAa,CACXvI,WAAEzC,EAAKN,EAAOuG,EAAGC,SACf,OAAyC,QAAlCvH,EAAAoF,EAASkC,GAAG+E,YAAYjD,OAAO7B,WAAG,IAAAvH,EAAAA,EAAI,IAGjDsM,cAAe,CACbxI,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,GAAGgF,cAAclH,EAASmC,MAG9CtG,MAAO,CACL6C,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,QAASnC,EAASkC,GAAGrG,MAAMmE,EAASmC,MAGxCgF,SAAU,CACRzI,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,QAASnC,EAASkC,GAAGrG,MAAMmE,EAASmC,MAGxCiF,OAAQ,CACN1I,EAAC,SAACzC,EAAKN,EAAOuG,EAAGC,EAAGkF,GAClB,OAAOrH,EAASkC,GAAGkF,OAAOpD,OAAO7B,GAAInC,EAASqH,QAAAA,EAAK,OAGvDC,SAAU,CACR5I,EAAC,SAACzC,EAAKN,EAAOuG,EAAGC,EAAGkF,GAClB,OAAOrH,EAASkC,GAAGoF,SAAStD,OAAO7B,GAAInC,EAASqH,QAAAA,EAAK,OAGzDE,OAAQ,CACN7I,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,GAAGqF,OAAOvD,OAAO7B,MAGrC3F,QAAS,CACPkC,EAAC,SAACzC,EAAKN,EAAOuG,EAAGC,EAAGkF,GAClB,OAAOrH,EAASkC,GAAG1F,QAAQwD,EAASmC,GAAInC,EAASqH,MAGrDG,WAAY,CACV9I,EAAC,SAACzC,EAAKN,EAAOuG,EAAGC,EAAGkF,GAClB,OAAOrH,EAASkC,GAAGsF,WAAWxH,EAASmC,GAAInC,EAASqH,MAGxDI,WAAY,CACV/I,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,OAAOnC,EAASkC,GAAGuF,WAAWzH,EAASmC,MAG3CuF,UAAW,CACThJ,EAAC,SAACzC,EAAKN,EAAOuG,EAAGC,EAAGkF,GAClB,OAAOrH,EAASkC,GAAGwF,UAAU1D,OAAO7B,GAAI6B,OAAOqD,MAGnDM,YAAa,CACXjJ,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAOlC,EAASkC,GAAGyF,gBAGvBC,YAAa,CACXlJ,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAOlC,EAASkC,GAAG0F,gBAGvBC,KAAM,CACJnJ,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAOlC,EAASkC,GAAG2F,SAGvBC,QAAS,CACPpJ,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAOlC,EAASkC,GAAG4F,YAGvBC,UAAW,CACTrJ,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,OAAOlC,EAASkC,GAAG6F,cAGvBC,MAAO,CACLtJ,WAAEzC,EAAKiG,EAAGU,EAAKmB,GACb,OAAOiE,GAAM1H,EAAS4B,GAAI5B,EAASsC,GAAMtC,EAASyD,MAGtDkE,IAAK,CACHvJ,EAAE,SAAAzC,EAAKN,EAAOuM,GACZ,OAAOD,GAAIrH,EAAQsH,GAAIhL,KAAI,SAACgE,GAAM,OAAAZ,EAASY,SAG/CiH,IAAK,CACHzJ,EAAE,SAAAzC,EAAKN,EAAOuM,GACZ,OAAOC,GAAIvH,EAAQsH,GAAIhL,KAAI,SAACgE,GAAM,OAAAZ,EAASY,SAG/C9D,KAAM,CACJsB,WAAEzC,EAAKN,EAAOyM,EAAIC,GAChB,OAAOzH,EAAQwH,GAAIhL,KAAK4C,EAASqI,MAGrCC,MAAO,CACL5J,WAAEzC,EAAKN,EAAOiB,EAAGyL,GACf,OAAOrI,EAASpD,GAAG0L,MAAMtI,EAASqI,MAGtCE,MAAO,CACL7J,EAAE,SAAAzC,EAAKN,EAAO6M,WACZ,MAAmB,iBAARA,EACI,UAANA,EAAI,UAAE,IAAA5N,EAAAA,EAAI,KAEO,QAAnBI,EAAA4F,EAAQ4H,GAAK,UAAM,IAAAxN,EAAAA,EAAA,OAG9ByN,KAAM,CACJ/J,EAAE,SAAAzC,EAAKN,EAAO6M,WACZ,MAAmB,iBAARA,EACiB,QAAnB5N,EAAA4N,EAAIA,EAAIzJ,eAAW,IAAAnE,EAAAA,EAAA,KAGF,QAAnBI,GADPwN,EAAM5H,EAAQ4H,IACHA,EAAIzJ,eAAW,IAAA/D,EAAAA,EAAA,OAG9B+D,OAAQ,CACNL,EAAE,SAAAzC,EAAKN,EAAO6M,GACZ,MAAmB,iBAARA,EACFA,EAAIzJ,OAEN6B,EAAQ4H,GAAKzJ,SAGxBhC,OAAQ,CACN2B,WAAEzC,EAAKN,EAAO+M,EAAIC,GAChB,MAAkB,iBAAPD,EACFA,EAAK1I,EAAS2I,GAEZ/J,EAAAA,EAAA,GAAAgC,EAAQ8H,OAAQ9H,EAAQ+H,IAAK,KAG5CC,SAAU,CACRlK,EAAC,SAACzC,EAAKN,EAAOuG,EAAGC,EAAGkF,GAIlB,YAJkB,IAAAA,IAAAA,EAAM,IACpBxG,MAAMC,QAAQoB,KAChBA,EAAIA,EAAE9E,KAAK4C,EAASqH,KAEfrH,EAASkC,GAAG0G,SAAS5I,EAASmC,MAGzC3D,SAAU,CACRE,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAE1D,SAASwB,EAASmC,IAEtBvB,EAAQsB,GAAG1D,SAAS2D,KAG/B0G,YAAa,CACXnK,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAE2G,YAAY7I,EAASmC,IAEzBvB,EAAQsB,GAAG2G,YAAY1G,KAGlC2G,QAAS,CACPpK,WAAEzC,EAAKN,EAAOuG,EAAGC,GACf,MAAiB,iBAAND,EACFA,EAAE4G,QAAQ9I,EAASmC,IAErBvB,EAAQsB,GAAG4G,QAAQ3G,KAG9B4G,IAAK,CACHrK,WAAEzC,EAAKN,EAAOuG,EAAGC,WACf,MAAiB,iBAAND,EACgB,QAAlBtH,EAAAsH,EAAE5B,EAAS6B,WAAO,IAAAvH,EAAAA,EAAA,KAEG,QAAvBI,EAAA4F,EAAQsB,GAAG5B,EAAS6B,WAAG,IAAAnH,EAAAA,EAAI,OAGtCgO,QAAS,CACPtK,EAAE,SAAAzC,EAAKN,EAAOuG,GACZ,MAAiB,iBAANA,EACFA,EAAEoG,MAAM,IAAIU,UAAU5L,KAAK,IAE7BwD,EAAQsB,GAAG8G,YAGtBC,KAAM,CACJvK,WAAEzC,EAAKN,EAAOuG,EAAGhB,GACf,MAAiB,iBAANgB,EACFA,EAAEjD,MAAM,EAAGqB,EAASY,IAEtBN,EAAQsB,GAAGjD,MAAM,EAAGqB,EAASY,MAGxCgI,KAAM,CACJxK,EAAE,SAAAzC,EAAKN,EAAO6M,GACZ,OAAO5H,EAAQ4H,GAAKvJ,MAAM,GAAI,KAGlCkK,KAAM,CACJzK,EAAE,SAAAzC,EAAKN,EAAO6M,GACZ,OAAO5H,EAAQ4H,GAAKvJ,MAAM,KAG9BA,MAAO,CACLP,EAAC,SAACzC,EAAKN,EAAO6M,EAAKtG,EAAGC,GACpB,MAAmB,iBAARqG,EACFA,EAAIvJ,MAAMqB,EAAS4B,GAAI5B,EAAS6B,IAElCvB,EAAQ4H,GAAKvJ,MAAMqB,EAAS4B,GAAI5B,EAAS6B,MAGpDiH,OAAQ,CACN1K,EAAA,SAAEzC,EAAKN,EAAO6M,SAQZ,OAAa,WAPbA,EAAM5H,EAAQ4H,IACJ9M,EAAuB,eAAGgD,EAClCzC,EACAN,EACA,EACC6M,EAAIzJ,OAAS,WAEH,IAAAnE,EAAAA,EAAI,OAGrBsE,KAAM,CACJR,WAAEzC,EAAKN,EAAO6M,EAAK1M,GACjB,OAAI+E,MAAMC,QAAQ0H,IAChBA,EAAItJ,KAAKpD,GACF0M,EAAIzJ,SAEL,IAGZsK,IAAK,CACH3K,EAAE,SAAAzC,EAAKN,EAAO6M,SACZ,OAAI3H,MAAMC,QAAQ0H,IACA,UAATA,EAAIa,aAAK,IAAAzO,EAAAA,EAEX,OAGX0O,MAAO,CACL5K,EAAE,SAAAzC,EAAKN,EAAO6M,SACZ,OAAI3H,MAAMC,QAAQ0H,IACE,UAAXA,EAAIc,eAAO,IAAA1O,EAAAA,EAEb,OAGX2O,QAAS,CACP7K,WAAEzC,EAAKN,EAAO6M,EAAK1M,GACjB,OAAI+E,MAAMC,QAAQ0H,IAChBA,EAAIe,QAAQzN,GACL0M,EAAIzJ,SAEL,IAGZyK,OAAQ,CACN9K,EAAE,SAAAzC,EAAKN,EAAOiE,GACZ,OAAOtB,OAAOC,KAAKoC,EAASf,MAGhC6J,SAAU,CACR/K,EAAE,SAAAzC,EAAKN,EAAOiE,GACZ,OAAOtB,OAAOoL,OAAO/I,EAASf,MAGlC+J,YAAa,CACXjL,WAAEzC,EAAKN,EAAOiE,EAAKG,SACjB,OAAmC,QAA5BnF,EAAA+F,EAASf,GAAKI,EAASD,WAAK,IAAAnF,EAAAA,EAAI,OAG3CgP,YAAa,CACXlL,EAAC,SAACzC,EAAKN,EAAOiE,EAAKG,EAAKjE,GAItB,OAHI8D,GAAsB,iBAARA,IAChBA,EAAII,EAASD,IAAQjE,GAEhB8D,IAGX1C,IAAK,CACHwB,WAAEzC,EAAKN,EAAO6M,EAAKqB,GACjBrB,EAAM5H,EAAQ4H,GACd,IAAMsB,EAAOC,EAAOF,GACpB,IAAKC,EACH,OAAOtB,EAED,IAAAvI,EAAiB6J,EAAI7J,OAAbC,EAAS4J,EAAI5J,KAC7B,OAAOsI,EAAItL,KAAI,SAACC,EAAI6M,EAAKC,eACjBC,EAAQzO,EAAAA,EAAA,GACTE,KAAKf,EAAA,cACPqF,EAAO,kBAAM,eAAgB9C,EAAEvC,EAClB,UAAbqF,EAAO,UAAM,IAAAJ,EAAAA,EAAA,aAAcmK,IACd,QAAbG,EAAAlK,EAAO,UAAM,IAAAkK,EAAAA,EAAA,kBAAmBF,MAEnC,OAAO7N,EACL8D,EAEKzE,EAAAA,EAAA,GAAAQ,IACHf,IAAG,SAACS,EAAOoE,SACT,YAAmB3B,IAAfzC,EAAMoE,GACS,UAAVpE,EAAMoE,UAAI,IAAAnF,EAAAA,EAAI,KAEhBqB,EAAIf,IAAIS,EAAOoE,MAG1BmK,QAKRE,OAAQ,CACN1L,WAAEzC,EAAKN,EAAO6M,EAAKqB,GACjBrB,EAAM5H,EAAQ4H,GACd,IAAMsB,EAAOC,EAAOF,GACpB,IAAKC,EACH,OAAOtB,EAED,IAAAvI,EAAiB6J,EAAI7J,OAAbC,EAAS4J,EAAI5J,KAC7B,OAAOsI,EAAI4B,QAAO,SAACjN,EAAI6M,EAAKC,eACpBC,EAAQzO,EAAAA,EAAA,GACTE,KAAKf,EAAA,cACPqF,EAAO,kBAAM,eAAgB9C,EAAEvC,EAClB,UAAbqF,EAAO,UAAM,IAAAJ,EAAAA,EAAA,aAAcmK,IACd,QAAbG,EAAAlK,EAAO,UAAM,IAAAkK,EAAAA,EAAA,kBAAmBF,MAEnC,OAAO3K,EACLlD,EACE8D,EAAIzE,EAAAA,EAAA,GAECQ,GAAG,CACNf,IAAG,SAACS,EAAOoE,SACT,YAAmB3B,IAAfzC,EAAMoE,GACS,UAAVpE,EAAMoE,UAAI,IAAAnF,EAAAA,EAAI,KAEhBqB,EAAIf,IAAIS,EAAOoE,MAG1BmK,UAQZ,SAASH,EAAO1J,GACd,GAAIA,GAAkB,iBAANA,EAAgB,CACxB,IAAAzF,EAAmByF,EAAjBJ,WAAQC,SAChB,GACEW,MAAMC,QAAQb,IACdC,GACgB,iBAATA,GACiB,iBAAjBA,EAAW,KAElB,MAAO,CAAEA,KAAIA,EAAED,OAAMA,IAe3B,SAASoK,EAAMC,EAAMC,EAAQ3P,GAC3B,IAD6B,IAAA4P,QAAKC,EAAI7P,EAAA6P,KAAEC,EAAM9P,EAAA8P,OACvCF,EAAMD,GAAQ,CAER,OADAD,EAAKE,MAEdE,EAAS,EACTD,KAEAC,IAGJ,MAAO,CAAEF,IAAGA,EAAEC,OAAMC,OAAMA,GAG5B,IAAMC,EAAW,SAACC,GACZA,EAAEJ,IAAMI,EAAEC,SAASL,KACrBlM,OAAOwM,OAAOF,EAAEC,SAAUR,EAAMO,EAAEN,KAAMM,EAAEJ,IAAKI,EAAEC,YAmCrD,SAASE,EAAIC,GACX,GAAoB,mBAATA,EACT,OAAOA,EAET,GAAIA,aAAgBC,OAClB,OApCgBC,EAoCEF,EAnCb,SAACJ,GACND,EAASC,GACT,IAAM/O,EAAQqP,EAAQC,KAAKP,EAAEN,KAAK5C,UAAUkD,EAAEJ,MAC9C,IAAK3O,EACH,OAAO+O,EAMT,IAJA,IAAMQ,EACD3P,EAAAA,EAAA,GAAAmP,GACH,CAAAJ,IAAKI,EAAEJ,IAAM3O,EAAM,GAAGkD,SAEfU,EAAI,EAAGA,EAAI5D,EAAMkD,OAAQU,IAChCmL,EAAES,MAAMD,EAAME,MAAQzP,EAAM4D,GAE9B,OAAO2L,GAdX,IAAoBF,EAsClB,GAAoB,iBAATF,EACT,OArBJ,SAAqBE,GACnB,OAAO,SAACN,GAEN,OADAD,EAASC,GACLA,EAAEN,KAAK7C,WAAWyD,EAASN,EAAEJ,KAE1B/O,EAAAA,EAAA,GAAAmP,GACH,CAAAJ,IAAKI,EAAEJ,IAAMU,EAAQnM,SAGlB6L,GAYAW,CAAYP,GAErB,MAAM,IAAI5L,MAAM,gBAGlB,SAASnF,EAAOuR,EAAUR,GAMxB,OALAA,EAAOD,EAAIC,GACPQ,IACFA,EAAWvR,EAAO,KAAMwR,EAAKD,KAGxB,SAACZ,GACN,IAAMc,EAAOF,EAAWA,EAASZ,GAAKA,EACtCA,EAAEe,OAAOzM,KAAKsM,GACd,IAAMJ,EAAQJ,EAAKU,GAEnB,OADAd,EAAEe,OAAOtC,MACF+B,IAAUM,EAAOd,EAAIY,EAAWA,EAASJ,GAASA,GAI7D,IAAMQ,EAAc,SAAChB,GACnB,IAAKA,EAAEe,OAAO5M,OACZ,OAAO6L,EAET,IAAMY,EAAWZ,EAAEe,OAAOf,EAAEe,OAAO5M,OAAS,GAC5C,OAAOyM,EAAWA,EAASZ,GAAKA,GAGlC,SAASiB,QAAI,IAAQC,EAAA,GAAAvK,EAAA,EAARA,EAAQtE,UAAA8B,OAARwC,IAAAuK,EAAQvK,GAAAtE,UAAAsE,GAEnB,OADAuK,EAAQA,EAAM5O,IAAI6N,GACX,SAACH,GAEN,IADA,IAAIc,EAAOd,EACFnL,EAAI,EAAGA,EAAIqM,EAAM/M,OAAQU,IAAK,CACrC,IAAMsM,EAAUtM,EAAI,EAAImM,EAAYF,GAAQA,EACtCM,EAASF,EAAMrM,GAAGsM,GACxB,GAAIC,IAAWD,EACb,OAAOnB,GAELoB,EAAOxB,IAAMuB,EAAQvB,KAAOwB,EAAOV,GAAKS,EAAQT,MAClDI,EAAOM,GAGX,OAAON,GAIX,SAASvR,QAAI,IAAQ2R,EAAA,GAAAvK,EAAA,EAARA,EAAQtE,UAAA8B,OAARwC,IAAAuK,EAAQvK,GAAAtE,UAAAsE,GAEnB,OADAuK,EAAQA,EAAM5O,IAAI6N,GACX,SAACH,GACN,IAAK,IAAInL,EAAI,EAAGA,EAAIqM,EAAM/M,OAAQU,IAAK,CACrC,IAAM2L,EAAQU,EAAMrM,GAAGmL,GACvB,GAAIQ,IAAUR,EACZ,OAAOQ,EAGX,OAAOR,GAIX,SAASa,EAAKT,GAEZ,OADAA,EAAOD,EAAIC,GACJ,SAACJ,GACN,OAAa,CACX,IAAMc,EAAOE,EAAYhB,GACnBQ,EAAQJ,EAAKU,GACnB,GAAIN,IAAUM,EACZ,OAAOd,EAETA,EAAIQ,IAKV,SAASa,EAASjB,GAEhB,OADAA,EAAOD,EAAIC,GACJ,SAACJ,GACN,IAAMQ,EAAQJ,EAAKJ,GACnB,OAAIQ,IAAUR,EACLQ,EAET3P,EAAA,GAAYmP,IAIhB,SAASsB,EAAKlB,EAAMmB,GAElB,OADAnB,EAAOD,EAAIC,GACJ,SAACJ,GACN,IAAMQ,EAAQJ,EAAKJ,GACnB,GAAIQ,IAAUR,EACZ,OAAOA,EAET,IAAMwB,EAAOD,EAAQvB,EAAES,MAAMpM,MAAM2L,EAAEU,GAAIF,EAAME,IAAKV,EAAGQ,GAKvD,OAJAA,EAAME,GAAKV,EAAEU,GACA,OAATc,IACFxB,EAAES,MAAMD,EAAME,MAAQc,GAEjBhB,GAIX,IAAMiB,EAAO,SAACrB,GAAS,OAAAiB,EAASR,EAAKT,KAmCrC,SAASsB,EAAI1O,EAAOgN,GAElB,IADA,IAAIvN,EAAOO,EAAM,GACR6B,EAAI,EAAGA,EAAI7B,EAAMmB,OAAQU,GAAK,EAAG,CAClC,IAAA7E,EAAoB,CAACgD,EAAM6B,GAAGnC,SAAUM,EAAM6B,EAAI,IAAvClC,EAAK3C,EAAA,GACtByC,EAAOkP,GACL,CACE1P,KAAM,mBACNQ,KAAIA,EACJC,SALW1C,EAAA,GAMX2C,MAAKA,GAEPqN,EACA,CAAEJ,IAAKjN,EAAMiN,IAAMjN,EAAM+M,KAAKvL,SAGlC,OAAO1B,EAGT,SAASmP,EAAI5O,EAAO6O,EAAGrB,GAErB,IADA,IAAI7N,EAAQK,EAAMA,EAAMmB,OAAS,GACxBU,EAAI7B,EAAMmB,OAAS,EAAGU,GAAK,EAAGA,GAAK,EAAG,CACvC,IAAA7E,EAAmB,CAACgD,EAAM6B,EAAI,GAAI7B,EAAM6B,GAAGnC,UAA1CD,EAAIzC,EAAA,GACX2C,EAAQgP,GACN,CACE1P,KAAM,mBACNQ,KAAIA,EACJC,SALiB1C,EAAA,GAMjB2C,MAAKA,GAEP,CAAEiN,IAAKnN,EAAKmN,KACZY,GAGJ,OAAO7N,EAGT,IArEWmP,EAAWC,EAYpBC,EACApC,EACAqC,EAuDIC,GAAW,SAAC9S,GAChB,OAAAkS,EAAKlS,GAAM,SAACyS,EAAG7B,EAAGQ,GAAU,MAAC,CAC3BR,EAACA,EACDtN,SAAUsN,EAAEN,KAAK5C,UAAUkD,EAAEJ,IAAKY,EAAMZ,UAGtC+B,GAAS,SAAC3M,EAAKgL,EAAGQ,GACtB,OAAA9M,OAAOyO,iBAAiBnN,EAAK,CAC3B4K,IAAK,CAAEwC,UAAU,EAAMC,cAAc,EAAMnR,MAAO8O,EAAEJ,KACpDF,KAAM,CACJ0C,UAAU,EACVC,cAAc,EACdnR,OAAQ8O,EAAEN,MAAQc,EAAMd,MAAMrL,MAAM2L,EAAEJ,IAAKY,EAAMZ,SAIjD0C,GAAiBnT,GArFD4S,EAA4B,SAACA,GAAM,OAAAD,GAAK,SAACS,GAAM,OAAAR,EAAEA,EAAFA,CAAKQ,QAA/DT,EAsFP,SAACU,GACD,IAAMC,EAAanB,EAAK3R,GAAiB,SAACK,GAAW,MAAC,CACpDiC,KAAM,aACNjB,KAF6ChB,EAAA,OAIzC0S,EAAgBpB,EAAKhS,GAAY,SAACU,GAAC,IAAAkC,EAAGlC,EAAA,GAAM,MAAC,CACjDiC,KAAM,UACNf,MAAOgB,EAAImC,MAAM,GAAI,GACrBnC,IAAGA,MAECyQ,EAAiBrB,EAAK9R,GAAc,SAACQ,GAAC,IAAAkC,EAAGlC,EAAA,GAAM,MAAC,CACpDiC,KAAM,UACNf,OAAQgB,EACRA,IAAGA,MAEC0Q,EAActB,EAAK7R,GAAW,SAACO,GAAU,MAAC,CAC9CiC,KAAM,UACNf,MAAO,KACPgB,IAHuClC,EAAA,OAKnC6S,EAAiBvB,EAAK5R,GAAc,SAACM,GAAC,IAAAkC,EAAGlC,EAAA,GAAM,MAAC,CACpDiC,KAAM,UACNf,MAAe,SAARgB,EACPA,IAAGA,MAEC4Q,EAAqBxB,EAAK1R,GAAyB,SAACI,GAAU,MAAA,CAClE,SAD4DA,EAAA,OAIxD+S,EAA2BzB,EAC/BL,EAAI,KAAM9R,EAAiBqT,GAAa,MACxC,SAACxS,GAAiB,MAAA,CAAC,aAAPA,EAAA,OAERgT,EAAkB1B,EACtBjS,EACE,KACA4R,EAAI,IAAKQ,EAAKlS,EAAIuT,EAAoBC,IAA4B,OAEpE,SAAC/P,GAAU,OAAGf,KAAM,kBAAmBe,MAAKA,MAExCiQ,EAAU1T,EACdmT,EACAC,EACAC,EACAC,EACAG,GAEIE,EAAgBjC,EAAIuB,EAAYf,EAAKR,EAAI,IAAKuB,KAC9CW,EAAY7B,EAChBL,EAAI,IAAKI,EAASJ,EAAIiC,EAAe7B,EAAS,OAAQ,MACtD,SAACpN,GAAS,MAAC,CACTA,KAAIA,MAGFmP,EAAsB9B,EAAK/R,EAAI4T,IAAY,SAACnT,EAAQ6R,EAAGrB,GAAU,MAAC,CACtE6C,KADqDrT,EAAA,GAErDwQ,MAAKA,MAED8C,EAAqBhC,EACzBL,EAAIuB,EAAYf,EAAKR,EAAI,IAAKuB,MAC9B,SAACe,GACC,OAAAA,EAAMpP,OAAS,EAAI,CAAElC,KAAM,qBAAsBsR,SAAUA,EAAM,MAM/DC,EAAejU,EACnBkT,EACAC,EACAC,EAP2BrB,EAC3BL,EAAI,IAAKqC,EAAoB,MAC7B,SAACtT,GAAiB,MAAA,CAAGiC,KAAM,mBAAoBiB,WAAnClD,EAAA,QAQRyT,EAAgBnC,EAAKmB,GAAY,SAACzS,EAAQgQ,EAAGQ,GAAV,IAAAjM,EAAIvE,EAAA,GAC3C,OAAA2R,GAAY9Q,EAAAA,EAAA,GAAA0D,GAAM,CAAAmP,eAAe,IAAQ1D,EAAGQ,MAExCmD,EAAqBrC,EACzB/R,EAAI0R,EAAIuC,EAAc,IAAKhB,GAAaiB,IACxC,SAACzT,GAAkB,MAAC,CAClBgB,KADIhB,EAAA,GAEJkB,MAFWlB,EAAA,OAKT4T,EAAsB3C,EAC1B0C,EACAlC,EAAKR,EAAI,IAAK0C,KAEVE,EAAyBxC,EAC7BJ,EAAI2C,EAAqBvC,EAAS,OAE9ByC,EAAgBxC,EACpBL,EAAI,IAAK4C,EAAwB,MACjC,SAACzQ,GAAe,MAAA,CAAGnB,KAAM,gBAAiBmB,WAAUA,MAEhD2Q,EAAUxU,EAAIiT,GACdwB,EAAc/C,EAAI8C,EAAStC,EAAKR,EAAI,IAAK8C,KACzCE,EAAe3C,EACnBL,EAAI,IAAKI,EAAS2C,GAAc,MAChC,SAAC7Q,GAAa,MAAC,CACblB,KAAM,eACNkB,SAAQA,MAGN+Q,EAAoB5C,EACxB/R,EACE0T,EACAR,EACAwB,EACAH,EACA7C,EAAI,IAAKqC,EAAoB,OAE/B,SAACtT,EAAQgQ,EAAGQ,GAAV,IAAAjM,EAAIvE,EAAA,GAAgB,OAAA2R,GAAOpN,EAAMyL,EAAGQ,MAElC2D,EAAiB7C,EACrBL,EAAIiD,EAAmBzC,EAAK2B,KAC5B,SAACpQ,EAAOgN,EAAGoE,GACT,OAAOpR,EAAMqR,QAAO,SAACC,EAAKtU,OAAEqT,EAAIrT,EAAAqT,KAAE7C,EAAKxQ,EAAAwQ,MACrC,OAAOmB,GACL,CAAE1P,KAAM,iBAAkBG,OAAQkS,EAAKjS,UAAWgR,EAAKpP,MACvD+L,EACAQ,SAKF+D,EAAgBrC,GAAS3S,EAAI,IAAK,IAAK,IAAK,MAC5CiV,EAAkBlD,EACtBL,EAAIQ,EAAK8C,GAAgBJ,IACzB,SAACnR,EAAO6O,EAAGrB,GACT,OAAAxN,EAAMyR,aAAY,SAAC1R,EAAU/C,OAAEgQ,EAAChQ,EAAAgQ,EAAEtN,EAAQ1C,EAAA0C,SACxC,OAAAiP,GAAO,CAAE1P,KAAM,kBAAmBc,SAAQA,EAAEL,SAAQA,GAAIsN,EAAGQ,SAG3DkE,EAAgC7U,EAAyBwU,QAC7D,SAACM,EAAMC,GACL,OAAAtD,EACEL,EAAI0D,EAAMlD,EAAKR,EAAIiB,GAAS0C,GAAWD,KAhYL,OAiYpBC,EAjY2BhD,EAAMF,KAmYnD8C,GAEIK,EAAoBvD,EACxBL,EACEyD,EACArD,EAASJ,EAAI,IAAKuB,EAAY,IAAKA,MAErC,SAACxS,GAAC,IAAA4C,OAAMC,EAAU7C,EAAA,GAAE8C,EAAS9C,EAAA,GAC3B,OAAO6C,EACH,CAAEZ,KAAM,wBAAyBW,KAAIA,EAAEC,WAAUA,EAAEC,aACnDF,KAGFkS,EAAYxD,EAAK3R,GAAiB,SAACK,EAAQgQ,EAAGQ,GAAV,IAAAxP,EAAIhB,EAAA,GAC5C,OAAA2R,GAAO,CAAE1P,KAAM,YAAajB,KAAIA,GAAIgP,EAAGQ,MAEnCuE,EAAczD,EAClBL,EAAI6D,EAAWrD,EAAKR,EAAI,IAAK6D,MAC7B,SAACE,GAAU,OAAAA,KAEPC,EAAmB3D,EAAKL,EAAI,IAAKA,EAAI8D,GAAc,MAAM,SAAC/R,GAC9D,OAAAA,EAAMqR,QAAO,SAACC,EAAKjB,GAAS,OAAA3P,OAAOwM,OAAOoE,EAAKjB,KAAO,OAElD6B,EAAkB5D,EACtB/R,EAAIuV,EAAWG,IACf,SAACjV,GAAa,OAANA,EAAA,MAEJmV,EAAW7D,EAAK,KAAK,WACzB,MAAM,IAAI9M,MACR,iFAIE4Q,EAAgB9D,EACpBL,EAAIiE,EAAiB,KAFH3V,EAAI4V,EAAU3C,KAGhC,SAACxS,GAAyB,MAAC,CAAEiC,KAAM,gBAAiBqB,WAAxCtD,EAAA,GAAoDuB,OAA5CvB,EAAA,OAGtB,OAAOsR,EAAK/R,EAAI6V,EAAeP,IAAoB,SAAC7U,EAAQgQ,EAAGQ,GAAV,IAAAjM,EAAIvE,EAAA,GACvD,OAAA2R,GAAOpN,EAAMyL,EAAGQ,SAxQW,SAAC+B,GAAM,OAAAR,EAAEA,EAAFA,CAAKQ,QA6QhC5Q,IAjQXqQ,EAiQmCM,QAhQnC,IAAA1C,IAAAA,EAAO,QACP,IAAAqC,IAAAA,GAAe,GAER,SAACvC,GACN,GAAoB,iBAATA,EACT,MAAM,IAAIlL,MAAM,2CAElB,IAAMwL,EAlBI,SAACN,EAAME,GAAY,YAAZ,IAAAA,IAAAA,EAAO,GAAM,CAChCF,KAAIA,EACJqB,OAAQ,GACRN,MAAO,GACPC,GAAI,EACJT,SAAUR,EAAMC,EAAME,EAAK,CAAEA,IAAK,EAAGC,KAAM,EAAGC,OAAQ,IACtDF,IAAGA,GAYSyF,CAAM3F,EAAME,GAChBY,EAAQwB,EAAQhC,GACtB,GAAIA,IAAMQ,IAAWyB,GAAWzB,EAAMZ,IAAMF,EAAKvL,OAC/C,MAAM,IAAIK,MACR,uBAAArC,OAAuB6N,EAAEC,SAASJ,KAAI,KAAA1N,OACpC6N,EAAEC,SAASH,OAAM,iBAAA3N,OACHuN,EAAKrL,MAAM2L,EAAEC,SAASL,OAG1C,OAAOI,EAAES,MAAM,cAkPHrD,GAAM9G,EAAW0B,EAAiBmB,GAChD,YAD+B,IAAAnB,IAAAA,EAAe,QAAE,IAAAmB,IAAAA,EAAe,GAC3D7C,EAAI0B,EAAYA,EAChB1B,EAAI6C,EAAYA,EACb7C,EAEH,SAAU+G,GAAIC,GAClB,OAAIA,EAAGnJ,OAAS,EAAU,EACnBoJ,GAAID,GAAMA,EAAGnJ,OAEhB,SAAUoJ,GAAID,GAElB,IADA,IAAIhH,EAAI,EACCzB,EAAI,EAAGA,EAAIyI,EAAGnJ,OAAQU,IAAKyB,GAAKgH,EAAGzI,GAC5C,OAAOyB,EAGH,SAAUmD,GAAUnC,GACxB,OAAQ1B,MAAMC,WAAWyB,KAAOgO,SAAShO,4NAlnD3B,SAAAiO,EACdzT,EACAC,GAEA,OAAQD,EAAIG,MACV,IAAK,UAEL,IAAK,aAsCL,IAAK,gBACH,OAAOF,EAAID,GArCb,IAAK,iBAEH,OADAA,EAAIO,UAAYP,EAAIO,UAAUC,KAAI,SAACC,GAAO,OAAAgT,EAAShT,EAAIR,MAChDA,EAAID,GACb,IAAK,mBAGH,OAFAA,EAAIW,KAAO8S,EAASzT,EAAIW,KAAMV,GAC9BD,EAAIa,MAAQ4S,EAASzT,EAAIa,MAAOZ,GACzBA,EAAID,GACb,IAAK,wBAIH,OAHAA,EAAIc,KAAO2S,EAASzT,EAAIc,KAAMb,GAC9BD,EAAIe,WAAa0S,EAASzT,EAAIe,WAAYd,GAC1CD,EAAIgB,UAAYyS,EAASzT,EAAIgB,UAAWf,GACjCA,EAAID,GACb,IAAK,kBAEH,OADAA,EAAIiB,SAAWwS,EAASzT,EAAIiB,SAAUhB,GAC/BA,EAAID,GACb,IAAK,kBAMH,OALAA,EAAIkB,MAAQlB,EAAIkB,MAAMV,KAAI,SAACtC,OAACiC,EAAIjC,EAAA,GAAEkB,EAAKlB,EAAA,GACrC,MAAgB,eAATiC,EACH,CAACA,EAAMsT,EAASrU,EAAOa,IACvB,CAACE,EAAMf,MAENa,EAAID,GACb,IAAK,mBAEH,OADAA,EAAIoB,WAAaqS,EAASzT,EAAIoB,WAAYnB,GACnCA,EAAID,GACb,IAAK,eAEH,OADAA,EAAIqB,SAAWrB,EAAIqB,SAASb,KAAI,SAACC,GAAO,OAAAgT,EAAShT,EAAIR,MAC9CA,EAAID,GACb,IAAK,gBAOH,OANAA,EAAIsB,WAAatB,EAAIsB,WAAWd,KAAI,SAACtC,OAAEgB,EAAIhB,EAAAgB,KAAEE,EAAKlB,EAAAkB,MAChD,MAAO,CACLF,KAAMuU,EAASvU,EAAMe,GACrBb,MAAOA,EAAQqU,EAASrU,EAAOa,GAAOb,MAGnCa,EAAID,4BAuEfV,EACAW,EACAT,GAEA,OAAOO,EAAQJ,EAAUL,EAAME,GAAQS"}