{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import * as seedrandom from 'seedrandom';\nimport { z } from 'zod';\n\nexport type DictOf<T> = { [key: string]: T };\n\nexport const ZExprScalar = z.union([\n  z.number(),\n  z.string(),\n  z.boolean(),\n  z.null(),\n]);\nexport type TExprScalar = number | string | boolean | null;\nexport type TExprArray = TExprValue[];\nexport type TExprObject = { [key: string]: TExprValue };\nexport type TExprValue = TExprScalar | TExprObject | TExprArray;\n\nexport type TExprFuncSync = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExprValue[]\n) => TExprValue;\nexport type TExprFuncLazy = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExpression[]\n) => TExprValue;\nexport type TExprFuncDef =\n  | {\n      assignment?: true;\n      lazy?: undefined;\n      f: TExprFuncSync;\n    }\n  | {\n      lazy: true;\n      f: TExprFuncLazy;\n    };\n\nexport type TBinopDef = {\n  alias: string;\n};\nexport type TUnopDef = {\n  alias: string;\n};\n\nexport type TExprResult = {\n  result: TExprValue;\n  ctx: TExprContext;\n};\n\nexport type TExprContext = {\n  rng: () => number;\n  funcs: DictOf<TExprFuncDef>;\n  binops: DictOf<TBinopDef>;\n  unops: DictOf<TUnopDef>;\n  get: (scope: TScope, key: string) => TExprValue;\n  set: (scope: TScope, key: string, value: TExprValue) => void;\n  call?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExprValue[],\n      ) => TExprValue)\n    | undefined;\n  lazy?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExpression[],\n      ) => TExprValue)\n    | undefined;\n};\n\nexport type TScope = { [key: string]: TExprValue };\n\nexport type TExpression =\n  | TCallExpression\n  | TIdentifierExpression\n  | TBinaryExpression\n  | TLiteralExpression\n  | TConditionalExpression\n  | TUnaryExpression\n  | TTemplateLiteralExpression\n  | TArrayLiteralExpression\n  | TObjectLiteralExpression\n  | TComputedPropertyExpression;\n\nexport type TTemplateLiteralExpression = {\n  type: 'TemplateLiteral';\n  parts: [['chunks', string] | ['expression', TExpression]];\n};\n\nexport type TComputedPropertyExpression = {\n  type: 'ComputedProperty';\n  expression: TExpression;\n};\n\nexport type TArrayLiteralExpression = {\n  type: 'ArrayLiteral';\n  elements: TExpression[];\n};\n\nexport type TObjectLiteralExpression = {\n  type: 'ObjectLiteral';\n  properties: {\n    name:\n      | TIdentifierExpression\n      | TLiteralExpression\n      | TComputedPropertyExpression;\n    value: TExpression | undefined;\n  }[];\n};\n\nexport type TCallExpression = {\n  type: 'CallExpression';\n  callee: TIdentifierExpression;\n  arguments: TExpression[];\n};\n\nexport type TIdentifierExpression = {\n  type: 'Identifier';\n  name: string;\n};\n\nexport type TBinaryExpression = {\n  type: 'BinaryExpression';\n  left: TExpression;\n  operator: string;\n  right: TExpression;\n};\n\nexport type TLiteralExpression = {\n  type: 'Literal';\n  value: string;\n  raw: string;\n};\n\nexport type TConditionalExpression = {\n  type: 'ConditionalExpression';\n  test: TExpression;\n  consequent: TExpression;\n  alternate: TExpression;\n};\n\nexport type TUnaryExpression = {\n  type: 'UnaryExpression';\n  argument: TExpression;\n  operator: string;\n};\n\nexport const CONSTS: DictOf<TExprValue> = {\n  E: Math.E,\n  LN10: Math.LN10,\n  LN2: Math.LN2,\n  LOG10E: Math.LOG10E,\n  LOG2E: Math.LOG2E,\n  PI: Math.PI,\n  SQRT1_2: Math.SQRT1_2,\n  SQRT2: Math.SQRT2,\n};\n\nconst BINOP_MAP = {\n  '**': { alias: 'pow' },\n  '*': { alias: 'mul' },\n  '/': { alias: 'div' },\n  '%': { alias: 'mod' },\n  '+': { alias: 'add' },\n  '-': { alias: 'sub' },\n  '>>>': { alias: 'bitwiseRightShiftUnsigned' },\n  '<<': { alias: 'bitwiseLeftShift' },\n  '>>': { alias: 'bitwiseRightShift' },\n  '<=': { alias: 'lte' },\n  '>=': { alias: 'gte' },\n  '<': { alias: 'lt' },\n  '>': { alias: 'gt' },\n  '===': { alias: 'eq' },\n  '!==': { alias: 'neq' },\n  '==': { alias: 'eq' },\n  '!=': { alias: 'neq' },\n  '&': { alias: 'bitwiseAnd' },\n  '^': { alias: 'bitwiseXor' },\n  '|': { alias: 'bitwiseOr' },\n  '&&': { alias: 'and' },\n  '||': { alias: 'or' },\n  ':=': { alias: 'setVar' },\n  '+=': { alias: 'setAdd' },\n  '-=': { alias: 'setSub' },\n  '/=': { alias: 'setDiv' },\n  '*=': { alias: 'setMul' },\n  '??': { alias: 'nullCoalesce' },\n};\n\nconst UNOP_MAP = {\n  '+': { alias: 'number' },\n  '-': { alias: 'negate' },\n  '~': { alias: 'bitwiseNot' },\n  '!': { alias: 'not' },\n};\n\nconst IgnoreWhitespace = (Rule) => Ignore(/^\\s+/, Rule);\nconst QuoteToken = Any(\n  /^('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')/,\n  /^(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")/,\n);\nconst NumericToken = Any(\n  /^((?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\\b/,\n  /^(0[xX][0-9a-fA-F]+)\\b/,\n);\nconst NullToken = /^(null)\\b/;\nconst BooleanToken = /^(true|false)\\b/;\nconst IdentifierToken = /^([a-zA-Z_$][a-zA-Z0-9_$.]*)/;\nconst InterpolationChunkToken = /^((?:\\$(?!{)|\\\\.|[^`$\\\\])+)/;\nconst BinaryOperatorPrecedence = [\n  '**',\n  Any('*', '/', '%'),\n  Any('+', '-'),\n  Any('>>>', '<<', '>>'),\n  Any('<=', '>=', '<', '>'),\n  Any('===', '!==', '==', '!='),\n  /^&(?!&)/,\n  '^',\n  /^\\|(?!\\|)/,\n  '&&',\n  '||',\n  '??',\n  Any(':=', '+=', '-=', '*=', '/='),\n];\n\nconst INVALID_IDENT_REGEX = /^__proto__|prototype|constructor$/;\n\nexport function createExprContext({\n  funcs,\n  binops,\n  unops,\n  seed = 'expreval',\n  get,\n  set,\n  call,\n}: Partial<TExprContext> & { seed?: string }): TExprContext {\n  const vars: { [key: string]: TExprValue } = {};\n  return {\n    rng: seedrandom.default(seed),\n    funcs: { ...STDLIB, ...funcs },\n    binops: { ...BINOP_MAP, ...binops },\n    unops: { ...UNOP_MAP, ...unops },\n    get: (scope, name) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return 0;\n      }\n      if (get) {\n        return get(scope, name) ?? null;\n      }\n      return vars[name] ?? null;\n    },\n    set: (scope, name, value) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return;\n      }\n      if (set) {\n        return set(scope, name, value);\n      }\n      vars[name] = value;\n      return;\n    },\n    call,\n  };\n}\n\nexport function evaluateExpr(\n  code: string,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope = {},\n): TExprResult {\n  return {\n    result: executeAst(parseExpr(code), ctx, scope),\n    ctx,\n  };\n}\n\nexport default evaluateExpr;\n\nexport function parseExpr(code: string): TExpression {\n  const parser = Parser(DefaultGrammar);\n  return parser(code.replace(/\\/\\/.*\\n/g, ''));\n}\n\nexport function genCode(\n  ast: TExpression,\n  res: (ident: string) => string = (s) => s,\n): string {\n  switch (ast.type) {\n    case 'Literal':\n      return res(ast.raw);\n    case 'Identifier':\n      return res(ast.name);\n    case 'CallExpression':\n      return `${res(ast.callee.name)}(${ast.arguments\n        .map((el) => genCode(el, res))\n        .join(', ')})`;\n    case 'BinaryExpression':\n      return `${genCode(ast.left, res)} ${ast.operator} ${genCode(\n        ast.right,\n        res,\n      )}`;\n    case 'ConditionalExpression':\n      return `${genCode(ast.test, res)} ? ${genCode(\n        ast.consequent,\n        res,\n      )} : ${genCode(ast.alternate, res)}`;\n    case 'UnaryExpression':\n      return `${ast.operator}${genCode(ast.argument, res)}`;\n    case 'TemplateLiteral':\n      return (\n        '`' +\n        ast.parts.map(([kind, value]) => {\n          if (kind === 'chunks') {\n            return res(value);\n          } else {\n            return '${' + genCode(value, res) + '}';\n          }\n        }) +\n        '`'\n      );\n    case 'ComputedProperty':\n      return '[' + genCode(ast.expression, res) + ']';\n    case 'ArrayLiteral':\n      return '[' + ast.elements.map((el) => genCode(el, res)).join(', ') + ']';\n    case 'ObjectLiteral':\n      return (\n        '{' +\n        ast.properties\n          .map((prop) => {\n            if (!prop.value) {\n              return `${genCode(prop.name, res)}`;\n            }\n            return `${genCode(prop.name, res)}: ${genCode(prop.value, res)}`;\n          })\n          .join(', ') +\n        '}'\n      );\n  }\n}\n\nexport function rewriteCode(code: string, res: (ident: string) => string) {\n  return genCode(parseExpr(code), res);\n}\n\nexport function executeAst(\n  ast: TExpression,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope,\n): TExprValue {\n  switch (ast.type) {\n    case 'Literal':\n      return ast.value;\n    case 'Identifier':\n      const value = ctx.get(scope, ast.name);\n      return value !== undefined ? value : ast.name;\n    case 'CallExpression':\n      const fdef = Object.keys(ctx.funcs).includes(ast.callee.name)\n        ? ctx.funcs[ast.callee.name]\n        : null;\n      if (fdef && fdef.lazy) {\n        return fdef.f(ctx, scope, ...ast.arguments);\n      }\n      const args: TExprValue[] = [];\n      if (fdef && fdef.assignment && ast.arguments.length > 1) {\n        const left = exprToIdentifier(ast.arguments[0]!) ?? '';\n        const right = ast.arguments.slice(1);\n        args.push(left, ...right.map((expr) => executeAst(expr, ctx, scope)));\n      } else {\n        args.push(...ast.arguments.map((expr) => executeAst(expr, ctx, scope)));\n      }\n      if (fdef) {\n        const result = fdef.f(ctx, scope, ...args);\n        return result;\n      }\n      if (ctx.call) {\n        return ctx.call(ctx, scope, ast.callee.name, args);\n      }\n      throw new Error(`Function not found: '${ast.callee.name}'`);\n    case 'BinaryExpression':\n      const binop = Object.keys(ctx.binops).includes(ast.operator)\n        ? ctx.binops[ast.operator]\n        : null;\n      if (binop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: binop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.left, ast.right],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'ConditionalExpression':\n      const result = executeAst(ast.test, ctx, scope);\n      if (toBoolean(result)) {\n        return executeAst(ast.consequent, ctx, scope);\n      }\n      return executeAst(ast.alternate, ctx, scope);\n    case 'UnaryExpression':\n      const unop = Object.keys(ctx.unops).includes(ast.operator)\n        ? ctx.unops[ast.operator]\n        : null;\n      if (unop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: unop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.argument],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'TemplateLiteral':\n      let accum = '';\n      for (let i = 0; i < ast.parts.length; i++) {\n        const [kind, value] = ast.parts[i]!;\n        if (kind === 'chunks') {\n          accum += value;\n        } else if (kind === 'expression') {\n          accum += executeAst(value, ctx, scope) + '';\n        }\n      }\n      return accum;\n    case 'ComputedProperty':\n      return executeAst(ast.expression, ctx, scope);\n    case 'ArrayLiteral':\n      return ast.elements.map((element) => executeAst(element, ctx, scope));\n    case 'ObjectLiteral':\n      const obj = {};\n      for (let i = 0; i < ast.properties.length; i++) {\n        const { name, value } = ast.properties[i]!;\n        let key: string = '';\n        if (name.type === 'ComputedProperty') {\n          key = toString(executeAst(name.expression, ctx, scope));\n        } else if (name.type === 'Identifier') {\n          key = name.name; // Don't evaluate this if 'bare'\n        } else if (name.type === 'Literal') {\n          key = name.value;\n        }\n        obj[key] = executeAst(value ? value : name, ctx, scope);\n      }\n      return obj;\n    default:\n      console.info(ast);\n      throw new Error(`Syntax error`);\n  }\n}\n\nexport function exprToIdentifier(v: TExpression): string | null {\n  if (v.type === 'Identifier') {\n    return v.name;\n  }\n  return null;\n}\n\nexport function toNumber(v: any, fallback: number = 0): number {\n  if (typeof v === 'boolean') {\n    return v ? 1 : 0;\n  }\n  if (typeof v === 'number') {\n    return isNaN(v) ? fallback : v;\n  }\n  if (typeof v === 'string') {\n    if (v.includes('.')) {\n      return parseFloat(v);\n    }\n    return parseInt(v);\n  }\n  return fallback;\n}\n\nexport function toBoolean(v: TExprValue): boolean {\n  if (!v) {\n    return false;\n  }\n  if (typeof v === 'string' && v.match(/^\\s+$/)) {\n    return false;\n  }\n  if (v === 'false') {\n    return false;\n  }\n  if (v === '0') {\n    return false;\n  }\n  return true;\n}\n\nexport function toString(v: any): string {\n  if (typeof v === 'number') {\n    return v.toString(10);\n  }\n  if (v === true || v === 'true') {\n    return 'true';\n  }\n  if (!v) {\n    return '';\n  }\n  return v + '';\n}\n\nexport function toObject(v: any): TExprObject {\n  if (!v) {\n    return {};\n  }\n  if (v && typeof v === 'object') {\n    return v;\n  }\n  return {};\n}\n\nexport function toArray(v: any): TExprArray {\n  if (!v) {\n    return [];\n  }\n  if (Array.isArray(v)) {\n    return v.map((e) => toScalar(e));\n  }\n  if (v && typeof v === 'object') {\n    return Object.keys(v).map((k) => toScalar(v[k]));\n  }\n  if (\n    typeof v === 'number' ||\n    typeof v === 'string' ||\n    typeof v === 'boolean'\n  ) {\n    return [v];\n  }\n  return [];\n}\n\nexport function toScalar(n: any, radix: number = 10): TExprScalar {\n  if (typeof n === 'number') {\n    return n;\n  }\n  if (typeof n === 'string') {\n    return n;\n  }\n  if (typeof n === 'boolean') {\n    return n;\n  }\n  if (!n) {\n    return null;\n  }\n  if (typeof n === 'object') {\n    return '';\n  }\n  return n + '';\n}\n\nfunction setVar<T extends TExprValue>(\n  ctx: TExprContext,\n  scope: TScope,\n  name: any,\n  value: T,\n): T {\n  const key = toString(name);\n  ctx.set(scope, key, value);\n  return value;\n}\n\nfunction getVar(ctx: TExprContext, scope: TScope, name: any): TExprValue {\n  return ctx.get(scope, name + '') ?? null;\n}\n\nexport const STDLIB: DictOf<TExprFuncDef> = {\n  do: {\n    f(ctx, scope, ...args) {\n      return args[args.length - 1] ?? null;\n    },\n  },\n  defp: {\n    lazy: true,\n    f(ctx, scope, ...args) {\n      return 0;\n    },\n  },\n  present: {\n    f(ctx, scope, v) {\n      return !!v;\n    },\n  },\n  empty: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      return !v;\n    },\n  },\n  blank: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      if (typeof v === 'string' && (!v || v.match(/^\\s+$/))) {\n        return true;\n      }\n      return !v;\n    },\n  },\n  setVar: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(ctx, scope, left, right);\n    },\n  },\n  setAdd: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      const lval = getVar(ctx, scope, left);\n      if (typeof lval === 'string') {\n        return setVar(ctx, scope, left, lval + right + '');\n      }\n      return setVar(ctx, scope, left, toNumber(lval) + toNumber(right));\n    },\n  },\n  setSub: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) - toNumber(right),\n      );\n    },\n  },\n  setMul: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) * toNumber(right),\n      );\n    },\n  },\n  setDiv: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) / toNumber(right),\n      );\n    },\n  },\n  nullCoalesce: {\n    f(ctx, scope, a, b) {\n      return a ?? b;\n    },\n  },\n  unixTimestampNow: {\n    f() {\n      return Date.now();\n    },\n  },\n  unixTimestampForDate: {\n    f(ctx, scope, year, mon, day, hour, min, second) {\n      return new Date(\n        toNumber(year),\n        toNumber(mon),\n        toNumber(day),\n        toNumber(hour),\n        toNumber(min),\n        toNumber(second),\n      ).getTime();\n    },\n  },\n  all: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (!xs[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  any: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (xs[i]) {\n          return true;\n        }\n      }\n      return false;\n    },\n  },\n  some: {\n    f(ctx, scope, xs) {\n      return !!STDLIB['any']!.f(ctx, scope, xs as any);\n    },\n  },\n  none: {\n    f(ctx, scope, xs) {\n      return !STDLIB['any']!.f(ctx, scope, xs as any);\n    },\n  },\n  or: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) || toBoolean(b);\n    },\n  },\n  and: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) && toBoolean(b);\n    },\n  },\n  not: {\n    f(ctx, scope, a) {\n      return !toBoolean(a);\n    },\n  },\n  gt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  gte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  eq: {\n    f(ctx, scope, a, b) {\n      return toString(a) === toString(b);\n    },\n  },\n  neq: {\n    f(ctx, scope, a, b) {\n      return toString(a) !== toString(b);\n    },\n  },\n  rand: {\n    f(ctx) {\n      return ctx.rng();\n    },\n  },\n  randInRange: {\n    f(ctx, scope, min, max) {\n      return ctx.rng() * (Number(max) - Number(min)) + Number(min);\n    },\n  },\n  randInt: {\n    f(ctx) {\n      return Math.floor(ctx.rng() * 10);\n    },\n  },\n  randIntInRange: {\n    f(ctx, scope, min, max) {\n      min = Math.ceil(Number(min));\n      max = Math.floor(Number(max));\n      return Math.floor(ctx.rng() * (max - min + 1)) + min;\n    },\n  },\n  number: {\n    f(ctx, scope, a) {\n      return Number(a);\n    },\n  },\n  isNumeric: {\n    f(ctx, scope, a) {\n      if (typeof a === 'number') {\n        return true;\n      }\n      if (typeof a === 'string') {\n        return isNumeric(a);\n      }\n      return false;\n    },\n  },\n  bitwiseOr: {\n    f(ctx, scope, a, b) {\n      return Number(a) | Number(b);\n    },\n  },\n  bitwiseXor: {\n    f(ctx, scope, a, b) {\n      return Number(a) ^ Number(b);\n    },\n  },\n  bitwiseAnd: {\n    f(ctx, scope, a, b) {\n      return Number(a) & Number(b);\n    },\n  },\n  bitwiseNot: {\n    f(ctx, scope, a) {\n      return ~Number(a);\n    },\n  },\n  bitwiseLeftShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) << Number(b);\n    },\n  },\n  bitwiseRightShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) >> Number(b);\n    },\n  },\n  bitwiseRightshiftUnsigned: {\n    f(ctx, scope, a, b) {\n      return Number(a) >>> Number(b);\n    },\n  },\n  negate: {\n    f(ctx, scope, a) {\n      return -toNumber(a);\n    },\n  },\n  add: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a + b + '';\n      }\n      return toNumber(a) + toNumber(b);\n    },\n  },\n  sub: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) - toNumber(b);\n    },\n  },\n  div: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) / toNumber(b);\n    },\n  },\n  mul: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) * toNumber(b);\n    },\n  },\n  mod: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) % toNumber(b);\n    },\n  },\n  pow: {\n    f(ctx, scope, a, b) {\n      return Math.pow(toNumber(a), toNumber(b));\n    },\n  },\n  abs: {\n    f(ctx, scope, a) {\n      return Math.abs(toNumber(a));\n    },\n  },\n  acos: {\n    f(ctx, scope, a) {\n      return Math.acos(toNumber(a));\n    },\n  },\n  acosh: {\n    f(ctx, scope, a) {\n      return Math.acosh(toNumber(a));\n    },\n  },\n  asin: {\n    f(ctx, scope, a) {\n      return Math.asin(toNumber(a));\n    },\n  },\n  asinh: {\n    f(ctx, scope, a) {\n      return Math.asinh(toNumber(a));\n    },\n  },\n  atan: {\n    f(ctx, scope, a) {\n      return Math.atan(toNumber(a));\n    },\n  },\n  atan2: {\n    f(ctx, scope, a, b) {\n      return Math.atan2(toNumber(a), toNumber(b));\n    },\n  },\n  atanh: {\n    f(ctx, scope, a) {\n      return Math.atanh(toNumber(a));\n    },\n  },\n  cbrt: {\n    f(ctx, scope, a) {\n      return Math.cbrt(toNumber(a));\n    },\n  },\n  ceil: {\n    f(ctx, scope, a) {\n      return Math.ceil(toNumber(a));\n    },\n  },\n  cos: {\n    f(ctx, scope, a) {\n      return Math.cos(toNumber(a));\n    },\n  },\n  cosh: {\n    f(ctx, scope, a) {\n      return Math.cosh(toNumber(a));\n    },\n  },\n  exp: {\n    f(ctx, scope, a) {\n      return Math.exp(toNumber(a));\n    },\n  },\n  floor: {\n    f(ctx, scope, a) {\n      return Math.floor(toNumber(a));\n    },\n  },\n  hypot: {\n    f(ctx, scope, a) {\n      return Math.hypot(toNumber(a));\n    },\n  },\n  log: {\n    f(ctx, scope, a) {\n      return Math.log(toNumber(a));\n    },\n  },\n  log10: {\n    f(ctx, scope, a) {\n      return Math.log10(toNumber(a));\n    },\n  },\n  log2: {\n    f(ctx, scope, a) {\n      return Math.log2(toNumber(a));\n    },\n  },\n  max: {\n    f(ctx, scope, a) {\n      return Math.max(toNumber(a));\n    },\n  },\n  min: {\n    f(ctx, scope, a) {\n      return Math.min(toNumber(a));\n    },\n  },\n  round: {\n    f(ctx, scope, a) {\n      return Math.round(toNumber(a));\n    },\n  },\n  sign: {\n    f(ctx, scope, a) {\n      return Math.sign(toNumber(a));\n    },\n  },\n  sin: {\n    f(ctx, scope, a) {\n      return Math.sin(toNumber(a));\n    },\n  },\n  sinh: {\n    f(ctx, scope, a) {\n      return Math.sinh(toNumber(a));\n    },\n  },\n  sqrt: {\n    f(ctx, scope, a) {\n      return Math.sqrt(toNumber(a));\n    },\n  },\n  tan: {\n    f(ctx, scope, a) {\n      return Math.tan(toNumber(a));\n    },\n  },\n  tanh: {\n    f(ctx, scope, a) {\n      return Math.tanh(toNumber(a));\n    },\n  },\n  trunc: {\n    f(ctx, scope, a) {\n      return Math.trunc(toNumber(a));\n    },\n  },\n  fromCharCode: {\n    f(ctx, scope, a) {\n      return String.fromCharCode(Number(a));\n    },\n  },\n  fromCodePoint: {\n    f(ctx, scope, a) {\n      return String.fromCodePoint(Number(a));\n    },\n  },\n  parseInt: {\n    f(ctx, scope, a, b) {\n      return parseInt(toString(a), Number(b));\n    },\n  },\n  parseFloat: {\n    f(ctx, scope, a) {\n      return parseFloat(toString(a));\n    },\n  },\n  charAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charAt(Number(b));\n    },\n  },\n  charCodeAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charCodeAt(Number(b));\n    },\n  },\n  codePointAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).codePointAt(Number(b)) ?? 0;\n    },\n  },\n  localeCompare: {\n    f(ctx, scope, a, b) {\n      return toString(a).localeCompare(toString(b));\n    },\n  },\n  match: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  matchAll: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  padEnd: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padEnd(Number(b), toString(c ?? ''));\n    },\n  },\n  padStart: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padStart(Number(b), toString(c ?? ''));\n    },\n  },\n  repeat: {\n    f(ctx, scope, a, b) {\n      return toString(a).repeat(Number(b));\n    },\n  },\n  replace: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replace(toString(b), toString(c));\n    },\n  },\n  replaceAll: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replaceAll(toString(b), toString(c));\n    },\n  },\n  startsWith: {\n    f(ctx, scope, a, b) {\n      return toString(a).startsWith(toString(b));\n    },\n  },\n  substring: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).substring(Number(b), Number(c));\n    },\n  },\n  toLowerCase: {\n    f(ctx, scope, a) {\n      return toString(a).toLowerCase();\n    },\n  },\n  toUpperCase: {\n    f(ctx, scope, a) {\n      return toString(a).toUpperCase();\n    },\n  },\n  trim: {\n    f(ctx, scope, a) {\n      return toString(a).trim();\n    },\n  },\n  trimEnd: {\n    f(ctx, scope, a) {\n      return toString(a).trimEnd();\n    },\n  },\n  trimStart: {\n    f(ctx, scope, a) {\n      return toString(a).trimStart();\n    },\n  },\n  clamp: {\n    f(ctx, a, min, max) {\n      return clamp(toNumber(a), toNumber(min), toNumber(max));\n    },\n  },\n  avg: {\n    f(ctx, scope, nn) {\n      return avg(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  sum: {\n    f(ctx, scope, nn) {\n      return sum(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  join: {\n    f(ctx, scope, ss, spacer) {\n      return toArray(ss).join(toString(spacer));\n    },\n  },\n  split: {\n    f(ctx, scope, s, spacer) {\n      return toString(s).split(toString(spacer));\n    },\n  },\n  first: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[0] ?? null;\n      }\n      return toArray(arr)[0] ?? null;\n    },\n  },\n  last: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[arr.length] ?? null;\n      }\n      arr = toArray(arr);\n      return arr[arr.length] ?? null;\n    },\n  },\n  length: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr.length;\n      }\n      return toArray(arr).length;\n    },\n  },\n  concat: {\n    f(ctx, scope, aa, bb) {\n      if (typeof aa === 'string') {\n        return aa + toString(bb);\n      }\n      return [...toArray(aa), ...toArray(bb)];\n    },\n  },\n  endsWith: {\n    f(ctx, scope, a, b, c = '') {\n      if (Array.isArray(a)) {\n        a = a.join(toString(c));\n      }\n      return toString(a).endsWith(toString(b));\n    },\n  },\n  includes: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.includes(toString(b));\n      }\n      return toArray(a).includes(b);\n    },\n  },\n  lastIndexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.lastIndexOf(toString(b));\n      }\n      return toArray(a).lastIndexOf(b);\n    },\n  },\n  indexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.indexOf(toString(b));\n      }\n      return toArray(a).indexOf(b);\n    },\n  },\n  nth: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a[toNumber(b)] ?? null;\n      }\n      return toArray(a)[toNumber(b)] ?? null;\n    },\n  },\n  reverse: {\n    f(ctx, scope, a) {\n      if (typeof a === 'string') {\n        return a.split('').reverse().join('');\n      }\n      return toArray(a).reverse();\n    },\n  },\n  take: {\n    f(ctx, scope, a, n) {\n      if (typeof a === 'string') {\n        return a.slice(0, toNumber(n));\n      }\n      return toArray(a).slice(0, toNumber(n));\n    },\n  },\n  head: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(0, -1);\n    },\n  },\n  tail: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(1);\n    },\n  },\n  slice: {\n    f(ctx, scope, arr, a, b) {\n      if (typeof arr === 'string') {\n        return arr.slice(toNumber(a), toNumber(b));\n      }\n      return toArray(arr).slice(toNumber(a), toNumber(b));\n    },\n  },\n  randEl: {\n    f(ctx, scope, arr) {\n      arr = toArray(arr);\n      const i = STDLIB['randIntInRange']!.f(\n        ctx,\n        scope,\n        0 as any,\n        (arr.length - 1) as any,\n      ) as number;\n      return arr[i] ?? null;\n    },\n  },\n  push: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.push(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  pop: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.pop() ?? null;\n      }\n      return null;\n    },\n  },\n  shift: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.shift() ?? null;\n      }\n      return null;\n    },\n  },\n  unshift: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.unshift(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  keys: {\n    f(ctx, scope, obj) {\n      return Object.keys(toObject(obj));\n    },\n  },\n  values: {\n    f(ctx, scope, obj) {\n      return Object.values(toObject(obj));\n    },\n  },\n  get: {\n    f(ctx, scope, obj, key) {\n      return toObject(obj)[toString(key)] ?? null;\n    },\n  },\n  set: {\n    f(ctx, scope, obj, key, value) {\n      if (obj && typeof obj === 'object') {\n        obj[toString(key)] = value;\n      }\n      return obj;\n    },\n  },\n};\n\n// The code below is derived from code at https://github.com/dmaevsky/rd-parse. License:\n// The MIT License (MIT)\n// Copyright 2013 - present Dmitry Maevsky\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst associativity = (binop) => (binop === '**' ? r2l : l2r);\n\nfunction locAt(text, newPos, { pos, line, column }) {\n  while (pos < newPos) {\n    const ch = text[pos++];\n    if (ch === '\\n') {\n      column = 1;\n      line++;\n    } else {\n      column++;\n    }\n  }\n  return { pos, line, column };\n}\n\nconst markSeen = ($) => {\n  if ($.pos > $.lastSeen.pos) {\n    Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen));\n  }\n};\n\nfunction RegexToken(pattern) {\n  return ($) => {\n    markSeen($);\n    const match = pattern.exec($.text.substring($.pos));\n    if (!match) {\n      return $;\n    }\n    const $next = {\n      ...$,\n      pos: $.pos + match[0].length,\n    };\n    for (let i = 1; i < match.length; i++) {\n      $.stack[$next.sp++] = match[i];\n    }\n    return $next;\n  };\n}\n\nfunction StringToken(pattern) {\n  return ($) => {\n    markSeen($);\n    if ($.text.startsWith(pattern, $.pos)) {\n      return {\n        ...$,\n        pos: $.pos + pattern.length,\n      };\n    }\n    return $;\n  };\n}\n\nfunction Use(rule) {\n  if (typeof rule === 'function') {\n    return rule;\n  }\n  if (rule instanceof RegExp) {\n    return RegexToken(rule);\n  }\n  if (typeof rule === 'string') {\n    return StringToken(rule);\n  }\n  throw new Error('Invalid rule');\n}\n\nfunction Ignore(toIgnore, rule) {\n  rule = Use(rule);\n  if (toIgnore) {\n    toIgnore = Ignore(null, Plus(toIgnore));\n  }\n\n  return ($) => {\n    const $cur = toIgnore ? toIgnore($) : $;\n    $.ignore.push(toIgnore);\n    const $next = rule($cur);\n    $.ignore.pop();\n    return $next === $cur ? $ : toIgnore ? toIgnore($next) : $next;\n  };\n}\n\nconst skipIgnored = ($) => {\n  if (!$.ignore.length) {\n    return $;\n  }\n  const toIgnore = $.ignore[$.ignore.length - 1];\n  return toIgnore ? toIgnore($) : $;\n};\n\nfunction All(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    let $cur = $;\n    for (let i = 0; i < rules.length; i++) {\n      const $before = i > 0 ? skipIgnored($cur) : $cur;\n      const $after = rules[i]($before);\n      if ($after === $before) {\n        return $;\n      }\n      if ($after.pos > $before.pos || $after.sp > $before.sp) {\n        $cur = $after;\n      }\n    }\n    return $cur;\n  };\n}\n\nfunction Any(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    for (let i = 0; i < rules.length; i++) {\n      const $next = rules[i]($);\n      if ($next !== $) {\n        return $next;\n      }\n    }\n    return $;\n  };\n}\n\nfunction Plus(rule) {\n  rule = Use(rule);\n  return ($) => {\n    while (true) {\n      const $cur = skipIgnored($);\n      const $next = rule($cur);\n      if ($next === $cur) {\n        return $;\n      }\n      $ = $next;\n    }\n  };\n}\n\nfunction Optional(rule) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next !== $) {\n      return $next;\n    }\n    return { ...$ };\n  };\n}\n\nfunction Node(rule, reducer) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next === $) {\n      return $;\n    }\n    const node = reducer($.stack.slice($.sp, $next.sp), $, $next);\n    $next.sp = $.sp;\n    if (node !== null) {\n      $.stack[$next.sp++] = node;\n    }\n    return $next;\n  };\n}\n\nconst Star = (rule) => Optional(Plus(rule));\n\nconst Y = (proc) => ((x) => proc((y) => x(x)(y)))((x) => proc((y) => x(x)(y)));\n\nconst START = (text, pos = 0) => ({\n  text,\n  ignore: [],\n  stack: [],\n  sp: 0,\n  lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),\n  pos,\n});\n\nfunction Parser(\n  Grammar,\n  pos = 0,\n  partial = false,\n): (text: string) => TExpression {\n  return (text) => {\n    if (typeof text !== 'string') {\n      throw new Error('Parsing function expects a string input');\n    }\n    const $ = START(text, pos);\n    const $next = Grammar($);\n    if ($ === $next || (!partial && $next.pos < text.length)) {\n      throw new Error(\n        `Unexpected token at ${$.lastSeen.line}:${\n          $.lastSeen.column\n        }. Remainder: ${text.slice($.lastSeen.pos)}`,\n      );\n    }\n    return $.stack[0] as unknown as TExpression;\n  };\n}\n\nfunction l2r(parts, $) {\n  let left = parts[0];\n  for (let i = 1; i < parts.length; i += 2) {\n    const [operator, right] = [parts[i].operator, parts[i + 1]];\n    left = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      $,\n      { pos: right.pos + right.text.length },\n    );\n  }\n  return left;\n}\n\nfunction r2l(parts, _, $next) {\n  let right = parts[parts.length - 1];\n  for (let i = parts.length - 2; i >= 0; i -= 2) {\n    const [left, operator] = [parts[i - 1], parts[i].operator];\n    right = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      { pos: left.pos },\n      $next,\n    );\n  }\n  return right;\n}\n\nconst Operator = (Rule) =>\n  Node(Rule, (_, $, $next) => ({\n    $,\n    operator: $.text.substring($.pos, $next.pos),\n  }));\n\nconst srcMap = (obj, $, $next) =>\n  Object.defineProperties(obj, {\n    pos: { writable: true, configurable: true, value: $.pos },\n    text: {\n      writable: true,\n      configurable: true,\n      value: ($.text || $next.text).slice($.pos, $next.pos),\n    },\n  });\n\nconst DefaultGrammar = IgnoreWhitespace(\n  Y((Expression) => {\n    const Identifier = Node(IdentifierToken, ([name]) => ({\n      type: 'Identifier',\n      name,\n    }));\n    const StringLiteral = Node(QuoteToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw.slice(1, -1),\n      raw,\n    }));\n    const NumericLiteral = Node(NumericToken, ([raw]) => ({\n      type: 'Literal',\n      value: +raw,\n      raw,\n    }));\n    const NullLiteral = Node(NullToken, ([raw]) => ({\n      type: 'Literal',\n      value: null,\n      raw,\n    }));\n    const BooleanLiteral = Node(BooleanToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw === 'true',\n      raw,\n    }));\n    const InterpolationChunk = Node(InterpolationChunkToken, ([raw]) => [\n      'chunks',\n      raw,\n    ]);\n    const TemplateInlineExpression = Node(\n      All('${', IgnoreWhitespace(Expression), '}'),\n      ([expression]) => ['expression', expression],\n    );\n    const TemplateLiteral = Node(\n      Ignore(\n        null,\n        All('`', Star(Any(InterpolationChunk, TemplateInlineExpression)), '`'),\n      ),\n      (parts) => ({ type: 'TemplateLiteral', parts }),\n    );\n    const Literal = Any(\n      StringLiteral,\n      NumericLiteral,\n      NullLiteral,\n      BooleanLiteral,\n      TemplateLiteral,\n    );\n    const ArgumentsList = All(Expression, Star(All(',', Expression)));\n    const Arguments = Node(\n      All('(', Optional(All(ArgumentsList, Optional(','))), ')'),\n      (args) => ({\n        args,\n      }),\n    );\n    const ArgumentsExpression = Node(Any(Arguments), ([part], _, $next) => ({\n      part,\n      $next,\n    }));\n    const CompoundExpression = Node(\n      All(Expression, Star(All(',', Expression))),\n      (leafs) =>\n        leafs.length > 1 ? { type: 'CompoundExpression', leafs } : leafs[0],\n    );\n    const ComputedPropertyName = Node(\n      All('[', CompoundExpression, ']'),\n      ([expression]) => ({ type: 'ComputedProperty', expression }),\n    );\n    const PropertyName = Any(\n      Identifier,\n      StringLiteral,\n      NumericLiteral,\n      ComputedPropertyName,\n    );\n    const ShortNotation = Node(Identifier, ([expr], $, $next) =>\n      srcMap({ ...expr, shortNotation: true }, $, $next),\n    );\n    const PropertyDefinition = Node(\n      Any(All(PropertyName, ':', Expression), ShortNotation),\n      ([name, value]) => ({\n        name,\n        value,\n      }),\n    );\n    const PropertyDefinitions = All(\n      PropertyDefinition,\n      Star(All(',', PropertyDefinition)),\n    );\n    const PropertyDefinitionList = Optional(\n      All(PropertyDefinitions, Optional(',')),\n    );\n    const ObjectLiteral = Node(\n      All('{', PropertyDefinitionList, '}'),\n      (properties) => ({ type: 'ObjectLiteral', properties }),\n    );\n    const Element = Any(Expression);\n    const ElementList = All(Element, Star(All(',', Element)));\n    const ArrayLiteral = Node(\n      All('[', Optional(ElementList), ']'),\n      (elements) => ({\n        type: 'ArrayLiteral',\n        elements,\n      }),\n    );\n    const PrimaryExpression = Node(\n      Any(\n        Literal,\n        Identifier,\n        ArrayLiteral,\n        ObjectLiteral,\n        All('(', CompoundExpression, ')'),\n      ),\n      ([expr], $, $next) => srcMap(expr, $, $next),\n    );\n    const CallExpression = Node(\n      All(PrimaryExpression, Star(ArgumentsExpression)),\n      (parts, $, $last) => {\n        return parts.reduce((acc, { part, $next }) => {\n          return srcMap(\n            { type: 'CallExpression', callee: acc, arguments: part.args },\n            $,\n            $next,\n          );\n        });\n      },\n    );\n    const UnaryOperator = Operator(Any('+', '-', '~', '!'));\n    const UnaryExpression = Node(\n      All(Star(UnaryOperator), CallExpression),\n      (parts, _, $next) =>\n        parts.reduceRight((argument, { $, operator }) =>\n          srcMap({ type: 'UnaryExpression', argument, operator }, $, $next),\n        ),\n    );\n    const LogicalExpressionOrExpression = BinaryOperatorPrecedence.reduce(\n      (Expr, BinaryOp) =>\n        Node(\n          All(Expr, Star(All(Operator(BinaryOp), Expr))),\n          associativity(BinaryOp),\n        ),\n      UnaryExpression,\n    );\n    const TernaryExpression = Node(\n      All(\n        LogicalExpressionOrExpression,\n        Optional(All('?', Expression, ':', Expression)),\n      ),\n      ([test, consequent, alternate]) => {\n        return consequent\n          ? { type: 'ConditionalExpression', test, consequent, alternate }\n          : test;\n      },\n    );\n    return Node(Any(TernaryExpression), ([expr], $, $next) =>\n      srcMap(expr, $, $next),\n    );\n  }),\n);\n\nexport function clamp(n: number, min: number = 0, max: number = 1): number {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n}\nexport function avg(nn: number[]): number {\n  if (nn.length < 1) return 0;\n  return sum(nn) / nn.length;\n}\nexport function sum(nn: number[]): number {\n  let n = 0;\n  for (let i = 0; i < nn.length; i++) n += nn[i]!;\n  return n;\n}\n\nexport function isNumeric(a: any): boolean {\n  return !isNaN(parseFloat(a)) && isFinite(a);\n}\n"],"names":["ZExprScalar","z","union","number","string","boolean","null","CONSTS","E","Math","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2","BINOP_MAP","alias","UNOP_MAP","IgnoreWhitespace","Rule","Ignore","QuoteToken","Any","NumericToken","NullToken","BooleanToken","IdentifierToken","InterpolationChunkToken","BinaryOperatorPrecedence","INVALID_IDENT_REGEX","createExprContext","_a","funcs","binops","unops","_b","seed","get","set","call","vars","rng","seedrandom","default","__assign","STDLIB","scope","name","match","value","evaluateExpr","code","ctx","result","executeAst","parseExpr","Grammar","pos","partial","text","Error","$","ignore","stack","sp","lastSeen","locAt","line","column","START","$next","length","concat","slice","Parser","DefaultGrammar","parser","replace","genCode","ast","res","s","type","raw","callee","arguments","map","el","join","left","operator","right","test","consequent","alternate","argument","parts","kind","expression","elements","properties","prop","undefined","fdef","Object","keys","includes","lazy","f","apply","__spreadArray","args","assignment","exprToIdentifier","push","expr","binop","toBoolean","unop","accum","i","value_1","element","obj","_c","value_2","key","toString","console","info","v","toNumber","fallback","isNaN","parseFloat","parseInt","toObject","toArray","Array","isArray","e","toScalar","k","n","radix","setVar","getVar","do","_i","defp","present","empty","blank","setAdd","lval","setSub","setMul","setDiv","nullCoalesce","a","b","unixTimestampNow","Date","now","unixTimestampForDate","year","mon","day","hour","min","second","getTime","all","xs","any","some","none","or","and","not","gt","gte","lt","lte","eq","neq","rand","randInRange","max","Number","randInt","floor","randIntInRange","ceil","isNumeric","bitwiseOr","bitwiseXor","bitwiseAnd","bitwiseNot","bitwiseLeftShift","bitwiseRightShift","bitwiseRightshiftUnsigned","negate","add","sub","div","mul","mod","pow","abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","cos","cosh","exp","hypot","log","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","fromCharCode","String","fromCodePoint","charAt","charCodeAt","codePointAt","localeCompare","matchAll","padEnd","c","padStart","repeat","replaceAll","startsWith","substring","toLowerCase","toUpperCase","trim","trimEnd","trimStart","clamp","avg","nn","sum","ss","spacer","split","first","arr","last","aa","bb","endsWith","lastIndexOf","indexOf","nth","reverse","take","head","tail","randEl","pop","shift","unshift","values","newPos","markSeen","assign","Use","rule","RegExp","pattern","exec","StringToken","toIgnore","Plus","$cur","skipIgnored","All","rules","$before","$after","Optional","Node","reducer","node","Star","l2r","srcMap","r2l","_","proc","x","Operator","defineProperties","writable","configurable","y","Expression","Identifier","StringLiteral","NumericLiteral","NullLiteral","BooleanLiteral","InterpolationChunk","TemplateInlineExpression","TemplateLiteral","Literal","ArgumentsList","Arguments","ArgumentsExpression","part","CompoundExpression","leafs","PropertyName","ShortNotation","shortNotation","PropertyDefinition","PropertyDefinitions","PropertyDefinitionList","ObjectLiteral","Element","ElementList","ArrayLiteral","PrimaryExpression","CallExpression","$last","reduce","acc","UnaryOperator","UnaryExpression","reduceRight","LogicalExpressionOrExpression","Expr","BinaryOp","TernaryExpression","isFinite"],"mappings":"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"}