{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import * as seedrandom from 'seedrandom';\nimport { z } from 'zod';\n\nexport type DictOf<T> = { [key: string]: T };\n\nexport const ZExprScalar = z.union([\n  z.number(),\n  z.string(),\n  z.boolean(),\n  z.null(),\n]);\nexport type TExprScalar = number | string | boolean | null;\nexport type TExprArray = TExprValue[];\nexport type TExprObject = { [key: string]: TExprValue };\nexport type TExprValue = TExprScalar | TExprObject | TExprArray;\n\nexport type TExprFuncSync = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExprValue[]\n) => TExprValue;\nexport type TExprFuncLazy = (\n  ctx: TExprContext,\n  scope: TScope,\n  ...args: TExpression[]\n) => TExprValue;\nexport type TExprFuncDef =\n  | {\n      assignment?: true;\n      lazy?: undefined;\n      f: TExprFuncSync;\n    }\n  | {\n      lazy: true;\n      f: TExprFuncLazy;\n    };\n\nexport type TBinopDef = {\n  alias: string;\n};\nexport type TUnopDef = {\n  alias: string;\n};\n\nexport type TExprResult = {\n  result: TExprValue;\n  ctx: TExprContext;\n};\n\nexport type TExprContext = {\n  rng: () => number;\n  funcs: DictOf<TExprFuncDef>;\n  binops: DictOf<TBinopDef>;\n  unops: DictOf<TUnopDef>;\n  get: (scope: TScope, key: string) => TExprValue;\n  set: (scope: TScope, key: string, value: TExprValue) => void;\n  call?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExprValue[],\n      ) => TExprValue)\n    | undefined;\n  lazy?:\n    | ((\n        ctx: TExprContext,\n        scope: TScope,\n        method: string,\n        args: TExpression[],\n      ) => TExprValue)\n    | undefined;\n};\n\nexport type TScope = { [key: string]: TExprValue };\n\nexport type TExpression =\n  | TCallExpression\n  | TIdentifierExpression\n  | TBinaryExpression\n  | TLiteralExpression\n  | TConditionalExpression\n  | TUnaryExpression\n  | TTemplateLiteralExpression\n  | TArrayLiteralExpression\n  | TObjectLiteralExpression\n  | TComputedPropertyExpression;\n\nexport type TTemplateLiteralExpression = {\n  type: 'TemplateLiteral';\n  parts: [['chunks', string] | ['expression', TExpression]];\n};\n\nexport type TComputedPropertyExpression = {\n  type: 'ComputedProperty';\n  expression: TExpression;\n};\n\nexport type TArrayLiteralExpression = {\n  type: 'ArrayLiteral';\n  elements: TExpression[];\n};\n\nexport type TObjectLiteralExpression = {\n  type: 'ObjectLiteral';\n  properties: {\n    name:\n      | TIdentifierExpression\n      | TLiteralExpression\n      | TComputedPropertyExpression;\n    value: TExpression | undefined;\n  }[];\n};\n\nexport type TCallExpression = {\n  type: 'CallExpression';\n  callee: TIdentifierExpression;\n  arguments: TExpression[];\n};\n\nexport type TIdentifierExpression = {\n  type: 'Identifier';\n  name: string;\n};\n\nexport type TBinaryExpression = {\n  type: 'BinaryExpression';\n  left: TExpression;\n  operator: string;\n  right: TExpression;\n};\n\nexport type TLiteralExpression = {\n  type: 'Literal';\n  value: string;\n  raw: string;\n};\n\nexport type TConditionalExpression = {\n  type: 'ConditionalExpression';\n  test: TExpression;\n  consequent: TExpression;\n  alternate: TExpression | undefined;\n};\n\nexport type TUnaryExpression = {\n  type: 'UnaryExpression';\n  argument: TExpression;\n  operator: string;\n};\n\nexport const CONSTS: DictOf<TExprValue> = {\n  E: Math.E,\n  LN10: Math.LN10,\n  LN2: Math.LN2,\n  LOG10E: Math.LOG10E,\n  LOG2E: Math.LOG2E,\n  PI: Math.PI,\n  SQRT1_2: Math.SQRT1_2,\n  SQRT2: Math.SQRT2,\n};\n\nconst BINOP_MAP = {\n  '**': { alias: 'pow' },\n  '*': { alias: 'mul' },\n  '/': { alias: 'div' },\n  '%': { alias: 'mod' },\n  '+': { alias: 'add' },\n  '-': { alias: 'sub' },\n  '>>>': { alias: 'bitwiseRightShiftUnsigned' },\n  '<<': { alias: 'bitwiseLeftShift' },\n  '>>': { alias: 'bitwiseRightShift' },\n  '<=': { alias: 'lte' },\n  '>=': { alias: 'gte' },\n  '<': { alias: 'lt' },\n  '>': { alias: 'gt' },\n  '===': { alias: 'eq' },\n  '!==': { alias: 'neq' },\n  '==': { alias: 'eq' },\n  '!=': { alias: 'neq' },\n  '&': { alias: 'bitwiseAnd' },\n  '^': { alias: 'bitwiseXor' },\n  '|': { alias: 'bitwiseOr' },\n  '&&': { alias: 'and' },\n  '||': { alias: 'or' },\n  ':=': { alias: 'setVar' },\n  '+=': { alias: 'setAdd' },\n  '-=': { alias: 'setSub' },\n  '/=': { alias: 'setDiv' },\n  '*=': { alias: 'setMul' },\n  '??': { alias: 'nullCoalesce' },\n};\n\nconst UNOP_MAP = {\n  '+': { alias: 'number' },\n  '-': { alias: 'negate' },\n  '~': { alias: 'bitwiseNot' },\n  '!': { alias: 'not' },\n};\n\nconst IgnoreWhitespace = (Rule) => Ignore(/^\\s+/, Rule);\nconst QuoteToken = Any(\n  /^('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')/,\n  /^(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")/,\n);\nconst NumericToken = Any(\n  /^((?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\\b/,\n  /^(0[xX][0-9a-fA-F]+)\\b/,\n);\nconst NullToken = /^(null)\\b/;\nconst BooleanToken = /^(true|false)\\b/;\nconst IdentifierToken = /^([a-zA-Z_$][a-zA-Z0-9_$.]*)/;\nconst InterpolationChunkToken = /^((?:\\$(?!{)|\\\\.|[^`$\\\\])+)/;\nconst BinaryOperatorPrecedence = [\n  '**',\n  Any('*', '/', '%'),\n  Any('+', '-'),\n  Any('>>>', '<<', '>>'),\n  Any('<=', '>=', '<', '>'),\n  Any('===', '!==', '==', '!='),\n  /^&(?!&)/,\n  '^',\n  /^\\|(?!\\|)/,\n  '&&',\n  '||',\n  '??',\n  Any(':=', '+=', '-=', '*=', '/='),\n];\n\nconst INVALID_IDENT_REGEX = /^__proto__|prototype|constructor$/;\n\nexport function createExprContext({\n  funcs,\n  binops,\n  unops,\n  seed = 'expreval',\n  get,\n  set,\n  call,\n}: Partial<TExprContext> & { seed?: string }): TExprContext {\n  const vars: { [key: string]: TExprValue } = {};\n  return {\n    rng: seedrandom.default(seed),\n    funcs: { ...STDLIB, ...funcs },\n    binops: { ...BINOP_MAP, ...binops },\n    unops: { ...UNOP_MAP, ...unops },\n    get: (scope, name) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return 0;\n      }\n      if (get) {\n        return get(scope, name) ?? null;\n      }\n      return vars[name] ?? null;\n    },\n    set: (scope, name, value) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return;\n      }\n      if (set) {\n        return set(scope, name, value);\n      }\n      vars[name] = value;\n      return;\n    },\n    call,\n  };\n}\n\nexport function evaluateExpr(\n  code: string,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope = {},\n): TExprResult {\n  return {\n    result: executeAst(parseExpr(code), ctx, scope),\n    ctx,\n  };\n}\n\nexport default evaluateExpr;\n\nexport function parseExpr(code: string): TExpression {\n  const parser = Parser(DefaultGrammar);\n  return parser(code.replace(/\\/\\/.*\\n/g, ''));\n}\n\nexport function executeAst(\n  ast: TExpression,\n  ctx: TExprContext = createExprContext({}),\n  scope: TScope,\n): TExprValue {\n  switch (ast.type) {\n    case 'Literal':\n      return ast.value;\n    case 'Identifier':\n      const value = ctx.get(scope, ast.name);\n      return value !== undefined ? value : ast.name;\n    case 'CallExpression':\n      const fdef = Object.keys(ctx.funcs).includes(ast.callee.name)\n        ? ctx.funcs[ast.callee.name]\n        : null;\n      if (fdef && fdef.lazy) {\n        return fdef.f(ctx, scope, ...ast.arguments);\n      }\n      const args: TExprValue[] = [];\n      if (fdef && fdef.assignment && ast.arguments.length > 1) {\n        const left = exprToIdentifier(ast.arguments[0]!) ?? '';\n        const right = ast.arguments.slice(1);\n        args.push(left, ...right.map((expr) => executeAst(expr, ctx, scope)));\n      } else {\n        args.push(...ast.arguments.map((expr) => executeAst(expr, ctx, scope)));\n      }\n      if (fdef) {\n        const result = fdef.f(ctx, scope, ...args);\n        return result;\n      }\n      if (ctx.call) {\n        return ctx.call(ctx, scope, ast.callee.name, args);\n      }\n      throw new Error(`Function not found: '${ast.callee.name}'`);\n    case 'BinaryExpression':\n      const binop = Object.keys(ctx.binops).includes(ast.operator)\n        ? ctx.binops[ast.operator]\n        : null;\n      if (binop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: binop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.left, ast.right],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'ConditionalExpression':\n      const result = executeAst(ast.test, ctx, scope);\n      if (toBoolean(result)) {\n        return executeAst(ast.consequent, ctx, scope);\n      }\n      if (!ast.alternate) {\n        return null;\n      }\n      return executeAst(ast.alternate, ctx, scope);\n    case 'UnaryExpression':\n      const unop = Object.keys(ctx.unops).includes(ast.operator)\n        ? ctx.unops[ast.operator]\n        : null;\n      if (unop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: unop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.argument],\n          },\n          ctx,\n          scope,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'TemplateLiteral':\n      let accum = '';\n      for (let i = 0; i < ast.parts.length; i++) {\n        const [kind, value] = ast.parts[i]!;\n        if (kind === 'chunks') {\n          accum += value;\n        } else if (kind === 'expression') {\n          accum += executeAst(value, ctx, scope) + '';\n        }\n      }\n      return accum;\n    case 'ComputedProperty':\n      return executeAst(ast.expression, ctx, scope);\n    case 'ArrayLiteral':\n      return ast.elements.map((element) => executeAst(element, ctx, scope));\n    case 'ObjectLiteral':\n      const obj = {};\n      for (let i = 0; i < ast.properties.length; i++) {\n        const { name, value } = ast.properties[i]!;\n        let key: string = '';\n        if (name.type === 'ComputedProperty') {\n          key = toString(executeAst(name.expression, ctx, scope));\n        } else if (name.type === 'Identifier') {\n          key = name.name; // Don't evaluate this if 'bare'\n        } else if (name.type === 'Literal') {\n          key = name.value;\n        }\n        obj[key] = executeAst(value ? value : name, ctx, scope);\n      }\n      return obj;\n    default:\n      console.info(ast);\n      throw new Error(`Syntax error`);\n  }\n}\n\nexport function exprToIdentifier(v: TExpression): string | null {\n  if (v.type === 'Identifier') {\n    return v.name;\n  }\n  return null;\n}\n\nexport function toNumber(v: any, fallback: number = 0): number {\n  if (typeof v === 'boolean') {\n    return v ? 1 : 0;\n  }\n  if (typeof v === 'number') {\n    return isNaN(v) ? fallback : v;\n  }\n  if (typeof v === 'string') {\n    if (v.includes('.')) {\n      return parseFloat(v);\n    }\n    return parseInt(v);\n  }\n  return fallback;\n}\n\nexport function toBoolean(v: TExprValue): boolean {\n  if (!v) {\n    return false;\n  }\n  if (typeof v === 'string' && v.match(/^\\s+$/)) {\n    return false;\n  }\n  if (v === 'false') {\n    return false;\n  }\n  if (v === '0') {\n    return false;\n  }\n  return true;\n}\n\nexport function toString(v: any, radix: number = 10): string {\n  if (typeof v === 'number') {\n    return v.toString(radix);\n  }\n  if (v === true || v === 'true') {\n    return 'true';\n  }\n  if (!v) {\n    return '';\n  }\n  return v + '';\n}\n\nexport function toObject(v: any): TExprObject {\n  if (!v) {\n    return {};\n  }\n  if (v && typeof v === 'object') {\n    return v;\n  }\n  return {};\n}\n\nexport function toArray(v: any): TExprArray {\n  if (!v) {\n    return [];\n  }\n  if (Array.isArray(v)) {\n    return v.map((e) => toScalar(e));\n  }\n  if (v && typeof v === 'object') {\n    return Object.keys(v).map((k) => toScalar(v[k]));\n  }\n  if (\n    typeof v === 'number' ||\n    typeof v === 'string' ||\n    typeof v === 'boolean'\n  ) {\n    return [v];\n  }\n  return [];\n}\n\nexport function toScalar(n: any, radix: number = 10): TExprScalar {\n  if (typeof n === 'number') {\n    return n;\n  }\n  if (typeof n === 'string') {\n    return n;\n  }\n  if (typeof n === 'boolean') {\n    return n;\n  }\n  if (!n) {\n    return null;\n  }\n  if (typeof n === 'object') {\n    return '';\n  }\n  return n + '';\n}\n\nfunction setVar<T extends TExprValue>(\n  ctx: TExprContext,\n  scope: TScope,\n  name: any,\n  value: T,\n): T {\n  const key = toString(name);\n  ctx.set(scope, key, value);\n  return value;\n}\n\nfunction getVar(ctx: TExprContext, scope: TScope, name: any): TExprValue {\n  return ctx.get(scope, name + '') ?? null;\n}\n\nexport const STDLIB: DictOf<TExprFuncDef> = {\n  do: {\n    f(ctx, scope, ...args) {\n      return args[args.length - 1] ?? null;\n    },\n  },\n  defp: {\n    lazy: true,\n    f(ctx, scope, ...args) {\n      return 0;\n    },\n  },\n  present: {\n    f(ctx, scope, v) {\n      return !!v;\n    },\n  },\n  empty: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      return !v;\n    },\n  },\n  blank: {\n    f(ctx, scope, v) {\n      if (Array.isArray(v)) {\n        return v.length < 1;\n      }\n      if (v && typeof v === 'object') {\n        return Object.keys(v).length < 1;\n      }\n      if (typeof v === 'string' && (!v || v.match(/^\\s+$/))) {\n        return true;\n      }\n      return !v;\n    },\n  },\n  setVar: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(ctx, scope, left, right);\n    },\n  },\n  setAdd: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      const lval = getVar(ctx, scope, left);\n      if (typeof lval === 'string') {\n        return setVar(ctx, scope, left, lval + right + '');\n      }\n      return setVar(ctx, scope, left, toNumber(lval) + toNumber(right));\n    },\n  },\n  setSub: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) - toNumber(right),\n      );\n    },\n  },\n  setMul: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) * toNumber(right),\n      );\n    },\n  },\n  setDiv: {\n    assignment: true,\n    f(ctx, scope, left, right) {\n      return setVar(\n        ctx,\n        scope,\n        left,\n        toNumber(getVar(ctx, scope, left)) / toNumber(right),\n      );\n    },\n  },\n  nullCoalesce: {\n    f(ctx, scope, a, b) {\n      return a ?? b;\n    },\n  },\n  unixTimestampNow: {\n    f() {\n      return Date.now();\n    },\n  },\n  unixTimestampForDate: {\n    f(ctx, scope, year, mon, day, hour, min, second) {\n      return new Date(\n        toNumber(year),\n        toNumber(mon),\n        toNumber(day),\n        toNumber(hour),\n        toNumber(min),\n        toNumber(second),\n      ).getTime();\n    },\n  },\n  all: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (!xs[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  any: {\n    f(ctx, scope, xs) {\n      if (!Array.isArray(xs)) {\n        return !!xs;\n      }\n      for (let i = 0; i < xs.length; i++) {\n        if (xs[i]) {\n          return true;\n        }\n      }\n      return false;\n    },\n  },\n  some: {\n    f(ctx, scope, xs) {\n      return !!STDLIB['any']!.f(ctx, scope, xs as any);\n    },\n  },\n  none: {\n    f(ctx, scope, xs) {\n      return !STDLIB['any']!.f(ctx, scope, xs as any);\n    },\n  },\n  or: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) || toBoolean(b);\n    },\n  },\n  and: {\n    f(ctx, scope, a, b) {\n      return toBoolean(a) && toBoolean(b);\n    },\n  },\n  not: {\n    f(ctx, scope, a) {\n      return !toBoolean(a);\n    },\n  },\n  gt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  gte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lt: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lte: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  eq: {\n    f(ctx, scope, a, b) {\n      return toString(a) === toString(b);\n    },\n  },\n  neq: {\n    f(ctx, scope, a, b) {\n      return toString(a) !== toString(b);\n    },\n  },\n  rand: {\n    f(ctx) {\n      return ctx.rng();\n    },\n  },\n  randInRange: {\n    f(ctx, scope, min, max) {\n      return ctx.rng() * (Number(max) - Number(min)) + Number(min);\n    },\n  },\n  randInt: {\n    f(ctx) {\n      return Math.floor(ctx.rng() * 10);\n    },\n  },\n  randIntInRange: {\n    f(ctx, scope, min, max) {\n      min = Math.ceil(Number(min));\n      max = Math.floor(Number(max));\n      return Math.floor(ctx.rng() * (max - min + 1)) + min;\n    },\n  },\n  number: {\n    f(ctx, scope, a) {\n      return Number(a);\n    },\n  },\n  isNumeric: {\n    f(ctx, scope, a) {\n      if (typeof a === 'number') {\n        return true;\n      }\n      if (typeof a === 'string') {\n        return isNumeric(a);\n      }\n      return false;\n    },\n  },\n  bitwiseOr: {\n    f(ctx, scope, a, b) {\n      return Number(a) | Number(b);\n    },\n  },\n  bitwiseXor: {\n    f(ctx, scope, a, b) {\n      return Number(a) ^ Number(b);\n    },\n  },\n  bitwiseAnd: {\n    f(ctx, scope, a, b) {\n      return Number(a) & Number(b);\n    },\n  },\n  bitwiseNot: {\n    f(ctx, scope, a) {\n      return ~Number(a);\n    },\n  },\n  bitwiseLeftShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) << Number(b);\n    },\n  },\n  bitwiseRightShift: {\n    f(ctx, scope, a, b) {\n      return Number(a) >> Number(b);\n    },\n  },\n  bitwiseRightshiftUnsigned: {\n    f(ctx, scope, a, b) {\n      return Number(a) >>> Number(b);\n    },\n  },\n  negate: {\n    f(ctx, scope, a) {\n      return -toNumber(a);\n    },\n  },\n  add: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a + b + '';\n      }\n      return toNumber(a) + toNumber(b);\n    },\n  },\n  sub: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) - toNumber(b);\n    },\n  },\n  div: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) / toNumber(b);\n    },\n  },\n  mul: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) * toNumber(b);\n    },\n  },\n  mod: {\n    f(ctx, scope, a, b) {\n      return toNumber(a) % toNumber(b);\n    },\n  },\n  pow: {\n    f(ctx, scope, a, b) {\n      return Math.pow(toNumber(a), toNumber(b));\n    },\n  },\n  abs: {\n    f(ctx, scope, a) {\n      return Math.abs(toNumber(a));\n    },\n  },\n  acos: {\n    f(ctx, scope, a) {\n      return Math.acos(toNumber(a));\n    },\n  },\n  acosh: {\n    f(ctx, scope, a) {\n      return Math.acosh(toNumber(a));\n    },\n  },\n  asin: {\n    f(ctx, scope, a) {\n      return Math.asin(toNumber(a));\n    },\n  },\n  asinh: {\n    f(ctx, scope, a) {\n      return Math.asinh(toNumber(a));\n    },\n  },\n  atan: {\n    f(ctx, scope, a) {\n      return Math.atan(toNumber(a));\n    },\n  },\n  atan2: {\n    f(ctx, scope, a, b) {\n      return Math.atan2(toNumber(a), toNumber(b));\n    },\n  },\n  atanh: {\n    f(ctx, scope, a) {\n      return Math.atanh(toNumber(a));\n    },\n  },\n  cbrt: {\n    f(ctx, scope, a) {\n      return Math.cbrt(toNumber(a));\n    },\n  },\n  ceil: {\n    f(ctx, scope, a) {\n      return Math.ceil(toNumber(a));\n    },\n  },\n  cos: {\n    f(ctx, scope, a) {\n      return Math.cos(toNumber(a));\n    },\n  },\n  cosh: {\n    f(ctx, scope, a) {\n      return Math.cosh(toNumber(a));\n    },\n  },\n  exp: {\n    f(ctx, scope, a) {\n      return Math.exp(toNumber(a));\n    },\n  },\n  floor: {\n    f(ctx, scope, a) {\n      return Math.floor(toNumber(a));\n    },\n  },\n  hypot: {\n    f(ctx, scope, a) {\n      return Math.hypot(toNumber(a));\n    },\n  },\n  log: {\n    f(ctx, scope, a) {\n      return Math.log(toNumber(a));\n    },\n  },\n  log10: {\n    f(ctx, scope, a) {\n      return Math.log10(toNumber(a));\n    },\n  },\n  log2: {\n    f(ctx, scope, a) {\n      return Math.log2(toNumber(a));\n    },\n  },\n  max: {\n    f(ctx, scope, a) {\n      return Math.max(toNumber(a));\n    },\n  },\n  min: {\n    f(ctx, scope, a) {\n      return Math.min(toNumber(a));\n    },\n  },\n  round: {\n    f(ctx, scope, a) {\n      return Math.round(toNumber(a));\n    },\n  },\n  sign: {\n    f(ctx, scope, a) {\n      return Math.sign(toNumber(a));\n    },\n  },\n  sin: {\n    f(ctx, scope, a) {\n      return Math.sin(toNumber(a));\n    },\n  },\n  sinh: {\n    f(ctx, scope, a) {\n      return Math.sinh(toNumber(a));\n    },\n  },\n  sqrt: {\n    f(ctx, scope, a) {\n      return Math.sqrt(toNumber(a));\n    },\n  },\n  tan: {\n    f(ctx, scope, a) {\n      return Math.tan(toNumber(a));\n    },\n  },\n  tanh: {\n    f(ctx, scope, a) {\n      return Math.tanh(toNumber(a));\n    },\n  },\n  trunc: {\n    f(ctx, scope, a) {\n      return Math.trunc(toNumber(a));\n    },\n  },\n  fromCharCode: {\n    f(ctx, scope, a) {\n      return String.fromCharCode(Number(a));\n    },\n  },\n  fromCodePoint: {\n    f(ctx, scope, a) {\n      return String.fromCodePoint(Number(a));\n    },\n  },\n  parseInt: {\n    f(ctx, scope, a, b) {\n      return parseInt(toString(a), Number(b));\n    },\n  },\n  parseFloat: {\n    f(ctx, scope, a) {\n      return parseFloat(toString(a));\n    },\n  },\n  charAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charAt(Number(b));\n    },\n  },\n  charCodeAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).charCodeAt(Number(b));\n    },\n  },\n  codePointAt: {\n    f(ctx, scope, a, b) {\n      return toString(a).codePointAt(Number(b)) ?? 0;\n    },\n  },\n  localeCompare: {\n    f(ctx, scope, a, b) {\n      return toString(a).localeCompare(toString(b));\n    },\n  },\n  match: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  matchAll: {\n    f(ctx, scope, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  padEnd: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padEnd(Number(b), toString(c ?? ''));\n    },\n  },\n  padStart: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).padStart(Number(b), toString(c ?? ''));\n    },\n  },\n  repeat: {\n    f(ctx, scope, a, b) {\n      return toString(a).repeat(Number(b));\n    },\n  },\n  replace: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replace(toString(b), toString(c));\n    },\n  },\n  replaceAll: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).replaceAll(toString(b), toString(c));\n    },\n  },\n  startsWith: {\n    f(ctx, scope, a, b) {\n      return toString(a).startsWith(toString(b));\n    },\n  },\n  substring: {\n    f(ctx, scope, a, b, c) {\n      return toString(a).substring(Number(b), Number(c));\n    },\n  },\n  toLowerCase: {\n    f(ctx, scope, a) {\n      return toString(a).toLowerCase();\n    },\n  },\n  toUpperCase: {\n    f(ctx, scope, a) {\n      return toString(a).toUpperCase();\n    },\n  },\n  trim: {\n    f(ctx, scope, a) {\n      return toString(a).trim();\n    },\n  },\n  trimEnd: {\n    f(ctx, scope, a) {\n      return toString(a).trimEnd();\n    },\n  },\n  trimStart: {\n    f(ctx, scope, a) {\n      return toString(a).trimStart();\n    },\n  },\n  clamp: {\n    f(ctx, a, min, max) {\n      return clamp(toNumber(a), toNumber(min), toNumber(max));\n    },\n  },\n  avg: {\n    f(ctx, scope, nn) {\n      return avg(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  sum: {\n    f(ctx, scope, nn) {\n      return sum(toArray(nn).map((n) => toNumber(n)));\n    },\n  },\n  join: {\n    f(ctx, scope, ss, spacer) {\n      return toArray(ss).join(toString(spacer));\n    },\n  },\n  split: {\n    f(ctx, scope, s, spacer) {\n      return toString(s).split(toString(spacer));\n    },\n  },\n  first: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[0] ?? null;\n      }\n      return toArray(arr)[0] ?? null;\n    },\n  },\n  last: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr[arr.length] ?? null;\n      }\n      arr = toArray(arr);\n      return arr[arr.length] ?? null;\n    },\n  },\n  length: {\n    f(ctx, scope, arr) {\n      if (typeof arr === 'string') {\n        return arr.length;\n      }\n      return toArray(arr).length;\n    },\n  },\n  concat: {\n    f(ctx, scope, aa, bb) {\n      if (typeof aa === 'string') {\n        return aa + toString(bb);\n      }\n      return [...toArray(aa), ...toArray(bb)];\n    },\n  },\n  endsWith: {\n    f(ctx, scope, a, b, c = '') {\n      if (Array.isArray(a)) {\n        a = a.join(toString(c));\n      }\n      return toString(a).endsWith(toString(b));\n    },\n  },\n  includes: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.includes(toString(b));\n      }\n      return toArray(a).includes(b);\n    },\n  },\n  lastIndexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.lastIndexOf(toString(b));\n      }\n      return toArray(a).lastIndexOf(b);\n    },\n  },\n  indexOf: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a.indexOf(toString(b));\n      }\n      return toArray(a).indexOf(b);\n    },\n  },\n  nth: {\n    f(ctx, scope, a, b) {\n      if (typeof a === 'string') {\n        return a[toNumber(b)] ?? null;\n      }\n      return toArray(a)[toNumber(b)] ?? null;\n    },\n  },\n  reverse: {\n    f(ctx, scope, a) {\n      if (typeof a === 'string') {\n        return a.split('').reverse().join('');\n      }\n      return toArray(a).reverse();\n    },\n  },\n  take: {\n    f(ctx, scope, a, n) {\n      if (typeof a === 'string') {\n        return a.slice(0, toNumber(n));\n      }\n      return toArray(a).slice(0, toNumber(n));\n    },\n  },\n  head: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(0, -1);\n    },\n  },\n  tail: {\n    f(ctx, scope, arr) {\n      return toArray(arr).slice(1);\n    },\n  },\n  slice: {\n    f(ctx, scope, arr, a, b) {\n      if (typeof arr === 'string') {\n        return arr.slice(toNumber(a), toNumber(b));\n      }\n      return toArray(arr).slice(toNumber(a), toNumber(b));\n    },\n  },\n  randEl: {\n    f(ctx, scope, arr) {\n      arr = toArray(arr);\n      const i = STDLIB['randIntInRange']!.f(\n        ctx,\n        scope,\n        0 as any,\n        (arr.length - 1) as any,\n      ) as number;\n      return arr[i] ?? null;\n    },\n  },\n  push: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.push(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  pop: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.pop() ?? null;\n      }\n      return null;\n    },\n  },\n  shift: {\n    f(ctx, scope, arr) {\n      if (Array.isArray(arr)) {\n        return arr.shift() ?? null;\n      }\n      return null;\n    },\n  },\n  unshift: {\n    f(ctx, scope, arr, value) {\n      if (Array.isArray(arr)) {\n        arr.unshift(value);\n        return arr.length;\n      }\n      return -1;\n    },\n  },\n  keys: {\n    f(ctx, scope, obj) {\n      return Object.keys(toObject(obj));\n    },\n  },\n  values: {\n    f(ctx, scope, obj) {\n      return Object.values(toObject(obj));\n    },\n  },\n  get: {\n    f(ctx, scope, obj, key) {\n      return toObject(obj)[toString(key)] ?? null;\n    },\n  },\n  set: {\n    f(ctx, scope, obj, key, value) {\n      if (obj && typeof obj === 'object') {\n        obj[toString(key)] = value;\n      }\n      return obj;\n    },\n  },\n};\n\n// The code below is derived from code at https://github.com/dmaevsky/rd-parse. License:\n// The MIT License (MIT)\n// Copyright 2013 - present Dmitry Maevsky\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst associativity = (binop) => (binop === '**' ? r2l : l2r);\n\nfunction locAt(text, newPos, { pos, line, column }) {\n  while (pos < newPos) {\n    const ch = text[pos++];\n    if (ch === '\\n') {\n      column = 1;\n      line++;\n    } else {\n      column++;\n    }\n  }\n  return { pos, line, column };\n}\n\nconst markSeen = ($) => {\n  if ($.pos > $.lastSeen.pos) {\n    Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen));\n  }\n};\n\nfunction RegexToken(pattern) {\n  return ($) => {\n    markSeen($);\n    const match = pattern.exec($.text.substring($.pos));\n    if (!match) {\n      return $;\n    }\n    const $next = {\n      ...$,\n      pos: $.pos + match[0].length,\n    };\n    for (let i = 1; i < match.length; i++) {\n      $.stack[$next.sp++] = match[i];\n    }\n    return $next;\n  };\n}\n\nfunction StringToken(pattern) {\n  return ($) => {\n    markSeen($);\n    if ($.text.startsWith(pattern, $.pos)) {\n      return {\n        ...$,\n        pos: $.pos + pattern.length,\n      };\n    }\n    return $;\n  };\n}\n\nfunction Use(rule) {\n  if (typeof rule === 'function') {\n    return rule;\n  }\n  if (rule instanceof RegExp) {\n    return RegexToken(rule);\n  }\n  if (typeof rule === 'string') {\n    return StringToken(rule);\n  }\n  throw new Error('Invalid rule');\n}\n\nfunction Ignore(toIgnore, rule) {\n  rule = Use(rule);\n  if (toIgnore) {\n    toIgnore = Ignore(null, Plus(toIgnore));\n  }\n\n  return ($) => {\n    const $cur = toIgnore ? toIgnore($) : $;\n    $.ignore.push(toIgnore);\n    const $next = rule($cur);\n    $.ignore.pop();\n    return $next === $cur ? $ : toIgnore ? toIgnore($next) : $next;\n  };\n}\n\nconst skipIgnored = ($) => {\n  if (!$.ignore.length) {\n    return $;\n  }\n  const toIgnore = $.ignore[$.ignore.length - 1];\n  return toIgnore ? toIgnore($) : $;\n};\n\nfunction All(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    let $cur = $;\n    for (let i = 0; i < rules.length; i++) {\n      const $before = i > 0 ? skipIgnored($cur) : $cur;\n      const $after = rules[i]($before);\n      if ($after === $before) {\n        return $;\n      }\n      if ($after.pos > $before.pos || $after.sp > $before.sp) {\n        $cur = $after;\n      }\n    }\n    return $cur;\n  };\n}\n\nfunction Any(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    for (let i = 0; i < rules.length; i++) {\n      const $next = rules[i]($);\n      if ($next !== $) {\n        return $next;\n      }\n    }\n    return $;\n  };\n}\n\nfunction Plus(rule) {\n  rule = Use(rule);\n  return ($) => {\n    while (true) {\n      const $cur = skipIgnored($);\n      const $next = rule($cur);\n      if ($next === $cur) {\n        return $;\n      }\n      $ = $next;\n    }\n  };\n}\n\nfunction Optional(rule) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next !== $) {\n      return $next;\n    }\n    return { ...$ };\n  };\n}\n\nfunction Node(rule, reducer) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next === $) {\n      return $;\n    }\n    const node = reducer($.stack.slice($.sp, $next.sp), $, $next);\n    $next.sp = $.sp;\n    if (node !== null) {\n      $.stack[$next.sp++] = node;\n    }\n    return $next;\n  };\n}\n\nconst Star = (rule) => Optional(Plus(rule));\n\nconst Y = (proc) => ((x) => proc((y) => x(x)(y)))((x) => proc((y) => x(x)(y)));\n\nconst START = (text, pos = 0) => ({\n  text,\n  ignore: [],\n  stack: [],\n  sp: 0,\n  lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),\n  pos,\n});\n\nfunction Parser(\n  Grammar,\n  pos = 0,\n  partial = false,\n): (text: string) => TExpression {\n  return (text) => {\n    if (typeof text !== 'string') {\n      throw new Error('Parsing function expects a string input');\n    }\n    const $ = START(text, pos);\n    const $next = Grammar($);\n    if ($ === $next || (!partial && $next.pos < text.length)) {\n      throw new Error(\n        `Unexpected token at ${$.lastSeen.line}:${\n          $.lastSeen.column\n        }. Remainder: ${text.slice($.lastSeen.pos)}`,\n      );\n    }\n    return $.stack[0] as unknown as TExpression;\n  };\n}\n\nfunction l2r(parts, $) {\n  let left = parts[0];\n  for (let i = 1; i < parts.length; i += 2) {\n    const [operator, right] = [parts[i].operator, parts[i + 1]];\n    left = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      $,\n      { pos: right.pos + right.text.length },\n    );\n  }\n  return left;\n}\n\nfunction r2l(parts, _, $next) {\n  let right = parts[parts.length - 1];\n  for (let i = parts.length - 2; i >= 0; i -= 2) {\n    const [left, operator] = [parts[i - 1], parts[i].operator];\n    right = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      { pos: left.pos },\n      $next,\n    );\n  }\n  return right;\n}\n\nconst Operator = (Rule) =>\n  Node(Rule, (_, $, $next) => ({\n    $,\n    operator: $.text.substring($.pos, $next.pos),\n  }));\n\nconst srcMap = (obj, $, $next) =>\n  Object.defineProperties(obj, {\n    pos: { writable: true, configurable: true, value: $.pos },\n    text: {\n      writable: true,\n      configurable: true,\n      value: ($.text || $next.text).slice($.pos, $next.pos),\n    },\n  });\n\nconst DefaultGrammar = IgnoreWhitespace(\n  Y((Expression) => {\n    const Identifier = Node(IdentifierToken, ([name]) => ({\n      type: 'Identifier',\n      name,\n    }));\n    const StringLiteral = Node(QuoteToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw.slice(1, -1),\n      raw,\n    }));\n    const NumericLiteral = Node(NumericToken, ([raw]) => ({\n      type: 'Literal',\n      value: +raw,\n      raw,\n    }));\n    const NullLiteral = Node(NullToken, ([raw]) => ({\n      type: 'Literal',\n      value: null,\n      raw,\n    }));\n    const BooleanLiteral = Node(BooleanToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw === 'true',\n      raw,\n    }));\n    const InterpolationChunk = Node(InterpolationChunkToken, ([raw]) => [\n      'chunks',\n      raw,\n    ]);\n    const TemplateInlineExpression = Node(\n      All('${', IgnoreWhitespace(Expression), '}'),\n      ([expression]) => ['expression', expression],\n    );\n    const TemplateLiteral = Node(\n      Ignore(\n        null,\n        All('`', Star(Any(InterpolationChunk, TemplateInlineExpression)), '`'),\n      ),\n      (parts) => ({ type: 'TemplateLiteral', parts }),\n    );\n    const Literal = Any(\n      StringLiteral,\n      NumericLiteral,\n      NullLiteral,\n      BooleanLiteral,\n      TemplateLiteral,\n    );\n    const ArgumentsList = All(Expression, Star(All(',', Expression)));\n    const Arguments = Node(\n      All('(', Optional(All(ArgumentsList, Optional(','))), ')'),\n      (args) => ({\n        args,\n      }),\n    );\n    const ArgumentsExpression = Node(Any(Arguments), ([part], _, $next) => ({\n      part,\n      $next,\n    }));\n    const CompoundExpression = Node(\n      All(Expression, Star(All(',', Expression))),\n      (leafs) =>\n        leafs.length > 1 ? { type: 'CompoundExpression', leafs } : leafs[0],\n    );\n    const ComputedPropertyName = Node(\n      All('[', CompoundExpression, ']'),\n      ([expression]) => ({ type: 'ComputedProperty', expression }),\n    );\n    const PropertyName = Any(\n      Identifier,\n      StringLiteral,\n      NumericLiteral,\n      ComputedPropertyName,\n    );\n    const ShortNotation = Node(Identifier, ([expr], $, $next) =>\n      srcMap({ ...expr, shortNotation: true }, $, $next),\n    );\n    const PropertyDefinition = Node(\n      Any(All(PropertyName, ':', Expression), ShortNotation),\n      ([name, value]) => ({\n        name,\n        value,\n      }),\n    );\n    const PropertyDefinitions = All(\n      PropertyDefinition,\n      Star(All(',', PropertyDefinition)),\n    );\n    const PropertyDefinitionList = Optional(\n      All(PropertyDefinitions, Optional(',')),\n    );\n    const ObjectLiteral = Node(\n      All('{', PropertyDefinitionList, '}'),\n      (properties) => ({ type: 'ObjectLiteral', properties }),\n    );\n    const Element = Any(Expression);\n    const ElementList = All(Element, Star(All(',', Element)));\n    const ArrayLiteral = Node(\n      All('[', Optional(ElementList), ']'),\n      (elements) => ({\n        type: 'ArrayLiteral',\n        elements,\n      }),\n    );\n    const PrimaryExpression = Node(\n      Any(\n        Literal,\n        Identifier,\n        ArrayLiteral,\n        ObjectLiteral,\n        All('(', CompoundExpression, ')'),\n      ),\n      ([expr], $, $next) => srcMap(expr, $, $next),\n    );\n    const CallExpression = Node(\n      All(PrimaryExpression, Star(ArgumentsExpression)),\n      (parts, $, $last) => {\n        return parts.reduce((acc, { part, $next }) => {\n          return srcMap(\n            { type: 'CallExpression', callee: acc, arguments: part.args },\n            $,\n            $next,\n          );\n        });\n      },\n    );\n    const UnaryOperator = Operator(Any('+', '-', '~', '!'));\n    const UnaryExpression = Node(\n      All(Star(UnaryOperator), CallExpression),\n      (parts, _, $next) =>\n        parts.reduceRight((argument, { $, operator }) =>\n          srcMap({ type: 'UnaryExpression', argument, operator }, $, $next),\n        ),\n    );\n    const LogicalExpressionOrExpression = BinaryOperatorPrecedence.reduce(\n      (Expr, BinaryOp) =>\n        Node(\n          All(Expr, Star(All(Operator(BinaryOp), Expr))),\n          associativity(BinaryOp),\n        ),\n      UnaryExpression,\n    );\n    const TernaryExpression = Node(\n      All(\n        LogicalExpressionOrExpression,\n        Optional(All('?', Expression, ':', Expression)),\n      ),\n      ([test, consequent, alternate]) => {\n        return consequent\n          ? { type: 'ConditionalExpression', test, consequent, alternate }\n          : test;\n      },\n    );\n    return Node(Any(TernaryExpression), ([expr], $, $next) =>\n      srcMap(expr, $, $next),\n    );\n  }),\n);\n\nexport function clamp(n: number, min: number = 0, max: number = 1): number {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n}\nexport function avg(nn: number[]): number {\n  if (nn.length < 1) return 0;\n  return sum(nn) / nn.length;\n}\nexport function sum(nn: number[]): number {\n  let n = 0;\n  for (let i = 0; i < nn.length; i++) n += nn[i]!;\n  return n;\n}\n\nexport function isNumeric(a: any): boolean {\n  return !isNaN(parseFloat(a)) && isFinite(a);\n}\n"],"names":["ZExprScalar","z","union","number","string","boolean","null","CONSTS","E","Math","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2","BINOP_MAP","alias","UNOP_MAP","IgnoreWhitespace","Rule","Ignore","QuoteToken","Any","NumericToken","NullToken","BooleanToken","IdentifierToken","InterpolationChunkToken","BinaryOperatorPrecedence","INVALID_IDENT_REGEX","createExprContext","_a","funcs","binops","unops","_b","seed","get","set","call","vars","rng","seedrandom","default","__assign","STDLIB","scope","name","match","value","evaluateExpr","code","ctx","result","executeAst","parseExpr","Grammar","pos","partial","text","Error","$","ignore","stack","sp","lastSeen","locAt","line","column","START","$next","length","concat","slice","Parser","DefaultGrammar","parser","replace","ast","type","undefined","fdef","Object","keys","includes","callee","lazy","f","apply","__spreadArray","arguments","args","assignment","left","exprToIdentifier","right","push","map","expr","binop","operator","toBoolean","test","consequent","alternate","unop","argument","accum","i","parts","kind","value_1","expression","elements","element","obj","properties","_c","value_2","key","toString","console","info","v","toNumber","fallback","isNaN","parseFloat","parseInt","radix","toObject","toArray","Array","isArray","e","toScalar","k","n","setVar","getVar","do","_i","defp","present","empty","blank","setAdd","lval","setSub","setMul","setDiv","nullCoalesce","a","b","unixTimestampNow","Date","now","unixTimestampForDate","year","mon","day","hour","min","second","getTime","all","xs","any","some","none","or","and","not","gt","gte","lt","lte","eq","neq","rand","randInRange","max","Number","randInt","floor","randIntInRange","ceil","isNumeric","bitwiseOr","bitwiseXor","bitwiseAnd","bitwiseNot","bitwiseLeftShift","bitwiseRightShift","bitwiseRightshiftUnsigned","negate","add","sub","div","mul","mod","pow","abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","cos","cosh","exp","hypot","log","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","fromCharCode","String","fromCodePoint","charAt","charCodeAt","codePointAt","localeCompare","matchAll","padEnd","c","padStart","repeat","replaceAll","startsWith","substring","toLowerCase","toUpperCase","trim","trimEnd","trimStart","clamp","avg","nn","sum","join","ss","spacer","split","s","first","arr","last","aa","bb","endsWith","lastIndexOf","indexOf","nth","reverse","take","head","tail","randEl","pop","shift","unshift","values","newPos","markSeen","assign","Use","rule","RegExp","pattern","exec","StringToken","toIgnore","Plus","$cur","skipIgnored","All","rules","$before","$after","Optional","Node","reducer","node","Star","l2r","srcMap","r2l","_","proc","x","Operator","defineProperties","writable","configurable","y","Expression","Identifier","StringLiteral","raw","NumericLiteral","NullLiteral","BooleanLiteral","InterpolationChunk","TemplateInlineExpression","TemplateLiteral","Literal","ArgumentsList","Arguments","ArgumentsExpression","part","CompoundExpression","leafs","PropertyName","ShortNotation","shortNotation","PropertyDefinition","PropertyDefinitions","PropertyDefinitionList","ObjectLiteral","Element","ElementList","ArrayLiteral","PrimaryExpression","CallExpression","$last","reduce","acc","UnaryOperator","UnaryExpression","reduceRight","LogicalExpressionOrExpression","Expr","BinaryOp","TernaryExpression","isFinite"],"mappings":"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"}