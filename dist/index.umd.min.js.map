{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import * as seedrandom from 'seedrandom';\n\nexport type DictOf<T> = { [key: string]: T };\nexport type TExprScalar = number | string | boolean | null;\nexport type TExprFuncAsync = (\n  ctx: TExprContext,\n  ...args: TExprScalar[]\n) => Promise<TExprScalar>;\nexport type TExprFuncSync = (\n  ctx: TExprContext,\n  ...args: TExprScalar[]\n) => TExprScalar;\nexport type TExprFuncDef = {\n  assignment?: true;\n  lazy?: true;\n} & (\n  | {\n      async: true;\n      f: TExprFuncAsync;\n    }\n  | {\n      async?: false;\n      f: TExprFuncSync;\n    }\n);\n\nexport type TBinopDef = {\n  alias: string;\n};\nexport type TUnopDef = {\n  alias: string;\n};\n\nexport type TExprResult = {\n  result: TExprScalar;\n  ctx: TExprContext;\n};\n\nexport type TExprContext = {\n  rng: () => number;\n  funcs: DictOf<TExprFuncDef>;\n  binops: DictOf<TBinopDef>;\n  unops: DictOf<TUnopDef>;\n  get: (key: string) => Promise<TExprScalar>;\n  set: (key: string, value: TExprScalar) => Promise<void>;\n  call?: TExprFuncAsync | undefined;\n};\n\nexport type TExpression =\n  | TCallExpression\n  | TIdentifierExpression\n  | TBinaryExpression\n  | TLiteralExpression\n  | TTernaryExpression\n  | TUnaryExpression\n  | TTemplateLiteralExpression;\n\nexport type TTemplateLiteralExpression = {\n  type: 'TemplateLiteral';\n  parts: [['chunks', string] | ['expression', TExpression]];\n};\n\nexport type TCallExpression = {\n  type: 'CallExpression';\n  callee: TIdentifierExpression;\n  arguments: TExpression[];\n};\n\nexport type TIdentifierExpression = {\n  type: 'Identifier';\n  name: string;\n};\n\nexport type TBinaryExpression = {\n  type: 'BinaryExpression';\n  left: TExpression;\n  operator: string;\n  right: TExpression;\n};\n\nexport type TLiteralExpression = {\n  type: 'Literal';\n  value: string;\n  raw: string;\n};\n\nexport type TTernaryExpression = {\n  type: 'TernaryExpression';\n  test: TExpression;\n  consequent: TExpression;\n  alternate: TExpression;\n};\n\nexport type TUnaryExpression = {\n  type: 'UnaryExpression';\n  argument: TExpression;\n  operator: string;\n};\n\nexport const CONSTS: DictOf<TExprScalar> = {\n  E: Math.E,\n  LN10: Math.LN10,\n  LN2: Math.LN2,\n  LOG10E: Math.LOG10E,\n  LOG2E: Math.LOG2E,\n  PI: Math.PI,\n  SQRT1_2: Math.SQRT1_2,\n  SQRT2: Math.SQRT2,\n};\n\nconst BINOP_MAP = {\n  '**': { alias: 'pow' },\n  '*': { alias: 'mul' },\n  '/': { alias: 'div' },\n  '%': { alias: 'mod' },\n  '+': { alias: 'add' },\n  '-': { alias: 'sub' },\n  '>>>': { alias: 'bitwiseRightShiftUnsigned' },\n  '<<': { alias: 'bitwiseLeftShift' },\n  '>>': { alias: 'bitwiseRightShift' },\n  '<=': { alias: 'lte' },\n  '>=': { alias: 'gte' },\n  '<': { alias: 'lt' },\n  '>': { alias: 'gt' },\n  '===': { alias: 'eq' },\n  '!==': { alias: 'neq' },\n  '==': { alias: 'eq' },\n  '!=': { alias: 'neq' },\n  '&': { alias: 'bitwiseAnd' },\n  '^': { alias: 'bitwiseXor' },\n  '|': { alias: 'bitwiseOr' },\n  '&&': { alias: 'and' },\n  '||': { alias: 'or' },\n  ':=': { alias: 'setVar' },\n  '+=': { alias: 'setAdd' },\n  '-=': { alias: 'setSub' },\n  '/=': { alias: 'setDiv' },\n  '*=': { alias: 'setMul' },\n};\n\nconst UNOP_MAP = {\n  '+': { alias: 'number' },\n  '-': { alias: 'negate' },\n  '~': { alias: 'bitwiseNot' },\n  '!': { alias: 'not' },\n};\n\nconst IgnoreWhitespace = (Rule) => Ignore(/^\\s+/, Rule);\nconst QuoteToken = Any(\n  /^('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')/,\n  /^(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")/,\n);\nconst NumericToken = Any(\n  /^((?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\\b/,\n  /^(0[xX][0-9a-fA-F]+)\\b/,\n);\nconst NullToken = /^(null)\\b/;\nconst BooleanToken = /^(true|false)\\b/;\nconst IdentifierToken = /^([a-zA-Z_$][a-zA-Z0-9_$.]*)/;\nconst InterpolationChunkToken = /^((?:\\$(?!{)|\\\\.|[^`$\\\\])+)/;\nconst BinaryOperatorPrecedence = [\n  '**',\n  Any('*', '/', '%'),\n  Any('+', '-'),\n  Any('>>>', '<<', '>>'),\n  Any('<=', '>=', '<', '>'),\n  Any('===', '!==', '==', '!='),\n  /^&(?!&)/,\n  '^',\n  /^\\|(?!\\|)/,\n  '&&',\n  '||',\n  Any(':=', '+=', '-=', '*=', '/='),\n];\n\nconst INVALID_IDENT_REGEX = /^__proto__|prototype|constructor$/;\n\nexport function createExprContext({\n  funcs,\n  binops,\n  unops,\n  seed = 'expreval',\n  get,\n  set,\n  call,\n}: Partial<TExprContext> & { seed?: string }): TExprContext {\n  const vars: { [key: string]: TExprScalar } = {};\n  return {\n    rng: seedrandom.default(seed),\n    funcs: { ...STDLIB, ...funcs },\n    binops: { ...BINOP_MAP, ...binops },\n    unops: { ...UNOP_MAP, ...unops },\n    get: async (name) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return 0;\n      }\n      if (get) {\n        return (await get(name)) ?? null;\n      }\n      return vars[name] ?? null;\n    },\n    set: async (name, value) => {\n      if (name.match(INVALID_IDENT_REGEX)) {\n        return;\n      }\n      if (set) {\n        return await set(name, value);\n      }\n      vars[name] = value;\n      return;\n    },\n    call,\n  };\n}\n\nexport async function evaluateExpr(\n  code: string,\n  ctx: TExprContext = createExprContext({}),\n): Promise<TExprResult> {\n  return {\n    result: await executeAst(parseExpr(code), ctx),\n    ctx,\n  };\n}\n\nexport default evaluateExpr;\n\nexport function parseExpr(code: string): TExpression {\n  const parser = Parser(DefaultGrammar);\n  return parser(code.replace(/\\/\\/.*\\n/g, ''));\n}\n\nexport async function executeAst(\n  ast: TExpression,\n  ctx: TExprContext = createExprContext({}),\n): Promise<TExprScalar> {\n  switch (ast.type) {\n    case 'Literal':\n      return ast.value;\n    case 'Identifier':\n      const value = await ctx.get(ast.name);\n      return value !== undefined ? value : ast.name;\n    case 'CallExpression':\n      const fdef = Object.keys(ctx.funcs).includes(ast.callee.name)\n        ? ctx.funcs[ast.callee.name]\n        : null;\n      const args: TExprScalar[] = [];\n      if (fdef && fdef.assignment && ast.arguments.length > 1) {\n        const left = exprToIdentifier(ast.arguments[0]!) ?? '';\n        const right = ast.arguments.slice(1);\n        args.push(\n          left,\n          ...(await asyncMap(\n            right,\n            async (expr) => await executeAst(expr, ctx),\n          )),\n        );\n      } else {\n        args.push(\n          ...(await asyncMap(\n            ast.arguments,\n            async (expr) => await executeAst(expr, ctx),\n          )),\n        );\n      }\n      if (fdef) {\n        if (fdef.async) {\n          return await fdef.f(ctx, ...args);\n        }\n        return fdef.f(ctx, ...args);\n      } else if (ctx.call) {\n        return await ctx.call(ctx, ast.callee.name, ...args);\n      }\n      throw new Error(`Function not found: '${ast.callee.name}'`);\n    case 'BinaryExpression':\n      const binop = Object.keys(ctx.binops).includes(ast.operator)\n        ? ctx.binops[ast.operator]\n        : null;\n      if (binop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: binop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.left, ast.right],\n          },\n          ctx,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'TernaryExpression':\n      const result = await executeAst(ast.test, ctx);\n      if (toBoolean(result)) {\n        return await executeAst(ast.consequent, ctx);\n      }\n      return await executeAst(ast.alternate, ctx);\n    case 'UnaryExpression':\n      const unop = Object.keys(ctx.unops).includes(ast.operator)\n        ? ctx.unops[ast.operator]\n        : null;\n      if (unop) {\n        return executeAst(\n          {\n            type: 'CallExpression',\n            callee: {\n              name: unop.alias,\n              type: 'Identifier',\n            },\n            arguments: [ast.argument],\n          },\n          ctx,\n        );\n      }\n      throw new Error(`Operator not found: '${ast.operator}'`);\n    case 'TemplateLiteral':\n      let accum = '';\n      for (let i = 0; i < ast.parts.length; i++) {\n        const [kind, value] = ast.parts[i]!;\n        if (kind === 'chunks') {\n          accum += value;\n        } else if (kind === 'expression') {\n          accum += (await executeAst(value, ctx)) + '';\n        }\n      }\n      return accum;\n    default:\n      throw new Error(`Syntax error`);\n  }\n}\n\nexport function exprToIdentifier(v: TExpression): string | null {\n  if (v.type === 'Identifier') {\n    return v.name;\n  }\n  return null;\n}\n\nexport function toNumber(v: any, fallback: number = 0): number {\n  if (typeof v === 'number') {\n    return isNaN(v) ? fallback : v;\n  }\n  if (typeof v === 'string') {\n    if (v.includes('.')) {\n      return parseFloat(v);\n    }\n    return parseInt(v);\n  }\n  return fallback;\n}\n\nexport function toBoolean(v: TExprScalar): boolean {\n  if (!v) {\n    return false;\n  }\n  if (typeof v === 'string' && v.match(/^\\s+$/)) {\n    return false;\n  }\n  if (v === 'false') {\n    return false;\n  }\n  if (v === '0') {\n    return false;\n  }\n  return true;\n}\n\nexport function toString(v: TExprScalar, radix: number = 10): string {\n  if (typeof v === 'number') {\n    return v.toString(radix);\n  }\n  if (v === true || v === 'true') {\n    return 'true';\n  }\n  if (!v || v === 'false') {\n    return 'false';\n  }\n  return v + '';\n}\n\nexport function toScalar(n: any, radix: number = 10): TExprScalar {\n  if (typeof n === 'number') {\n    return n.toString(radix);\n  }\n  if (typeof n === 'string') {\n    return n;\n  }\n  if (typeof n === 'boolean') {\n    return n;\n  }\n  if (!n) {\n    return null;\n  }\n  return n + '';\n}\n\nasync function asyncMap<V, T>(\n  array: V[],\n  callback: (el: V, idx: number, arr: V[]) => Promise<T>,\n) {\n  const out: T[] = [];\n  for (let index = 0; index < array.length; index++) {\n    const m = await callback(array[index]!, index, array);\n    out.push(m);\n  }\n  return out;\n}\n\nasync function setVar<T extends TExprScalar>(\n  ctx: TExprContext,\n  name: any,\n  value: T,\n): Promise<T> {\n  const key = toString(name);\n  await ctx.set(key, value);\n  return value;\n}\n\nasync function getVar(ctx: TExprContext, name: any): Promise<TExprScalar> {\n  return (await ctx.get(name + '')) ?? null;\n}\n\nexport const STDLIB: DictOf<TExprFuncDef> = {\n  do: {\n    f(ctx, ...args) {\n      return args[args.length - 1] ?? null;\n    },\n  },\n\n  present: {\n    f(ctx, v) {\n      return !!v;\n    },\n  },\n  empty: {\n    f(ctx, v) {\n      return !v;\n    },\n  },\n  blank: {\n    f(ctx, v) {\n      if (typeof v === 'string' && (!v || v.match(/^\\s+$/))) {\n        return true;\n      }\n      return !v;\n    },\n  },\n\n  join: {\n    f(ctx, spacer, ...ss) {\n      return ss.join(toString(spacer));\n    },\n  },\n\n  setVar: {\n    assignment: true,\n    async: true,\n    async f(ctx, left, right) {\n      return await setVar(ctx, left, right);\n    },\n  },\n  setAdd: {\n    assignment: true,\n    async: true,\n    async f(ctx, left, right) {\n      const lval = await getVar(ctx, left);\n      if (typeof lval === 'string') {\n        return await setVar(ctx, left, lval + right + '');\n      }\n      return await setVar(ctx, left, toNumber(lval) + toNumber(right));\n    },\n  },\n  setSub: {\n    assignment: true,\n    async: true,\n    async f(ctx, left, right) {\n      return await setVar(\n        ctx,\n        left,\n        toNumber(await getVar(ctx, left)) - toNumber(right),\n      );\n    },\n  },\n  setMul: {\n    assignment: true,\n    async: true,\n    async f(ctx, left, right) {\n      return await setVar(\n        ctx,\n        left,\n        toNumber(await getVar(ctx, left)) * toNumber(right),\n      );\n    },\n  },\n  setDiv: {\n    assignment: true,\n    async: true,\n    async f(ctx, left, right) {\n      return await setVar(\n        ctx,\n        left,\n        toNumber(await getVar(ctx, left)) / toNumber(right),\n      );\n    },\n  },\n\n  unixTimestampNow: {\n    f() {\n      return Date.now();\n    },\n  },\n  unixTimestampForDate: {\n    f(ctx, year, mon, day, hour, min, second) {\n      return new Date(\n        toNumber(year),\n        toNumber(mon),\n        toNumber(day),\n        toNumber(hour),\n        toNumber(min),\n        toNumber(second),\n      ).getTime();\n    },\n  },\n\n  all: {\n    f(ctx, ...xs) {\n      for (let i = 0; i < xs.length; i++) {\n        if (!xs[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  any: {\n    f(ctx, ...xs) {\n      for (let i = 0; i < xs.length; i++) {\n        if (xs[i]) {\n          return true;\n        }\n      }\n      return false;\n    },\n  },\n  some: {\n    f(ctx, ...xs) {\n      return !!STDLIB['any']!.f(ctx, ...xs);\n    },\n  },\n  none: {\n    f(ctx, ...xs) {\n      return !STDLIB['any']!.f(ctx, ...xs);\n    },\n  },\n\n  or: {\n    f(ctx, a, b) {\n      return toBoolean(a) || toBoolean(b);\n    },\n  },\n  and: {\n    f(ctx, a, b) {\n      return toBoolean(a) && toBoolean(b);\n    },\n  },\n  not: {\n    f(ctx, a) {\n      return !toBoolean(a);\n    },\n  },\n\n  gt: {\n    f(ctx, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  gte: {\n    f(ctx, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lt: {\n    f(ctx, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  lte: {\n    f(ctx, a, b) {\n      return toNumber(a) > toNumber(b);\n    },\n  },\n  eq: {\n    f(ctx, a, b) {\n      return toString(a) === toString(b);\n    },\n  },\n  neq: {\n    f(ctx, a, b) {\n      return toString(a) !== toString(b);\n    },\n  },\n\n  rand: {\n    f(ctx) {\n      return ctx.rng();\n    },\n  },\n  randInRange: {\n    f(ctx, min, max) {\n      return ctx.rng() * (Number(max) - Number(min)) + Number(min);\n    },\n  },\n  randInt: {\n    f(ctx) {\n      return Math.floor(ctx.rng() * 10);\n    },\n  },\n  randIntInRange: {\n    f(ctx, min, max) {\n      min = Math.ceil(Number(min));\n      max = Math.floor(Number(max));\n      return Math.floor(ctx.rng() * (max - min + 1)) + min;\n    },\n  },\n\n  number: {\n    f(ctx, a) {\n      return Number(a);\n    },\n  },\n  bitwiseOr: {\n    f(ctx, a, b) {\n      return Number(a) | Number(b);\n    },\n  },\n  bitwiseXor: {\n    f(ctx, a, b) {\n      return Number(a) ^ Number(b);\n    },\n  },\n  bitwiseAnd: {\n    f(ctx, a, b) {\n      return Number(a) & Number(b);\n    },\n  },\n  bitwiseNot: {\n    f(ctx, a) {\n      return ~Number(a);\n    },\n  },\n  bitwiseLeftShift: {\n    f(ctx, a, b) {\n      return Number(a) << Number(b);\n    },\n  },\n  bitwiseRightShift: {\n    f(ctx, a, b) {\n      return Number(a) >> Number(b);\n    },\n  },\n  bitwiseRightshiftUnsigned: {\n    f(ctx, a, b) {\n      return Number(a) >>> Number(b);\n    },\n  },\n  negate: {\n    f(ctx, a) {\n      return -toNumber(a);\n    },\n  },\n  add: {\n    f(ctx, a, b) {\n      if (typeof a === 'string') {\n        return a + b + '';\n      }\n      return toNumber(a) + toNumber(b);\n    },\n  },\n  sub: {\n    f(ctx, a, b) {\n      return toNumber(a) - toNumber(b);\n    },\n  },\n  div: {\n    f(ctx, a, b) {\n      return toNumber(a) / toNumber(b);\n    },\n  },\n  mul: {\n    f(ctx, a, b) {\n      return toNumber(a) * toNumber(b);\n    },\n  },\n  mod: {\n    f(ctx, a, b) {\n      return toNumber(a) % toNumber(b);\n    },\n  },\n  pow: {\n    f(ctx, a, b) {\n      return Math.pow(toNumber(a), toNumber(b));\n    },\n  },\n\n  abs: {\n    f(ctx, a) {\n      return Math.abs(toNumber(a));\n    },\n  },\n  acos: {\n    f(ctx, a) {\n      return Math.acos(toNumber(a));\n    },\n  },\n  acosh: {\n    f(ctx, a) {\n      return Math.acosh(toNumber(a));\n    },\n  },\n  asin: {\n    f(ctx, a) {\n      return Math.asin(toNumber(a));\n    },\n  },\n  asinh: {\n    f(ctx, a) {\n      return Math.asinh(toNumber(a));\n    },\n  },\n  atan: {\n    f(ctx, a) {\n      return Math.atan(toNumber(a));\n    },\n  },\n  atan2: {\n    f(ctx, a, b) {\n      return Math.atan2(toNumber(a), toNumber(b));\n    },\n  },\n  atanh: {\n    f(ctx, a) {\n      return Math.atanh(toNumber(a));\n    },\n  },\n  cbrt: {\n    f(ctx, a) {\n      return Math.cbrt(toNumber(a));\n    },\n  },\n  ceil: {\n    f(ctx, a) {\n      return Math.ceil(toNumber(a));\n    },\n  },\n  cos: {\n    f(ctx, a) {\n      return Math.cos(toNumber(a));\n    },\n  },\n  cosh: {\n    f(ctx, a) {\n      return Math.cosh(toNumber(a));\n    },\n  },\n  exp: {\n    f(ctx, a) {\n      return Math.exp(toNumber(a));\n    },\n  },\n  floor: {\n    f(ctx, a) {\n      return Math.floor(toNumber(a));\n    },\n  },\n  hypot: {\n    f(ctx, a) {\n      return Math.hypot(toNumber(a));\n    },\n  },\n  log: {\n    f(ctx, a) {\n      return Math.log(toNumber(a));\n    },\n  },\n  log10: {\n    f(ctx, a) {\n      return Math.log10(toNumber(a));\n    },\n  },\n  log2: {\n    f(ctx, a) {\n      return Math.log2(toNumber(a));\n    },\n  },\n  max: {\n    f(ctx, a) {\n      return Math.max(toNumber(a));\n    },\n  },\n  min: {\n    f(ctx, a) {\n      return Math.min(toNumber(a));\n    },\n  },\n  round: {\n    f(ctx, a) {\n      return Math.round(toNumber(a));\n    },\n  },\n  sign: {\n    f(ctx, a) {\n      return Math.sign(toNumber(a));\n    },\n  },\n  sin: {\n    f(ctx, a) {\n      return Math.sin(toNumber(a));\n    },\n  },\n  sinh: {\n    f(ctx, a) {\n      return Math.sinh(toNumber(a));\n    },\n  },\n  sqrt: {\n    f(ctx, a) {\n      return Math.sqrt(toNumber(a));\n    },\n  },\n  tan: {\n    f(ctx, a) {\n      return Math.tan(toNumber(a));\n    },\n  },\n  tanh: {\n    f(ctx, a) {\n      return Math.tanh(toNumber(a));\n    },\n  },\n  trunc: {\n    f(ctx, a) {\n      return Math.trunc(toNumber(a));\n    },\n  },\n\n  fromCharCode: {\n    f(ctx, a) {\n      return String.fromCharCode(Number(a));\n    },\n  },\n  fromCodePoint: {\n    f(ctx, a) {\n      return String.fromCodePoint(Number(a));\n    },\n  },\n  parseInt: {\n    f(ctx, a, b) {\n      return parseInt(toString(a), Number(b));\n    },\n  },\n  parseFloat: {\n    f(ctx, a) {\n      return parseFloat(toString(a));\n    },\n  },\n  length: {\n    f(ctx, a) {\n      return toString(a).length;\n    },\n  },\n  charAt: {\n    f(ctx, a, b) {\n      return toString(a).charAt(Number(b));\n    },\n  },\n  charCodeAt: {\n    f(ctx, a, b) {\n      return toString(a).charCodeAt(Number(b));\n    },\n  },\n  codePointAt: {\n    f(ctx, a, b) {\n      return toString(a).codePointAt(Number(b)) ?? 0;\n    },\n  },\n  concat: {\n    f(ctx, ...ss) {\n      return ''.concat(...ss.map((s) => toString(s)));\n    },\n  },\n  endsWith: {\n    f(ctx, a, b) {\n      return toString(a).endsWith(toString(b));\n    },\n  },\n  includes: {\n    f(ctx, a, b) {\n      return toString(a).includes(toString(b));\n    },\n  },\n  indexOf: {\n    f(ctx, a, b) {\n      return toString(a).indexOf(toString(b));\n    },\n  },\n  lastIndexOf: {\n    f(ctx, a, b) {\n      return toString(a).lastIndexOf(toString(b));\n    },\n  },\n  localeCompare: {\n    f(ctx, a, b) {\n      return toString(a).localeCompare(toString(b));\n    },\n  },\n  match: {\n    f(ctx, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  matchAll: {\n    f(ctx, a, b) {\n      return !!toString(a).match(toString(b));\n    },\n  },\n  padEnd: {\n    f(ctx, a, b, c) {\n      return toString(a).padEnd(Number(b), toString(c ?? ''));\n    },\n  },\n  padStart: {\n    f(ctx, a, b, c) {\n      return toString(a).padStart(Number(b), toString(c ?? ''));\n    },\n  },\n  repeat: {\n    f(ctx, a, b) {\n      return toString(a).repeat(Number(b));\n    },\n  },\n  replace: {\n    f(ctx, a, b, c) {\n      return toString(a).replace(toString(b), toString(c));\n    },\n  },\n  replaceAll: {\n    f(ctx, a, b, c) {\n      return toString(a).replaceAll(toString(b), toString(c));\n    },\n  },\n  slice: {\n    f(ctx, a, b, c) {\n      return toString(a).slice(Number(b), Number(c ?? toString(a).length));\n    },\n  },\n  startsWith: {\n    f(ctx, a, b) {\n      return toString(a).startsWith(toString(b));\n    },\n  },\n  substring: {\n    f(ctx, a, b, c) {\n      return toString(a).substring(Number(b), Number(c));\n    },\n  },\n  toLowerCase: {\n    f(ctx, a) {\n      return toString(a).toLowerCase();\n    },\n  },\n  toUpperCase: {\n    f(ctx, a) {\n      return toString(a).toUpperCase();\n    },\n  },\n  trim: {\n    f(ctx, a) {\n      return toString(a).trim();\n    },\n  },\n  trimEnd: {\n    f(ctx, a) {\n      return toString(a).trimEnd();\n    },\n  },\n  trimStart: {\n    f(ctx, a) {\n      return toString(a).trimStart();\n    },\n  },\n};\n\n// The code below is derived from code at https://github.com/dmaevsky/rd-parse. License:\n// The MIT License (MIT)\n// Copyright 2013 - present Dmitry Maevsky\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst associativity = (binop) => (binop === '**' ? r2l : l2r);\n\nfunction locAt(text, newPos, { pos, line, column }) {\n  while (pos < newPos) {\n    const ch = text[pos++];\n    if (ch === '\\n') {\n      column = 1;\n      line++;\n    } else {\n      column++;\n    }\n  }\n  return { pos, line, column };\n}\n\nconst markSeen = ($) => {\n  if ($.pos > $.lastSeen.pos) {\n    Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen));\n  }\n};\n\nfunction RegexToken(pattern) {\n  return ($) => {\n    markSeen($);\n    const match = pattern.exec($.text.substring($.pos));\n    if (!match) {\n      return $;\n    }\n    const $next = {\n      ...$,\n      pos: $.pos + match[0].length,\n    };\n    for (let i = 1; i < match.length; i++) {\n      $.stack[$next.sp++] = match[i];\n    }\n    return $next;\n  };\n}\n\nfunction StringToken(pattern) {\n  return ($) => {\n    markSeen($);\n    if ($.text.startsWith(pattern, $.pos)) {\n      return {\n        ...$,\n        pos: $.pos + pattern.length,\n      };\n    }\n    return $;\n  };\n}\n\nfunction Use(rule) {\n  if (typeof rule === 'function') {\n    return rule;\n  }\n  if (rule instanceof RegExp) {\n    return RegexToken(rule);\n  }\n  if (typeof rule === 'string') {\n    return StringToken(rule);\n  }\n  throw new Error('Invalid rule');\n}\n\nfunction Ignore(toIgnore, rule) {\n  rule = Use(rule);\n  if (toIgnore) {\n    toIgnore = Ignore(null, Plus(toIgnore));\n  }\n\n  return ($) => {\n    const $cur = toIgnore ? toIgnore($) : $;\n    $.ignore.push(toIgnore);\n    const $next = rule($cur);\n    $.ignore.pop();\n    return $next === $cur ? $ : toIgnore ? toIgnore($next) : $next;\n  };\n}\n\nconst skipIgnored = ($) => {\n  if (!$.ignore.length) {\n    return $;\n  }\n  const toIgnore = $.ignore[$.ignore.length - 1];\n  return toIgnore ? toIgnore($) : $;\n};\n\nfunction All(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    let $cur = $;\n    for (let i = 0; i < rules.length; i++) {\n      const $before = i > 0 ? skipIgnored($cur) : $cur;\n      const $after = rules[i]($before);\n      if ($after === $before) {\n        return $;\n      }\n      if ($after.pos > $before.pos || $after.sp > $before.sp) {\n        $cur = $after;\n      }\n    }\n    return $cur;\n  };\n}\n\nfunction Any(...rules) {\n  rules = rules.map(Use);\n  return ($) => {\n    for (let i = 0; i < rules.length; i++) {\n      const $next = rules[i]($);\n      if ($next !== $) {\n        return $next;\n      }\n    }\n    return $;\n  };\n}\n\nfunction Plus(rule) {\n  rule = Use(rule);\n  return ($) => {\n    while (true) {\n      const $cur = skipIgnored($);\n      const $next = rule($cur);\n      if ($next === $cur) {\n        return $;\n      }\n      $ = $next;\n    }\n  };\n}\n\nfunction Optional(rule) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next !== $) {\n      return $next;\n    }\n    return { ...$ };\n  };\n}\n\nfunction Node(rule, reducer) {\n  rule = Use(rule);\n  return ($) => {\n    const $next = rule($);\n    if ($next === $) {\n      return $;\n    }\n    const node = reducer($.stack.slice($.sp, $next.sp), $, $next);\n    $next.sp = $.sp;\n    if (node !== null) {\n      $.stack[$next.sp++] = node;\n    }\n    return $next;\n  };\n}\n\nconst Star = (rule) => Optional(Plus(rule));\n\nconst Y = (proc) => ((x) => proc((y) => x(x)(y)))((x) => proc((y) => x(x)(y)));\n\nconst START = (text, pos = 0) => ({\n  text,\n  ignore: [],\n  stack: [],\n  sp: 0,\n  lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),\n  pos,\n});\n\nfunction Parser(\n  Grammar,\n  pos = 0,\n  partial = false,\n): (text: string) => TExpression {\n  return (text) => {\n    if (typeof text !== 'string') {\n      throw new Error('Parsing function expects a string input');\n    }\n    const $ = START(text, pos);\n    const $next = Grammar($);\n    if ($ === $next || (!partial && $next.pos < text.length)) {\n      throw new Error(\n        `Unexpected token at ${$.lastSeen.line}:${\n          $.lastSeen.column\n        }. Remainder: ${text.slice($.lastSeen.pos)}`,\n      );\n    }\n    return $.stack[0] as unknown as TExpression;\n  };\n}\n\nfunction l2r(parts, $) {\n  let left = parts[0];\n  for (let i = 1; i < parts.length; i += 2) {\n    const [operator, right] = [parts[i].operator, parts[i + 1]];\n    left = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      $,\n      { pos: right.pos + right.text.length },\n    );\n  }\n  return left;\n}\n\nfunction r2l(parts, _, $next) {\n  let right = parts[parts.length - 1];\n  for (let i = parts.length - 2; i >= 0; i -= 2) {\n    const [left, operator] = [parts[i - 1], parts[i].operator];\n    right = srcMap(\n      {\n        type: 'BinaryExpression',\n        left,\n        operator,\n        right,\n      },\n      { pos: left.pos },\n      $next,\n    );\n  }\n  return right;\n}\n\nconst Operator = (Rule) =>\n  Node(Rule, (_, $, $next) => ({\n    $,\n    operator: $.text.substring($.pos, $next.pos),\n  }));\n\nconst srcMap = (obj, $, $next) =>\n  Object.defineProperties(obj, {\n    pos: { writable: true, configurable: true, value: $.pos },\n    text: {\n      writable: true,\n      configurable: true,\n      value: ($.text || $next.text).slice($.pos, $next.pos),\n    },\n  });\n\nconst DefaultGrammar = IgnoreWhitespace(\n  Y((Expression) => {\n    const Identifier = Node(IdentifierToken, ([name]) => ({\n      type: 'Identifier',\n      name,\n    }));\n    const StringLiteral = Node(QuoteToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw.slice(1, -1),\n      raw,\n    }));\n    const NumericLiteral = Node(NumericToken, ([raw]) => ({\n      type: 'Literal',\n      value: +raw,\n      raw,\n    }));\n    const NullLiteral = Node(NullToken, ([raw]) => ({\n      type: 'Literal',\n      value: null,\n      raw,\n    }));\n    const BooleanLiteral = Node(BooleanToken, ([raw]) => ({\n      type: 'Literal',\n      value: raw === 'true',\n      raw,\n    }));\n    const InterpolationChunk = Node(InterpolationChunkToken, ([raw]) => [\n      'chunks',\n      raw,\n    ]);\n    const TemplateInlineExpression = Node(\n      All('${', IgnoreWhitespace(Expression), '}'),\n      ([expression]) => ['expression', expression],\n    );\n    const TemplateLiteral = Node(\n      Ignore(\n        null,\n        All('`', Star(Any(InterpolationChunk, TemplateInlineExpression)), '`'),\n      ),\n      (parts) => ({ type: 'TemplateLiteral', parts }),\n    );\n    const Literal = Any(\n      StringLiteral,\n      NumericLiteral,\n      NullLiteral,\n      BooleanLiteral,\n      TemplateLiteral,\n    );\n    const ArgumentsList = All(Expression, Star(All(',', Expression)));\n    const Arguments = Node(\n      All('(', Optional(All(ArgumentsList, Optional(','))), ')'),\n      (args) => ({\n        args,\n      }),\n    );\n    const ArgumentsExpression = Node(Any(Arguments), ([part], _, $next) => ({\n      part,\n      $next,\n    }));\n    const CompoundExpression = Node(\n      All(Expression, Star(All(',', Expression))),\n      (leafs) =>\n        leafs.length > 1 ? { type: 'CompoundExpression', leafs } : leafs[0],\n    );\n    const PrimaryExpression = Node(\n      Any(Literal, Identifier, All('(', CompoundExpression, ')')),\n      ([expr], $, $next) => srcMap(expr, $, $next),\n    );\n    const CallExpression = Node(\n      All(PrimaryExpression, Star(ArgumentsExpression)),\n      (parts, $, $last) => {\n        return parts.reduce((acc, { part, $next }) => {\n          return srcMap(\n            { type: 'CallExpression', callee: acc, arguments: part.args },\n            $,\n            $next,\n          );\n        });\n      },\n    );\n    const UnaryOperator = Operator(Any('+', '-', '~', '!'));\n    const UnaryExpression = Node(\n      All(Star(UnaryOperator), CallExpression),\n      (parts, _, $next) =>\n        parts.reduceRight((argument, { $, operator }) =>\n          srcMap({ type: 'UnaryExpression', argument, operator }, $, $next),\n        ),\n    );\n    const LogicalExpressionOrExpression = BinaryOperatorPrecedence.reduce(\n      (Expr, BinaryOp) =>\n        Node(\n          All(Expr, Star(All(Operator(BinaryOp), Expr))),\n          associativity(BinaryOp),\n        ),\n      UnaryExpression,\n    );\n    const TernaryExpression = Node(\n      All(\n        LogicalExpressionOrExpression,\n        Optional(All('?', Expression, ':', Expression)),\n      ),\n      ([test, consequent, alternate]) =>\n        consequent\n          ? { type: 'TernaryExpression', test, consequent, alternate }\n          : test,\n    );\n    return Node(Any(TernaryExpression), ([expr], $, $next) =>\n      srcMap(expr, $, $next),\n    );\n  }),\n);\n"],"names":["CONSTS","E","Math","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2","BINOP_MAP","alias","UNOP_MAP","IgnoreWhitespace","Rule","Ignore","QuoteToken","Any","NumericToken","NullToken","BooleanToken","IdentifierToken","InterpolationChunkToken","BinaryOperatorPrecedence","INVALID_IDENT_REGEX","createExprContext","_a","_this","this","funcs","binops","unops","_b","seed","get","set","call","vars","rng","seedrandom","default","__assign","STDLIB","name","__awaiter","match","_c","sent","value","evaluateExpr","code","ctx","executeAst","parseExpr","result","Grammar","pos","partial","text","Error","$","ignore","stack","sp","lastSeen","locAt","line","column","START","$next","length","concat","slice","Parser","DefaultGrammar","parser","replace","ast","type","undefined","_m","fdef","Object","keys","includes","callee","args","assignment","arguments","left","exprToIdentifier","right","_d","push","apply","asyncMap","expr","__generator","_e","__spreadArray","_f","_h","_g","_j","async","f","binop","operator","test","toBoolean","consequent","alternate","unop","argument","accum","i","parts","_k","kind","value_1","_l","v","toNumber","fallback","isNaN","parseFloat","parseInt","toString","radix","array","callback","out","index","m","setVar","key","getVar","do","_i","present","empty","blank","join","spacer","ss","setAdd","lval","setSub","setMul","setDiv","unixTimestampNow","Date","now","unixTimestampForDate","year","mon","day","hour","min","second","getTime","all","xs","any","some","none","or","a","b","and","not","gt","gte","lt","lte","eq","neq","rand","randInRange","max","Number","randInt","floor","randIntInRange","ceil","number","bitwiseOr","bitwiseXor","bitwiseAnd","bitwiseNot","bitwiseLeftShift","bitwiseRightShift","bitwiseRightshiftUnsigned","negate","add","sub","div","mul","mod","pow","abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","cos","cosh","exp","hypot","log","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","fromCharCode","String","fromCodePoint","charAt","charCodeAt","codePointAt","map","s","endsWith","indexOf","lastIndexOf","localeCompare","matchAll","padEnd","c","padStart","repeat","replaceAll","startsWith","substring","toLowerCase","toUpperCase","trim","trimEnd","trimStart","newPos","markSeen","assign","Use","rule","RegExp","pattern","exec","StringToken","toIgnore","Plus","$cur","pop","skipIgnored","All","rules","$before","$after","Optional","Node","reducer","node","Star","l2r","srcMap","r2l","_","proc","x","Operator","obj","defineProperties","writable","configurable","y","Expression","Identifier","StringLiteral","raw","NumericLiteral","NullLiteral","BooleanLiteral","InterpolationChunk","TemplateInlineExpression","TemplateLiteral","Literal","ArgumentsList","Arguments","ArgumentsExpression","part","CompoundExpression","leafs","PrimaryExpression","CallExpression","$last","reduce","acc","UnaryOperator","UnaryExpression","reduceRight","LogicalExpressionOrExpression","Expr","BinaryOp","TernaryExpression","n"],"mappings":"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"}